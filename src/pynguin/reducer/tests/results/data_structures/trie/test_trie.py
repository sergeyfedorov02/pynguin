# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import trie as module_0


def test_case_0():
    str_0 = "}*"
    str_1 = '%l^MlhyCy"i8lTzRCZ'
    str_2 = '}="/;pW'
    list_0 = [str_0, str_1, str_2]
    trie_node_0 = module_0.TrieNode()
    none_type_0 = trie_node_0.insert_many(list_0)
    assert len(trie_node_0.nodes) == 2


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ""
    trie_node_0 = module_0.TrieNode()
    none_type_0 = trie_node_0.insert(str_0)
    trie_node_1 = module_0.TrieNode()
    none_type_1 = trie_node_1.insert(str_0)
    trie_node_1.insert_many(trie_node_0)


def test_case_2():
    str_0 = '\\ARm!_?v3f\rz"8/\tK-Z+'
    trie_node_0 = module_0.TrieNode()
    bool_0 = trie_node_0.find(str_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    trie_node_0 = module_0.TrieNode()
    str_0 = "\\i+~UH_e~Z5h])eD3P"
    none_type_0 = module_0.print_words(trie_node_0, str_0)
    list_0 = []
    trie_node_1 = module_0.TrieNode()
    none_type_1 = trie_node_1.insert_many(list_0)
    str_1 = ""
    bool_0 = trie_node_0.find(str_1)
    trie_node_1.find(none_type_1)


def test_case_4():
    str_0 = ",h"
    list_0 = [str_0, str_0]
    trie_node_0 = module_0.TrieNode()
    none_type_0 = trie_node_0.delete(str_0)
    none_type_1 = trie_node_0.insert_many(list_0)
    assert len(trie_node_0.nodes) == 1
    none_type_2 = trie_node_0.insert_many(list_0)
    trie_node_1 = module_0.TrieNode()
    none_type_3 = trie_node_1.insert(str_0)
    assert len(trie_node_1.nodes) == 1
    str_1 = "PK$\t]k3i:]U4g8u\x0c?KKN"
    none_type_4 = module_0.print_words(trie_node_1, str_1)
    trie_node_2 = module_0.TrieNode()
    str_2 = "&YSqI9@C#CT[(EpRPw"
    none_type_5 = trie_node_0.delete(str_2)
    trie_node_3 = module_0.TrieNode()
    none_type_6 = trie_node_0.delete(str_0)
    assert trie_node_0.nodes == {}
    trie_node_4 = module_0.TrieNode()
    none_type_7 = trie_node_2.insert(str_1)
    assert len(trie_node_2.nodes) == 1


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "?RW`"
    trie_node_0 = module_0.TrieNode()
    none_type_0 = trie_node_0.delete(str_0)
    float_0 = 1240.950133
    trie_node_1 = module_0.TrieNode()
    trie_node_1.find(float_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "Ci[%sQC"
    trie_node_0 = module_0.TrieNode()
    trie_node_1 = module_0.TrieNode()
    none_type_0 = trie_node_1.insert(str_0)
    assert len(trie_node_1.nodes) == 1
    none_type_1 = trie_node_0.insert(str_0)
    assert len(trie_node_0.nodes) == 1
    none_type_2 = None
    module_0.print_words(trie_node_0, none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    trie_node_0 = module_0.TrieNode()
    str_0 = "-[k1e\x0bb?|NO{.a%oSlS"
    bytes_0 = b"\xc1V\x9aV^\xae\xe3W\xffP\xd1=\xf0\\"
    none_type_0 = trie_node_0.delete(bytes_0)
    none_type_1 = module_0.print_words(trie_node_0, str_0)
    trie_node_1 = module_0.TrieNode()
    float_0 = 1212.71147
    trie_node_0.find(float_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    trie_node_0 = module_0.TrieNode()
    trie_node_0.delete(trie_node_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "tkcv[uy' 7\rs,NJmmu"
    trie_node_0 = module_0.TrieNode()
    bool_0 = trie_node_0.find(str_0)
    assert bool_0 is False
    str_1 = "I(McZ,@\r^skV"
    trie_node_1 = module_0.TrieNode()
    none_type_0 = trie_node_1.insert(str_1)
    assert len(trie_node_1.nodes) == 1
    str_2 = ""
    trie_node_2 = module_0.TrieNode()
    bool_1 = trie_node_2.find(str_0)
    trie_node_3 = module_0.TrieNode()
    trie_node_4 = module_0.TrieNode()
    none_type_1 = trie_node_4.delete(str_2)
    list_0 = [str_0, str_0]
    none_type_2 = trie_node_3.insert_many(list_0)
    assert len(trie_node_3.nodes) == 1
    list_0.find(str_2)


def test_case_10():
    str_0 = ",h"
    str_1 = 'zve3 n"%N*fx\x0cx{Vr;A_'
    list_0 = [str_0, str_1]
    trie_node_0 = module_0.TrieNode()
    none_type_0 = trie_node_0.insert_many(list_0)
    assert len(trie_node_0.nodes) == 2
    none_type_1 = trie_node_0.insert_many(list_0)
    trie_node_1 = module_0.TrieNode()
    str_2 = "PK$\t]k3i:]U4g8u\x0c?KKN"
    none_type_2 = module_0.print_words(trie_node_1, str_2)
    trie_node_2 = module_0.TrieNode()
    str_3 = "&YSqI9@C#CT[(EpRPw"
    none_type_3 = trie_node_0.delete(str_3)
    bool_0 = trie_node_2.find(list_0)
    assert bool_0 is False
    trie_node_3 = module_0.TrieNode()
    bool_1 = trie_node_3.find(list_0)
    bool_2 = trie_node_0.find(str_1)
    assert bool_2 is True
    trie_node_4 = module_0.TrieNode()
    none_type_4 = trie_node_2.delete(str_1)
    trie_node_5 = module_0.TrieNode()
    str_4 = ">CQx5Lf4o\\*(0h!r1"
    list_1 = [str_4, str_3]
    none_type_5 = trie_node_0.insert_many(list_1)
    assert len(trie_node_0.nodes) == 4


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"0I[\xdc\xc7\x0c\xdd\xa7TE\x1f\xcc^o\xe3f\xbep\xe5\xf4"
    str_0 = ",h"
    trie_node_0 = module_0.TrieNode()
    none_type_0 = trie_node_0.delete(str_0)
    none_type_1 = trie_node_0.insert_many(str_0)
    assert len(trie_node_0.nodes) == 2
    trie_node_1 = module_0.TrieNode()
    none_type_2 = trie_node_1.insert(str_0)
    assert len(trie_node_1.nodes) == 1
    str_1 = "PK$\t]k3i:]U4g8u\x0c?KKN"
    none_type_3 = module_0.print_words(trie_node_1, str_1)
    list_0 = [bytes_0, bytes_0, bytes_0]
    trie_node_2 = module_0.TrieNode()
    str_2 = "&YSqI9@C#CT[(EpRPw"
    none_type_4 = trie_node_0.delete(str_2)
    trie_node_3 = module_0.TrieNode()
    bool_0 = trie_node_3.find(list_0)
    assert bool_0 is False
    none_type_5 = None
    trie_node_4 = module_0.TrieNode()
    none_type_6 = trie_node_0.delete(str_0)
    trie_node_5 = module_0.TrieNode()
    trie_node_5.insert_many(none_type_5)
