# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import radix_tree as module_0


def test_case_0():
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    str_0 = "X|"
    none_type_0 = radix_node_0.insert(str_0)
    assert len(radix_node_0.nodes) == 1
    bool_0 = radix_node_0.delete(str_0)
    assert bool_0 is True
    assert radix_node_0.nodes == {}


@pytest.mark.xfail(strict=True)
def test_case_1():
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    str_0 = "MzW"
    list_0 = [str_0, str_0, str_0]
    radix_node_0.insert_many(list_0)


def test_case_2():
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    list_0 = []
    none_type_0 = radix_node_0.insert_many(list_0)
    str_0 = "Da"
    bool_0 = radix_node_0.delete(str_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "KO"
    str_1 = "aS}XDl}pvSm:vCA,"
    radix_node_0 = module_0.RadixNode(str_1)
    bool_0 = True
    none_type_0 = radix_node_0.insert(str_1)
    assert radix_node_0.is_leaf is True
    float_0 = 4484.542
    str_2 = ">"
    bool_1 = radix_node_0.find(str_2)
    assert bool_1 is False
    tuple_0 = (bool_0, float_0)
    bool_2 = radix_node_0.delete(tuple_0)
    assert bool_2 is False
    tuple_1 = radix_node_0.match(str_0)
    radix_node_0.print_tree(radix_node_0)


def test_case_4():
    str_0 = "U}`"
    radix_node_0 = module_0.RadixNode(str_0)
    bool_0 = False
    radix_node_1 = module_0.RadixNode(is_leaf=bool_0)
    assert radix_node_1.prefix == ""
    tuple_0 = radix_node_1.match(str_0)
    radix_node_2 = module_0.RadixNode()
    assert radix_node_2.prefix == ""
    bool_1 = radix_node_2.delete(str_0)
    assert bool_1 is False
    none_type_0 = radix_node_2.insert(str_0)
    assert len(radix_node_2.nodes) == 1
    bool_2 = radix_node_2.find(str_0)
    assert bool_2 is True


def test_case_5():
    str_0 = "N[AH"
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    tuple_0 = radix_node_0.match(str_0)
    str_1 = "\x0bJGHgd"
    bool_0 = radix_node_0.find(str_1)
    assert bool_0 is False
    none_type_0 = radix_node_0.insert(str_0)
    assert len(radix_node_0.nodes) == 1
    bool_1 = radix_node_0.delete(str_0)
    assert bool_1 is True
    assert radix_node_0.nodes == {}


def test_case_6():
    str_0 = "\x0cPJ\\OP.p"
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    bool_0 = radix_node_0.delete(str_0)
    assert bool_0 is False


def test_case_7():
    str_0 = "\t1pUK"
    radix_node_0 = module_0.RadixNode(str_0)
    none_type_0 = radix_node_0.print_tree()


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "f*\rR:/<"
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    str_1 = "foY@P15\\I9%X?Aac"
    list_0 = [str_0, str_1]
    none_type_0 = radix_node_0.insert_many(list_0)
    assert len(radix_node_0.nodes) == 1
    bool_0 = radix_node_0.find(str_0)
    assert bool_0 is True
    bool_1 = radix_node_0.delete(str_0)
    assert bool_1 is True
    radix_node_1 = module_0.RadixNode()
    assert radix_node_1.prefix == ""
    none_type_1 = radix_node_1.print_tree()
    bool_2 = radix_node_0.find(str_0)
    assert bool_2 is False
    bool_3 = True
    radix_node_2 = module_0.RadixNode(str_0, bool_2)
    assert radix_node_2.is_leaf is False
    radix_node_1.insert(bool_3)


def test_case_9():
    str_0 = "\nH:SHL^HEuK\\PM;"
    radix_node_0 = module_0.RadixNode(str_0)


def test_case_10():
    bytes_0 = b"iM\xc4\x99\x7f\xfb"
    str_0 = "KO"
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    none_type_0 = radix_node_0.insert(bytes_0)
    assert len(radix_node_0.nodes) == 1
    radix_node_1 = module_0.RadixNode()
    assert radix_node_1.prefix == ""
    str_1 = "aS}XDl}pvSm:vCA,"
    radix_node_2 = module_0.RadixNode(str_1)
    bool_0 = True
    none_type_1 = radix_node_2.insert(str_1)
    assert radix_node_2.is_leaf is True
    float_0 = 4484.542
    str_2 = "y"
    bool_1 = radix_node_2.find(str_2)
    assert bool_1 is False
    tuple_0 = (bool_0, float_0)
    bool_2 = radix_node_2.delete(tuple_0)
    assert bool_2 is False
    tuple_1 = radix_node_2.match(str_0)
    bool_3 = radix_node_2.delete(str_0)
    radix_node_3 = module_0.RadixNode(str_0, bool_0)
    bool_4 = False
    radix_node_4 = module_0.RadixNode(is_leaf=bool_4)
    assert radix_node_4.prefix == ""
    str_3 = "Y*QWA~=g)"
    str_4 = 's2Ns\nI"*?{3]tX*-\x0be\\'
    list_0 = [str_3, str_0, str_4, str_1]
    none_type_2 = radix_node_2.insert_many(list_0)
    assert len(radix_node_2.nodes) == 4
    none_type_3 = radix_node_4.insert(str_1)
    assert len(radix_node_4.nodes) == 1


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "\\\x0b*jb|yi~pT-aBs4"
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    none_type_0 = radix_node_0.insert(str_0)
    assert len(radix_node_0.nodes) == 1
    str_1 = "(##)2NY5>NLw\t2J8"
    radix_node_1 = module_0.RadixNode()
    assert radix_node_1.prefix == ""
    tuple_0 = radix_node_1.match(str_1)
    str_2 = "D*"
    list_0 = [str_2]
    none_type_1 = radix_node_1.print_tree()
    none_type_2 = radix_node_0.print_tree()
    bool_0 = radix_node_0.delete(list_0)
    assert bool_0 is False
    none_type_3 = radix_node_1.insert_many(list_0)
    assert len(radix_node_1.nodes) == 1
    radix_node_0.print_tree(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "f*\rR:/<"
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    str_1 = "foY@P15\\I9%X?Aac"
    list_0 = [str_0, str_1]
    none_type_0 = radix_node_0.insert_many(list_0)
    assert len(radix_node_0.nodes) == 1
    bool_0 = radix_node_0.delete(str_0)
    assert bool_0 is True
    radix_node_1 = module_0.RadixNode()
    assert radix_node_1.prefix == ""
    none_type_1 = radix_node_1.print_tree()
    radix_node_2 = module_0.RadixNode(str_1)
    none_type_2 = radix_node_0.insert_many(str_0)
    assert len(radix_node_0.nodes) == 7
    bool_1 = radix_node_0.find(str_0)
    assert bool_1 is False
    bool_2 = True
    radix_node_3 = module_0.RadixNode(str_0, none_type_2)
    radix_node_1.insert(bool_2)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "f*\rR:/<"
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    str_1 = "foY@P15\\I9%X?Aac"
    none_type_0 = radix_node_0.insert_many(str_0)
    assert len(radix_node_0.nodes) == 7
    list_0 = [str_0, str_1]
    none_type_1 = radix_node_0.insert_many(list_0)
    bool_0 = radix_node_0.delete(str_0)
    assert bool_0 is True
    none_type_2 = radix_node_0.print_tree()
    radix_node_1 = module_0.RadixNode(str_1)
    radix_node_0.insert_many(str_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "f*\rR:/<"
    radix_node_0 = module_0.RadixNode()
    assert radix_node_0.prefix == ""
    str_1 = "foY@P15\\I9%X?Aac"
    list_0 = [str_1]
    none_type_0 = radix_node_0.insert_many(list_0)
    assert len(radix_node_0.nodes) == 1
    bool_0 = radix_node_0.delete(str_0)
    assert bool_0 is False
    none_type_1 = radix_node_0.print_tree()
    radix_node_1 = module_0.RadixNode(str_1)
    none_type_2 = radix_node_0.insert_many(str_0)
    assert len(radix_node_0.nodes) == 7
    bool_1 = radix_node_0.find(str_0)
    assert bool_1 is False
    bool_2 = True
    radix_node_2 = module_0.RadixNode(str_0, none_type_2)
    radix_node_2.insert(bool_2)
