# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import print_reverse as module_0


def test_case_0():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == "None"


def test_case_1():
    node_0 = module_0.Node()
    list_0 = [node_0]
    var_0 = module_0.make_linked_list(list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "print_reverse.Node"
    )
    assert (
        f"{type(var_0.data).__module__}.{type(var_0.data).__qualname__}"
        == "print_reverse.Node"
    )
    assert var_0.next is None
    node_1 = module_0.Node()
    var_1 = node_1.__repr__()
    assert var_1 == "None"


def test_case_2():
    list_0 = []
    with pytest.raises(Exception):
        module_0.make_linked_list(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    node_0 = module_0.Node()
    none_type_0 = module_0.print_reverse(node_0)
    node_1 = module_0.Node(set_0)
    module_0.make_linked_list(node_1)


def test_case_4():
    int_0 = -138
    none_type_0 = module_0.print_reverse(int_0)
    str_0 = '(&"h#XyoeGk~W?w|n1 H'
    list_0 = [str_0, str_0]
    var_0 = module_0.make_linked_list(list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "print_reverse.Node"
    )
    assert var_0.data == '(&"h#XyoeGk~W?w|n1 H'
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "print_reverse.Node"
    )
    var_1 = var_0.__repr__()
    assert var_1 == '(&"h#XyoeGk~W?w|n1 H->(&"h#XyoeGk~W?w|n1 H'
    none_type_1 = module_0.print_reverse(var_1)
    list_1 = [str_0, str_0]
    float_0 = 1976.09945
    var_2 = var_0.__repr__()
    assert var_2 == '(&"h#XyoeGk~W?w|n1 H->(&"h#XyoeGk~W?w|n1 H'
    var_3 = var_0.__repr__()
    assert var_3 == '(&"h#XyoeGk~W?w|n1 H->(&"h#XyoeGk~W?w|n1 H'
    var_4 = var_1.__repr__()
    assert var_4 == "'(&\"h#XyoeGk~W?w|n1 H->(&\"h#XyoeGk~W?w|n1 H'"
    list_2 = [list_0, float_0]
    var_5 = module_0.make_linked_list(list_2)
    assert var_5.data == ['(&"h#XyoeGk~W?w|n1 H', '(&"h#XyoeGk~W?w|n1 H']
    assert (
        f"{type(var_5.next).__module__}.{type(var_5.next).__qualname__}"
        == "print_reverse.Node"
    )
    var_6 = module_0.make_linked_list(list_1)
    assert (
        f"{type(var_6.next).__module__}.{type(var_6.next).__qualname__}"
        == "print_reverse.Node"
    )
    var_7 = var_6.__repr__()
    assert var_7 == '(&"h#XyoeGk~W?w|n1 H->(&"h#XyoeGk~W?w|n1 H'
    none_type_2 = module_0.print_reverse(var_6)
    node_0 = module_0.Node()
    none_type_3 = module_0.print_reverse(str_0)


def test_case_5():
    int_0 = 42
    node_0 = module_0.Node()
    list_0 = [int_0, int_0]
    node_1 = module_0.Node(list_0)
    var_0 = module_0.make_linked_list(list_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "print_reverse.Node"
    )
    assert var_0.data == 42
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "print_reverse.Node"
    )


def test_case_6():
    none_type_0 = None
    none_type_1 = module_0.print_reverse(none_type_0)
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == "None"
    var_1 = var_0.__repr__()
    assert var_1 == "'None'"
    none_type_2 = module_0.print_reverse(var_1)
