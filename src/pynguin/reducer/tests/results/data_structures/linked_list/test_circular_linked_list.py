# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import circular_linked_list as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    var_0 = circular_linked_list_0.__repr__()
    assert var_0 == ""
    none_type_0 = circular_linked_list_0.insert_tail(circular_linked_list_0)
    assert len(circular_linked_list_0) == 1
    circular_linked_list_0.__repr__()


def test_case_1():
    none_type_0 = None
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    var_0 = circular_linked_list_0.__repr__()
    assert var_0 == ""
    none_type_1 = circular_linked_list_0.insert_head(none_type_0)
    assert len(circular_linked_list_0) == 1
    var_1 = circular_linked_list_0.delete_front()
    assert len(circular_linked_list_0) == 0


def test_case_2():
    int_0 = -2679
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    none_type_0 = circular_linked_list_0.insert_tail(circular_linked_list_0)
    assert len(circular_linked_list_0) == 1
    circular_linked_list_1 = module_0.CircularLinkedList()
    with pytest.raises(IndexError):
        circular_linked_list_0.insert_nth(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    circular_linked_list_0.delete_tail()


def test_case_4():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    none_type_0 = circular_linked_list_0.insert_tail(circular_linked_list_0)
    assert len(circular_linked_list_0) == 1
    node_0 = module_0.Node(circular_linked_list_0)
    assert len(node_0.data) == 1
    tuple_0 = ()
    none_type_1 = circular_linked_list_0.insert_tail(tuple_0)
    assert len(circular_linked_list_0) == 2
    assert len(node_0.data) == 2
    var_0 = circular_linked_list_0.delete_nth()
    assert len(circular_linked_list_0) == 1
    assert len(node_0.data) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "circular_linked_list.CircularLinkedList"
    )
    assert len(var_0) == 1
    var_1 = var_0.__repr__()
    assert var_1 == "()"
    none_type_2 = circular_linked_list_0.insert_head(var_0)
    assert len(circular_linked_list_0) == 2
    assert len(node_0.data) == 2
    assert len(var_0) == 2
    var_2 = var_0.delete_tail()
    assert len(circular_linked_list_0) == 1
    assert len(node_0.data) == 1
    assert len(var_0) == 1
    iterator_0 = circular_linked_list_0.__iter__()
    bool_0 = var_0.is_empty()
    assert bool_0 is False
    var_3 = circular_linked_list_0.delete_front()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "circular_linked_list.CircularLinkedList"
    )
    assert len(var_3) == 1


def test_case_5():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    var_0 = circular_linked_list_0.__repr__()
    assert var_0 == ""
    none_type_0 = circular_linked_list_0.insert_head(var_0)
    assert len(circular_linked_list_0) == 1
    var_1 = circular_linked_list_0.__repr__()
    int_0 = var_1.__len__()


def test_case_6():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    int_0 = circular_linked_list_0.__len__()
    assert int_0 == 0
    int_1 = 1394
    with pytest.raises(IndexError):
        circular_linked_list_0.insert_nth(int_1, int_0)


def test_case_7():
    none_type_0 = None
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    iterator_0 = circular_linked_list_0.__iter__()
    var_0 = circular_linked_list_0.__repr__()
    assert var_0 == ""
    none_type_1 = circular_linked_list_0.insert_head(none_type_0)
    assert len(circular_linked_list_0) == 1
    var_1 = circular_linked_list_0.delete_front()
    assert len(circular_linked_list_0) == 0
    with pytest.raises(IndexError):
        circular_linked_list_0.delete_nth()


def test_case_8():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    circular_linked_list_1 = module_0.CircularLinkedList()
    assert len(circular_linked_list_1) == 0
    none_type_0 = circular_linked_list_0.insert_tail(circular_linked_list_1)
    assert len(circular_linked_list_0) == 1
    iterator_0 = circular_linked_list_1.__iter__()
    none_type_1 = circular_linked_list_0.insert_head(circular_linked_list_1)
    assert len(circular_linked_list_0) == 2
    iterator_1 = circular_linked_list_0.__iter__()
    var_0 = circular_linked_list_0.delete_front()
    assert len(circular_linked_list_0) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "circular_linked_list.CircularLinkedList"
    )
    assert len(var_0) == 0


def test_case_9():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    none_type_0 = circular_linked_list_0.insert_tail(circular_linked_list_0)
    assert len(circular_linked_list_0) == 1
    node_0 = module_0.Node(circular_linked_list_0)
    assert len(node_0.data) == 1
    tuple_0 = ()
    none_type_1 = circular_linked_list_0.insert_tail(tuple_0)
    assert len(circular_linked_list_0) == 2
    assert len(node_0.data) == 2
    none_type_2 = circular_linked_list_0.insert_tail(node_0)
    assert len(circular_linked_list_0) == 3
    assert len(node_0.data) == 3
    var_0 = circular_linked_list_0.delete_nth()
    assert len(circular_linked_list_0) == 2
    assert len(node_0.data) == 2
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "circular_linked_list.CircularLinkedList"
    )
    assert len(var_0) == 2


@pytest.mark.xfail(strict=True)
def test_case_10():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    none_type_0 = circular_linked_list_0.insert_tail(circular_linked_list_0)
    assert len(circular_linked_list_0) == 1
    var_0 = none_type_0.__repr__()
    none_type_1 = circular_linked_list_0.insert_head(var_0)
    assert len(circular_linked_list_0) == 2
    var_1 = circular_linked_list_0.delete_tail()
    assert len(circular_linked_list_0) == 1
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "circular_linked_list.CircularLinkedList"
    )
    assert len(var_1) == 1
    var_0.delete_front()


@pytest.mark.xfail(strict=True)
def test_case_11():
    circular_linked_list_0 = module_0.CircularLinkedList()
    assert len(circular_linked_list_0) == 0
    none_type_0 = circular_linked_list_0.insert_tail(circular_linked_list_0)
    assert len(circular_linked_list_0) == 1
    node_0 = module_0.Node(circular_linked_list_0)
    assert len(node_0.data) == 1
    node_1 = module_0.Node(node_0)
    tuple_0 = ()
    none_type_1 = circular_linked_list_0.insert_tail(tuple_0)
    assert len(circular_linked_list_0) == 2
    assert len(node_0.data) == 2
    none_type_2 = circular_linked_list_0.insert_tail(node_0)
    assert len(circular_linked_list_0) == 3
    assert len(node_0.data) == 3
    var_0 = circular_linked_list_0.delete_nth()
    assert len(circular_linked_list_0) == 2
    assert len(node_0.data) == 2
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "circular_linked_list.CircularLinkedList"
    )
    assert len(var_0) == 2
    none_type_3 = circular_linked_list_0.insert_head(tuple_0)
    assert len(circular_linked_list_0) == 3
    assert len(node_0.data) == 3
    assert len(var_0) == 3
    var_1 = var_0.delete_tail()
    assert len(circular_linked_list_0) == 2
    assert len(node_0.data) == 2
    assert len(var_0) == 2
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "circular_linked_list.Node"
    )
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "circular_linked_list.CircularLinkedList"
    )
    assert len(var_1.data) == 2
    assert var_1.next is None
    var_1.delete_front()
