# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import skip_list as module_0

def test_case_2():
    bool_0 = False

def test_case_4():
    bool_0 = True

@pytest.mark.xfail(strict=True)
def test_case_5():
    node_0.delete(str_2)

@pytest.mark.xfail(strict=True)
def test_case_7():
    var_3 = var_2.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_8():
    skip_list_0 = module_0.SkipList()
    assert f'{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}' == 'skip_list.SkipList'
    assert f'{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}' == 'skip_list.Node'
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.insert(skip_list_0, skip_list_0)
    skip_list_0.insert(int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    set_0 = set()
    skip_list_0 = module_0.SkipList()
    assert f'{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}' == 'skip_list.SkipList'
    assert f'{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}' == 'skip_list.Node'
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    assert int_0 == 1
    var_0 = skip_list_0.insert(int_0, set_0)
    int_1 = 1735
    var_1 = skip_list_0.insert(int_1, var_0)
    var_3 = skip_list_2.delete(var_0)

def test_case_12():
    node_0 = module_0.Node()
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'skip_list.Node'
    assert node_0.key == 'root'
    assert node_0.value is None
    assert node_0.forward == []
    assert f'{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}' == 'builtins.property'
    skip_list_0 = module_0.SkipList()
    assert f'{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}' == 'skip_list.SkipList'
    assert f'{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}' == 'skip_list.Node'
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16

@pytest.mark.xfail(strict=True)
def test_case_14():
    var_1.insert(var_2, bytes_1)

@pytest.mark.xfail(strict=True)
def test_case_15():
    skip_list_0 = module_0.SkipList()
    assert f'{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}' == 'skip_list.SkipList'
    assert f'{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}' == 'skip_list.Node'
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    skip_list_2 = module_0.SkipList()
    assert skip_list_2.level == 0
    assert skip_list_2.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_2.max_level == 16
    var_1 = skip_list_0.__iter__()

def test_case_16():
    node_0 = module_0.Node()
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'skip_list.Node'
    assert node_0.key == 'root'
    assert node_0.value is None
    assert node_0.forward == []
    assert f'{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}' == 'builtins.property'
    skip_list_0 = module_0.SkipList()
    assert f'{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}' == 'skip_list.SkipList'
    assert f'{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}' == 'skip_list.Node'
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    str_0 = skip_list_0.__str__()
    assert str_0 == 'SkipList(level=0)'
    int_1 = 1761
    var_0 = skip_list_0.insert(int_1, node_0)
    str_1 = skip_list_0.__str__()
    var_1 = skip_list_0.find(int_1)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'skip_list.Node'
    assert var_1.key == 'root'
    assert var_1.value is None
    assert var_1.forward == []
    assert skip_list_2.max_level == 16
    int_2 = skip_list_0.random_level()
    assert int_2 == 2
    var_3 = skip_list_1.find(var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    node_0 = module_0.Node()
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'skip_list.Node'
    assert node_0.key == 'root'
    assert node_0.value is None
    assert node_0.forward == []
    assert f'{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}' == 'builtins.property'
    set_0 = set()
    skip_list_0 = module_0.SkipList(set_0)
    assert f'{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}' == 'skip_list.SkipList'
    assert f'{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}' == 'skip_list.Node'
    assert skip_list_0.level == 0
    assert skip_list_0.p == {*()}
    assert skip_list_0.max_level == 16
    var_0 = skip_list_0.delete(set_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0, node_0)
    str_0 = node_1.__repr__()
    assert str_0 == 'Node(None: Node(root: None))'
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_0 = skip_list_1.random_level()
    var_1 = skip_list_1.find(node_1)
    var_2 = skip_list_1.insert(int_0, var_1)
    skip_list_2 = module_0.SkipList(node_1, int_0)
    assert skip_list_2.level == 0
    str_1 = node_1.__repr__()
    assert str_1 == 'Node(None: Node(root: None))'
    str_2 = skip_list_1.__str__()
    skip_list_3 = module_0.SkipList()
    assert skip_list_3.level == 0
    assert skip_list_3.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_3.max_level == 16
    int_1 = -4827
    var_3 = skip_list_1.insert(int_1, node_0)
    var_4 = module_0.Node(value=var_3)
    assert var_4.key == 'root'
    str_3 = skip_list_1.__str__()
    var_5 = skip_list_1.delete(int_1)
    skip_list_4 = module_0.SkipList()
    assert skip_list_4.level == 0
    assert skip_list_4.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_4.max_level == 16
    skip_list_2.random_level()