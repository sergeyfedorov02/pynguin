# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import deque_doubly as module_0


def test_case_0():
    linked_deque_0 = module_0.LinkedDeque()
    assert (
        f"{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(linked_deque_0) == 0
    with pytest.raises(Exception):
        linked_deque_0.first()


@pytest.mark.xfail(strict=True)
def test_case_1():
    linked_deque_0 = module_0.LinkedDeque()
    assert (
        f"{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(linked_deque_0) == 0
    var_0 = linked_deque_0.is_empty()
    assert var_0 is True
    var_1 = linked_deque_0.add_first(linked_deque_0)
    assert len(linked_deque_0) == 1
    assert len(var_1) == 1
    var_2 = linked_deque_0.add_last(linked_deque_0)
    assert len(linked_deque_0) == 2
    assert len(var_1) == 2
    assert len(var_2) == 2
    var_3 = linked_deque_0.remove_last()
    assert len(linked_deque_0) == 1
    assert len(var_1) == 1
    assert len(var_2) == 1
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(var_3) == 1
    var_4 = var_2.add_first(linked_deque_0)
    assert len(linked_deque_0) == 2
    assert len(var_1) == 2
    assert len(var_2) == 2
    assert len(var_3) == 2
    assert len(var_4) == 2
    var_5 = var_2.add_last(linked_deque_0)
    assert len(linked_deque_0) == 3
    assert len(var_1) == 3
    assert len(var_2) == 3
    assert len(var_3) == 3
    assert len(var_4) == 3
    assert len(var_5) == 3
    linked_deque_1 = module_0.LinkedDeque()
    assert len(linked_deque_1) == 0
    var_6 = var_1.first()
    assert (
        f"{type(var_6).__module__}.{type(var_6).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(var_6) == 3
    var_7 = var_3.remove_last()
    assert len(linked_deque_0) == 2
    assert len(var_1) == 2
    assert len(var_2) == 2
    assert len(var_3) == 2
    assert len(var_4) == 2
    assert len(var_5) == 2
    assert len(var_6) == 2
    assert len(var_7) == 2
    var_8 = var_7.is_empty()
    assert var_8 is False
    var_9 = var_3.__len__()
    assert var_9 == 2
    var_10 = linked_deque_0.last()
    assert (
        f"{type(var_10).__module__}.{type(var_10).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(var_10) == 2
    var_9.remove_last()


def test_case_2():
    linked_deque_0 = module_0.LinkedDeque()
    assert (
        f"{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(linked_deque_0) == 0
    with pytest.raises(Exception):
        linked_deque_0.last()


def test_case_3():
    linked_deque_0 = module_0.LinkedDeque()
    assert (
        f"{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(linked_deque_0) == 0
    var_0 = linked_deque_0.add_first(linked_deque_0)
    assert len(linked_deque_0) == 1
    assert len(var_0) == 1
    linked_deque_1 = module_0.LinkedDeque()
    assert len(linked_deque_1) == 0
    var_1 = var_0.last()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(var_1) == 1
    var_2 = var_1.remove_first()
    assert len(linked_deque_0) == 0
    assert len(var_0) == 0
    assert len(var_1) == 0
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(var_2) == 0
    with pytest.raises(IndexError):
        var_0.remove_last()


def test_case_4():
    linked_deque_0 = module_0.LinkedDeque()
    assert (
        f"{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(linked_deque_0) == 0
    with pytest.raises(IndexError):
        linked_deque_0.remove_first()


def test_case_5():
    doubly_linked_base_0 = module_0._DoublyLinkedBase()
    assert (
        f"{type(doubly_linked_base_0).__module__}.{type(doubly_linked_base_0).__qualname__}"
        == "deque_doubly._DoublyLinkedBase"
    )
    assert len(doubly_linked_base_0) == 0


def test_case_6():
    doubly_linked_base_0 = module_0._DoublyLinkedBase()
    assert (
        f"{type(doubly_linked_base_0).__module__}.{type(doubly_linked_base_0).__qualname__}"
        == "deque_doubly._DoublyLinkedBase"
    )
    assert len(doubly_linked_base_0) == 0
    var_0 = doubly_linked_base_0.is_empty()
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_7():
    linked_deque_0 = module_0.LinkedDeque()
    assert (
        f"{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}"
        == "deque_doubly.LinkedDeque"
    )
    assert len(linked_deque_0) == 0
    var_0 = linked_deque_0.__len__()
    assert var_0 == 0
    var_1 = linked_deque_0.add_first(linked_deque_0)
    assert len(linked_deque_0) == 1
    assert len(var_1) == 1
    var_2 = linked_deque_0.add_last(var_1)
    assert len(linked_deque_0) == 2
    assert len(var_1) == 2
    assert len(var_2) == 2
    var_3 = linked_deque_0.add_last(var_0)
    assert len(linked_deque_0) == 3
    assert len(var_1) == 3
    assert len(var_2) == 3
    assert len(var_3) == 3
    var_0.remove_last()
