# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import doubly_linked_list_two as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -1650.4
    linked_list_iterator_0 = module_0.LinkedListIterator(float_0)
    linked_list_iterator_0.__next__()


def test_case_1():
    none_type_0 = None
    linked_list_iterator_0 = module_0.LinkedListIterator(none_type_0)
    var_0 = linked_list_iterator_0.__iter__()
    with pytest.raises(StopIteration):
        var_0.__next__()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    linked_list_1 = module_0.LinkedList()
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.next).__module__}.{type(node_0.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_0 = linked_list_1.__contains__(none_type_0)
    assert var_0 is False
    var_1 = node_0.get_next()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_1.data is False
    assert (
        f"{type(var_1.previous).__module__}.{type(var_1.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_1.next is None
    var_2 = linked_list_0.delete_value(var_0)
    assert node_0.next is None
    assert var_1.previous is None
    var_3 = linked_list_0.__str__()
    assert var_3 == "False"
    var_2.get_head_data()


@pytest.mark.xfail(strict=True)
def test_case_3():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.get_tail_data()
    linked_list_1 = module_0.LinkedList()
    var_1 = linked_list_1.__str__()
    assert var_1 == ""
    var_1.get_tail_data()


def test_case_4():
    int_0 = -1502
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__iter__()
    none_type_0 = linked_list_0.insert(int_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_1 = linked_list_0.__contains__(int_0)
    assert var_1 is True
    var_2 = var_0.__iter__()
    linked_list_iterator_0 = module_0.LinkedListIterator(none_type_0)
    with pytest.raises(StopIteration):
        var_0.__next__()


def test_case_5():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    linked_list_1 = module_0.LinkedList()
    var_0 = node_0.get_next()
    var_1 = linked_list_1.__contains__(none_type_0)
    assert var_1 is False
    var_2 = linked_list_0.delete_value(var_1)
    assert linked_list_0.head is None
    assert linked_list_0.tail is None


def test_case_6():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.get_head_data()
    var_1 = linked_list_0.get_tail_data()


def test_case_7():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.get_tail_data()
    var_1 = linked_list_0.__iter__()
    none_type_0 = linked_list_0.insert(linked_list_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__contains__(bool_0)
    assert var_0 is False
    linked_list_0.insert_at_position(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    linked_list_0 = module_0.LinkedList()
    linked_list_0.delete_value(linked_list_0)


def test_case_10():
    linked_list_0 = module_0.LinkedList()


def test_case_11():
    bool_0 = False
    node_0 = module_0.Node(bool_0, next_node=bool_0)
    var_0 = node_0.get_next()


@pytest.mark.xfail(strict=True)
def test_case_12():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__iter__()
    linked_list_0.insert_after_node(linked_list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.is_empty()
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.previous).__module__}.{type(node_0.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_0 = linked_list_0.get_head_data()
    assert var_0 is True
    var_0.get_tail_data()


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.previous).__module__}.{type(node_0.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_0 = linked_list_0.get_tail_data()
    assert var_0 is True
    var_1 = linked_list_0.__contains__(bool_0)
    assert var_1 is True
    var_2 = var_0.__str__()
    assert var_2 == "True"
    var_3 = linked_list_0.__str__()
    assert var_3 == "True True"
    var_4 = var_2.__contains__(var_3)
    assert var_4 is False
    var_4.__next__()


def test_case_16():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    linked_list_1 = module_0.LinkedList()
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.next).__module__}.{type(node_0.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_0 = linked_list_1.__contains__(none_type_0)
    assert var_0 is False
    var_1 = node_0.get_next()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_1.data is False
    assert (
        f"{type(var_1.previous).__module__}.{type(var_1.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_1.next is None
    var_2 = linked_list_0.delete_value(var_0)
    assert node_0.next is None
    assert var_1.previous is None


@pytest.mark.xfail(strict=True)
def test_case_17():
    int_0 = -1502
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__iter__()
    none_type_0 = linked_list_0.insert(int_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_1 = linked_list_0.__contains__(var_0)
    assert var_1 is False
    var_2 = linked_list_0.__str__()
    assert var_2 == "-1502"
    var_2.get_head_data()


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.previous).__module__}.{type(node_0.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    linked_list_0.delete_value(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__str__()
    assert var_0 == ""
    none_type_0 = linked_list_0.set_head(var_0)
    assert linked_list_0.head == ""
    assert linked_list_0.tail == ""
    var_1 = linked_list_0.__contains__(bool_0)
    assert var_1 is False
    linked_list_0.set_tail(var_1)


@pytest.mark.xfail(strict=True)
def test_case_20():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__str__()
    assert var_0 == ""
    none_type_0 = linked_list_0.set_head(var_0)
    assert linked_list_0.head == ""
    assert linked_list_0.tail == ""
    var_1 = linked_list_0.__contains__(var_0)
    assert var_1 is False
    linked_list_0.set_head(var_1)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.next).__module__}.{type(node_0.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_0 = linked_list_0.__contains__(none_type_0)
    assert var_0 is False
    var_1 = node_0.get_next()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_1.data is False
    assert (
        f"{type(var_1.previous).__module__}.{type(var_1.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_1.next is None
    var_0.get_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    var_0 = module_0.Node(linked_list_0, linked_list_0)
    none_type_0 = linked_list_0.set_head(var_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_1 = linked_list_0.__contains__(bool_0)
    assert var_1 is False
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(linked_list_0.next).__module__}.{type(linked_list_0.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(var_0.previous).__module__}.{type(var_0.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_2 = linked_list_0.get_head_data()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "doubly_linked_list_two.LinkedList"
    )
    assert (
        f"{type(var_2.head).__module__}.{type(var_2.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(var_2.tail).__module__}.{type(var_2.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(var_2.next).__module__}.{type(var_2.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_1.delete_value(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = False
    none_type_0 = None
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_1 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    none_type_2 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.next).__module__}.{type(node_0.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    linked_list_1 = module_0.LinkedList()
    none_type_3 = linked_list_1.insert_after_node(node_0, node_0)
    var_0 = linked_list_0.get_head_data()
    assert var_0 is False
    var_0.delete_value(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.previous).__module__}.{type(node_0.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    none_type_2 = linked_list_0.remove_node_pointers(node_0)
    assert node_0.previous is None
    linked_list_0.delete_value(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    linked_list_1 = module_0.LinkedList()
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.next).__module__}.{type(node_0.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_0 = linked_list_1.__contains__(none_type_0)
    assert var_0 is False
    var_1 = node_0.get_next()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_1.data is False
    assert (
        f"{type(var_1.previous).__module__}.{type(var_1.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_1.next is None
    str_0 = var_1.__str__()
    assert str_0 == "False"
    var_2 = linked_list_0.delete_value(var_0)
    assert node_0.next is None
    assert var_1.previous is None
    var_2.get_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    int_0 = -505
    none_type_0 = linked_list_0.insert(int_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_0 = node_0.get_next()
    none_type_1 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(node_0.previous).__module__}.{type(node_0.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    linked_list_1 = module_0.LinkedList()
    none_type_2 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert (
        f"{type(node_0.next).__module__}.{type(node_0.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    var_1 = linked_list_0.__iter__()
    var_2 = linked_list_1.__contains__(none_type_1)
    assert var_2 is False
    var_3 = node_0.get_next()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_3.data is False
    assert (
        f"{type(var_3.previous).__module__}.{type(var_3.previous).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert var_3.next is None
    var_4 = linked_list_0.delete_value(var_2)
    assert node_0.previous is None
    assert node_0.next is None
    var_4.get_node(var_2)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    assert (
        f"{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    none_type_1 = linked_list_0.insert(none_type_0)
    assert (
        f"{type(node_0.next).__module__}.{type(node_0.next).__qualname__}"
        == "doubly_linked_list_two.Node"
    )
    linked_list_0.set_tail(none_type_0)
