# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import deque_doubly as module_0

def test_case_0():
    linked_deque_0 = module_0.LinkedDeque()
    assert f'{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(linked_deque_0) == 0
    with pytest.raises(Exception):
        linked_deque_0.first()

@pytest.mark.xfail(strict=True)
def test_case_1():
    linked_deque_0 = module_0.LinkedDeque()
    assert f'{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(linked_deque_0) == 0
    var_1 = linked_deque_0.add_first(linked_deque_0)
    assert len(linked_deque_0) == 1
    assert len(var_1) == 1
    var_2 = linked_deque_0.add_last(linked_deque_0)
    assert len(linked_deque_0) == 2
    assert len(var_1) == 2
    assert len(var_2) == 2
    var_3 = linked_deque_0.remove_last()
    assert len(linked_deque_0) == 1
    assert len(var_1) == 1
    assert len(var_2) == 1
    assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(var_3) == 1
    var_6 = var_1.first()
    assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(var_6) == 3

def test_case_2():
    linked_deque_0 = module_0.LinkedDeque()
    assert f'{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(linked_deque_0) == 0
    with pytest.raises(Exception):
        linked_deque_0.last()

def test_case_3():
    linked_deque_0 = module_0.LinkedDeque()
    assert f'{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(linked_deque_0) == 0
    var_0 = linked_deque_0.add_first(linked_deque_0)
    assert len(linked_deque_0) == 1
    assert len(var_0) == 1
    var_1 = var_0.last()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(var_1) == 1
    var_2 = var_1.remove_first()
    assert len(linked_deque_0) == 0
    assert len(var_0) == 0
    assert len(var_1) == 0
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(var_2) == 0
    with pytest.raises(IndexError):
        var_0.remove_last()

def test_case_4():
    linked_deque_0 = module_0.LinkedDeque()
    assert f'{type(linked_deque_0).__module__}.{type(linked_deque_0).__qualname__}' == 'deque_doubly.LinkedDeque'
    assert len(linked_deque_0) == 0
    with pytest.raises(IndexError):
        linked_deque_0.remove_first()