# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import skip_list as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    str_0 = skip_list_0.__str__()
    assert str_0 == "SkipList(level=0)"
    var_0 = skip_list_0.insert(str_0, skip_list_0)
    assert skip_list_0.level == 1
    node_0 = module_0.Node()
    assert node_0.key == "root"
    str_1 = skip_list_0.__str__()
    assert (
        str_1
        == "SkipList(level=1)\n[root]---------------* \n                     | \n[SkipList(level=0)]--SkipList(level=0)\n                     | \nNone                 * "
    )
    var_0.delete(str_1)


def test_case_1():
    str_0 = "pb2R31H"
    int_0 = 576
    skip_list_0 = module_0.SkipList(int_0)
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == 576
    assert skip_list_0.max_level == 16
    var_0 = skip_list_0.insert(str_0, str_0)
    assert skip_list_0.level == 16


def test_case_2():
    bool_0 = False
    skip_list_0 = module_0.SkipList(bool_0)
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p is False
    assert skip_list_0.max_level == 16
    var_0 = skip_list_0.delete(skip_list_0)


def test_case_3():
    bool_0 = True
    skip_list_0 = module_0.SkipList(bool_0)
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p is True
    assert skip_list_0.max_level == 16
    var_0 = skip_list_0.find(bool_0)


def test_case_4():
    bool_0 = True
    skip_list_0 = module_0.SkipList(bool_0)
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p is True
    assert skip_list_0.max_level == 16
    var_0 = skip_list_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_5():
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    var_0 = skip_list_0.__iter__()
    str_0 = skip_list_0.find(int_0)
    node_0 = module_0.Node()
    assert node_0.key == "root"
    assert (
        f"{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}"
        == "builtins.property"
    )
    str_1 = node_0.__repr__()
    assert str_1 == "Node(root: None)"
    var_1 = skip_list_0.insert(str_0, skip_list_0)
    assert skip_list_0.level == 1
    node_1 = module_0.Node()
    assert node_1.key == "root"
    str_2 = skip_list_0.__str__()
    assert (
        str_2
        == "SkipList(level=1)\n[root]--* \n        | \n[None]--None\n        | \nNone    * "
    )
    node_0.delete(str_2)


def test_case_6():
    dict_0 = {}
    bool_0 = False
    skip_list_0 = module_0.SkipList(max_level=bool_0)
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level is False
    var_0 = skip_list_0.insert(dict_0, dict_0)
    assert skip_list_0.level == 1


@pytest.mark.xfail(strict=True)
def test_case_7():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "skip_list.Node"
    assert node_0.key == "root"
    assert node_0.value is None
    assert node_0.forward == []
    assert (
        f"{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}"
        == "builtins.property"
    )
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    assert int_0 == 1
    var_0 = skip_list_0.__iter__()
    var_1 = var_0.__iter__()
    var_2 = var_0.__iter__()
    var_3 = var_2.__iter__()
    var_2.find(var_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.insert(skip_list_0, skip_list_0)
    skip_list_0.insert(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    set_0 = set()
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    assert int_0 == 2
    var_0 = skip_list_0.insert(int_0, set_0)
    str_0 = skip_list_0.__str__()
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_1 = 1735
    var_1 = skip_list_0.insert(int_1, var_0)
    var_2 = skip_list_0.__iter__()
    str_1 = skip_list_0.__str__()
    var_3 = skip_list_0.delete(int_1)
    skip_list_2 = module_0.SkipList()
    assert skip_list_2.level == 0
    assert skip_list_2.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_2.max_level == 16
    var_4 = skip_list_2.delete(var_0)
    var_5 = skip_list_2.delete(set_0)
    int_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_10():
    set_0 = set()
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    var_0 = skip_list_0.insert(int_0, set_0)
    str_0 = skip_list_0.__str__()
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_1 = 1735
    var_1 = skip_list_0.insert(int_1, var_0)
    var_2 = skip_list_0.__iter__()
    str_1 = skip_list_0.__str__()
    var_3 = skip_list_0.delete(int_1)
    skip_list_2 = module_0.SkipList()
    assert skip_list_2.level == 0
    assert skip_list_2.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_2.max_level == 16
    int_2 = skip_list_0.random_level()
    var_4 = skip_list_2.delete(var_0)
    node_0 = module_0.Node()
    assert node_0.key == "root"
    var_5 = skip_list_2.delete(set_0)
    var_3.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_11():
    set_0 = set()
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    assert int_0 == 1
    var_0 = skip_list_0.insert(int_0, set_0)
    str_0 = skip_list_0.__str__()
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_1 = 1735
    var_1 = skip_list_0.insert(int_1, var_0)
    var_2 = skip_list_0.delete(int_1)
    skip_list_2 = module_0.SkipList()
    assert skip_list_2.level == 0
    assert skip_list_2.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_2.max_level == 16
    var_3 = skip_list_2.delete(var_0)
    var_4 = skip_list_2.delete(set_0)
    int_1.__iter__()


def test_case_12():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "skip_list.Node"
    assert node_0.key == "root"
    assert node_0.value is None
    assert node_0.forward == []
    assert (
        f"{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}"
        == "builtins.property"
    )
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    skip_list_1 = module_0.SkipList()
    assert (
        f"{type(skip_list_1.head).__module__}.{type(skip_list_1.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_0 = 1761
    var_0 = skip_list_0.insert(int_0, node_0)
    str_0 = skip_list_0.__str__()
    var_1 = skip_list_0.delete(int_0)
    skip_list_2 = module_0.SkipList()
    assert skip_list_2.level == 0
    assert skip_list_2.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_2.max_level == 16
    var_2 = skip_list_1.find(var_0)
    var_3 = skip_list_2.delete(var_0)
    var_4 = skip_list_2.delete(skip_list_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "skip_list.Node"
    assert node_0.key == "root"
    assert node_0.value is None
    assert node_0.forward == []
    assert (
        f"{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}"
        == "builtins.property"
    )
    set_0 = set()
    none_type_0 = None
    node_1 = module_0.Node(none_type_0, node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "skip_list.Node"
    assert node_1.key is None
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "skip_list.Node"
    )
    assert node_1.forward == []
    str_0 = node_1.__repr__()
    assert str_0 == "Node(None: Node(root: None))"
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    var_0 = skip_list_0.delete(set_0)
    str_1 = node_1.__repr__()
    assert str_1 == "Node(None: Node(root: None))"
    str_2 = skip_list_0.__str__()
    assert str_2 == "SkipList(level=0)"
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_0 = 1761
    var_1 = skip_list_0.insert(int_0, node_0)
    assert skip_list_0.level == 1
    skip_list_2 = module_0.SkipList(var_1)
    assert skip_list_2.level == 0
    assert skip_list_2.max_level == 16
    int_1 = 1739
    var_2 = skip_list_0.delete(int_1)
    skip_list_3 = module_0.SkipList()
    assert skip_list_3.level == 0
    assert skip_list_3.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_3.max_level == 16
    var_3 = skip_list_1.__iter__()
    skip_list_0.find(skip_list_2)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"V\x98m\xbe\x00\xd0\xe2}VG\xc8\xd1"
    bytes_1 = b"^\xe3N{#"
    none_type_0 = None
    int_0 = 541
    skip_list_0 = module_0.SkipList(int_0)
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == 541
    assert skip_list_0.max_level == 16
    var_0 = skip_list_0.delete(none_type_0)
    str_0 = var_0.__str__()
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    var_1 = skip_list_1.insert(bytes_0, bytes_1)
    assert skip_list_1.level == 2
    var_2 = skip_list_1.insert(bytes_0, var_1)
    var_1.insert(var_2, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "skip_list.Node"
    assert node_0.key == "root"
    assert node_0.value is None
    assert node_0.forward == []
    assert (
        f"{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}"
        == "builtins.property"
    )
    node_1 = module_0.Node(value=node_0)
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "skip_list.Node"
    assert node_1.key == "root"
    assert (
        f"{type(node_1.value).__module__}.{type(node_1.value).__qualname__}"
        == "skip_list.Node"
    )
    assert node_1.forward == []
    str_0 = node_0.__repr__()
    assert str_0 == "Node(root: None)"
    none_type_0 = None
    node_2 = module_0.Node(none_type_0, node_0)
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    str_1 = skip_list_0.__str__()
    assert str_1 == "SkipList(level=0)"
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_1 = 1761
    var_0 = skip_list_0.insert(int_1, node_0)
    str_2 = skip_list_0.__str__()
    skip_list_2 = module_0.SkipList()
    assert skip_list_2.level == 0
    assert skip_list_2.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_2.max_level == 16
    int_2 = skip_list_0.random_level()
    int_3 = skip_list_0.random_level()
    skip_list_3 = module_0.SkipList(int_1)
    assert skip_list_3.level == 0
    assert skip_list_3.max_level == 16
    var_1 = skip_list_0.__iter__()
    var_2 = skip_list_3.find(int_3)
    var_3 = skip_list_0.insert(int_0, var_1)
    assert skip_list_0.level == 3
    skip_list_0.delete(node_2)


def test_case_16():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "skip_list.Node"
    assert node_0.key == "root"
    assert node_0.value is None
    assert node_0.forward == []
    assert (
        f"{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}"
        == "builtins.property"
    )
    set_0 = set()
    skip_list_0 = module_0.SkipList()
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_0.max_level == 16
    int_0 = skip_list_0.random_level()
    str_0 = skip_list_0.__str__()
    assert str_0 == "SkipList(level=0)"
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_1 = 1761
    var_0 = skip_list_0.insert(int_1, node_0)
    str_1 = skip_list_0.__str__()
    var_1 = skip_list_0.find(int_1)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "skip_list.Node"
    assert var_1.key == "root"
    assert var_1.value is None
    assert var_1.forward == []
    var_2 = skip_list_0.delete(int_1)
    skip_list_2 = module_0.SkipList()
    assert skip_list_2.level == 0
    assert skip_list_2.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_2.max_level == 16
    int_2 = skip_list_0.random_level()
    assert int_2 == 2
    var_3 = skip_list_1.find(var_0)
    var_4 = skip_list_2.delete(set_0)
    var_5 = skip_list_2.delete(skip_list_0)
    var_6 = skip_list_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_17():
    node_0 = module_0.Node()
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "skip_list.Node"
    assert node_0.key == "root"
    assert node_0.value is None
    assert node_0.forward == []
    assert (
        f"{type(module_0.Node.level).__module__}.{type(module_0.Node.level).__qualname__}"
        == "builtins.property"
    )
    set_0 = set()
    skip_list_0 = module_0.SkipList(set_0)
    assert (
        f"{type(skip_list_0).__module__}.{type(skip_list_0).__qualname__}"
        == "skip_list.SkipList"
    )
    assert (
        f"{type(skip_list_0.head).__module__}.{type(skip_list_0.head).__qualname__}"
        == "skip_list.Node"
    )
    assert skip_list_0.level == 0
    assert skip_list_0.p == {*()}
    assert skip_list_0.max_level == 16
    var_0 = skip_list_0.delete(set_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0, node_0)
    str_0 = node_1.__repr__()
    assert str_0 == "Node(None: Node(root: None))"
    skip_list_1 = module_0.SkipList()
    assert skip_list_1.level == 0
    assert skip_list_1.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_1.max_level == 16
    int_0 = skip_list_1.random_level()
    var_1 = skip_list_1.find(node_1)
    var_2 = skip_list_1.insert(int_0, var_1)
    skip_list_2 = module_0.SkipList(node_1, int_0)
    assert skip_list_2.level == 0
    str_1 = node_1.__repr__()
    assert str_1 == "Node(None: Node(root: None))"
    str_2 = skip_list_1.__str__()
    skip_list_3 = module_0.SkipList()
    assert skip_list_3.level == 0
    assert skip_list_3.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_3.max_level == 16
    int_1 = -4827
    var_3 = skip_list_1.insert(int_1, node_0)
    var_4 = module_0.Node(value=var_3)
    assert var_4.key == "root"
    str_3 = skip_list_1.__str__()
    var_5 = skip_list_1.delete(int_1)
    skip_list_4 = module_0.SkipList()
    assert skip_list_4.level == 0
    assert skip_list_4.p == pytest.approx(0.5, abs=0.01, rel=0.01)
    assert skip_list_4.max_level == 16
    int_2 = skip_list_1.random_level()
    var_6 = skip_list_4.delete(var_2)
    node_2 = module_0.Node()
    assert node_2.key == "root"
    skip_list_2.random_level()
