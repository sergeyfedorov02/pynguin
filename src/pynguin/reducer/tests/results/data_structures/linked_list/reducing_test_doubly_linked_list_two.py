# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import doubly_linked_list_two as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -1650.4
    linked_list_iterator_0 = module_0.LinkedListIterator(float_0)
    linked_list_iterator_0.__next__()

def test_case_4():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__iter__()
    with pytest.raises(StopIteration):
        var_0.__next__()

def test_case_5():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}' == 'doubly_linked_list_two.Node'
    linked_list_1 = module_0.LinkedList()
    var_1 = linked_list_1.__contains__(none_type_0)
    assert var_1 is False
    var_2 = linked_list_0.delete_value(var_1)
    assert linked_list_0.head is None
    assert linked_list_0.tail is None

def test_case_6():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.get_head_data()

def test_case_7():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.get_tail_data()

@pytest.mark.xfail(strict=True)
def test_case_12():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__iter__()
    linked_list_0.insert_after_node(linked_list_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}' == 'doubly_linked_list_two.Node'
    var_0 = linked_list_0.get_tail_data()
    assert var_0 is True
    var_1 = linked_list_0.__contains__(bool_0)
    assert var_1 is True
    var_4.__next__()

@pytest.mark.xfail(strict=True)
def test_case_17():
    int_0 = -1502
    linked_list_0 = module_0.LinkedList()
    none_type_0 = linked_list_0.insert(int_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}' == 'doubly_linked_list_two.Node'

@pytest.mark.xfail(strict=True)
def test_case_20():
    linked_list_0 = module_0.LinkedList()
    var_0 = linked_list_0.__str__()
    assert var_0 == ''
    none_type_0 = linked_list_0.set_head(var_0)
    assert linked_list_0.head == ''
    assert linked_list_0.tail == ''
    var_1 = linked_list_0.__contains__(var_0)
    assert var_1 is False
    linked_list_0.set_head(var_1)

@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    var_0 = module_0.Node(linked_list_0, linked_list_0)
    none_type_0 = linked_list_0.set_head(var_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}' == 'doubly_linked_list_two.Node'
    var_1 = linked_list_0.__contains__(bool_0)
    assert var_1 is False
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert f'{type(linked_list_0.next).__module__}.{type(linked_list_0.next).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(var_0.previous).__module__}.{type(var_0.previous).__qualname__}' == 'doubly_linked_list_two.Node'
    var_1.delete_value(none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_1 = linked_list_0.set_tail(node_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}' == 'doubly_linked_list_two.Node'
    none_type_2 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert f'{type(node_0.next).__module__}.{type(node_0.next).__qualname__}' == 'doubly_linked_list_two.Node'
    linked_list_1 = module_0.LinkedList()
    none_type_3 = linked_list_1.insert_after_node(node_0, node_0)
    var_0 = linked_list_0.get_head_data()
    assert var_0 is False
    var_0.delete_value(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}' == 'doubly_linked_list_two.Node'
    none_type_1 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert f'{type(node_0.previous).__module__}.{type(node_0.previous).__qualname__}' == 'doubly_linked_list_two.Node'
    linked_list_0.delete_value(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    int_0 = -505
    none_type_0 = linked_list_0.insert(int_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}' == 'doubly_linked_list_two.Node'
    none_type_1 = linked_list_0.set_tail(node_0)
    assert f'{type(node_0.previous).__module__}.{type(node_0.previous).__qualname__}' == 'doubly_linked_list_two.Node'
    linked_list_1 = module_0.LinkedList()
    none_type_2 = linked_list_0.insert_at_position(bool_0, bool_0)
    assert f'{type(node_0.next).__module__}.{type(node_0.next).__qualname__}' == 'doubly_linked_list_two.Node'
    var_2 = linked_list_1.__contains__(none_type_1)
    assert var_2 is False

@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = False
    linked_list_0 = module_0.LinkedList()
    node_0 = module_0.Node(bool_0)
    none_type_0 = linked_list_0.set_tail(node_0)
    assert f'{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}' == 'doubly_linked_list_two.Node'
    assert f'{type(linked_list_0.tail).__module__}.{type(linked_list_0.tail).__qualname__}' == 'doubly_linked_list_two.Node'
    none_type_1 = linked_list_0.insert(none_type_0)
    assert f'{type(node_0.next).__module__}.{type(node_0.next).__qualname__}' == 'doubly_linked_list_two.Node'
    linked_list_0.set_tail(none_type_0)