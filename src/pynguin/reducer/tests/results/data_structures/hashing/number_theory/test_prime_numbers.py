# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import prime_numbers as module_0


def test_case_0():
    bool_0 = True
    bool_1 = module_0.is_prime(bool_0)
    assert bool_1 is False


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "h\nf"
    module_0.next_prime(str_0)


def test_case_2():
    int_0 = 219
    str_0 = "0Pp="
    dict_0 = {str_0: str_0, str_0: int_0, str_0: str_0}
    var_0 = module_0.next_prime(int_0, **dict_0)
    assert var_0 == 223


def test_case_3():
    bool_0 = False
    str_0 = "Uj*cXZ\t"
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
    var_0 = module_0.next_prime(bool_0, bool_0, **dict_0)
    assert var_0 == 2


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -3462
    var_0 = module_0.next_prime(int_0, int_0)
    assert var_0 == 11985451
    module_0.next_prime(int_0)


def test_case_5():
    bool_0 = True
    var_0 = module_0.next_prime(bool_0)
    assert var_0 == 2
    var_1 = module_0.next_prime(bool_0)
    assert var_1 == 2
    bool_1 = module_0.is_prime(bool_0)
    assert bool_1 is False
    var_2 = module_0.next_prime(var_1)
    assert var_2 == 5
    bool_2 = module_0.is_prime(bool_0)
    assert bool_2 is False
    bool_3 = module_0.is_prime(bool_0)
    assert bool_3 is False
    var_3 = module_0.next_prime(bool_3)
    assert var_3 == 2
