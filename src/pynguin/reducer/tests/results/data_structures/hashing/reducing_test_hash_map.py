# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import hash_map as module_0
import typing as module_1
import dataclasses as module_2

def test_case_5():
    hash_map_0 = module_0.HashMap()
    assert f'{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}' == 'hash_map.HashMap'
    assert len(hash_map_0) == 0
    str_0 = hash_map_0.clear()

def test_case_7():
    hash_map_0 = module_0.HashMap()
    assert f'{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}' == 'hash_map.HashMap'
    assert len(hash_map_0) == 0
    str_0 = hash_map_0.__iter__()

def test_case_8():
    float_0 = 515.944
    with pytest.raises(AssertionError):
        module_0.HashMap(capacity_factor=float_0)

def test_case_9():
    none_type_0 = None
    hash_map_0 = module_0.HashMap()
    assert f'{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}' == 'hash_map.HashMap'
    assert len(hash_map_0) == 0
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    var_1 = hash_map_0.popitem()
    assert len(hash_map_0) == 0
    with pytest.raises(KeyError):
        hash_map_0.__getitem__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    hash_map_0 = module_0.HashMap()
    assert f'{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}' == 'hash_map.HashMap'
    assert len(hash_map_0) == 0
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    none_type_1 = hash_map_0.__setitem__(var_0, var_0)
    var_1.__delitem__(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    hash_map_0 = module_0.HashMap()
    assert f'{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}' == 'hash_map.HashMap'
    assert len(hash_map_0) == 0
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    var_2 = hash_map_0.popitem()
    assert len(hash_map_0) == 0
    hash_map_0.__delitem__(var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    bool_0 = True
    hash_map_0 = module_0.HashMap(bool_0)
    assert f'{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}' == 'hash_map.HashMap'
    assert len(hash_map_0) == 0
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    hash_map_0.__setitem__(hash_map_0, var_0)

def test_case_16():
    hash_map_0 = module_0.HashMap()
    assert f'{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}' == 'hash_map.HashMap'
    assert len(hash_map_0) == 0
    str_0 = hash_map_0.__repr__()
    assert str_0 == 'HashMap()'