# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import hash_map as module_0
import typing as module_1
import dataclasses as module_2


def test_case_0():
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0


def test_case_1():
    float_0 = -1213.087
    with pytest.raises(AssertionError):
        module_0.HashMap(capacity_factor=float_0)


def test_case_2():
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    str_0 = hash_map_0.__repr__()
    assert str_0 == "HashMap()"
    var_0 = hash_map_0.setdefault(str_0)
    assert len(hash_map_0) == 1


def test_case_3():
    none_type_0 = None
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    var_1 = hash_map_0.popitem()
    assert len(hash_map_0) == 0


def test_case_4():
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    none_type_0 = None
    with pytest.raises(KeyError):
        hash_map_0.__delitem__(none_type_0)


def test_case_5():
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    str_0 = hash_map_0.clear()
    var_0 = hash_map_0.setdefault(str_0)
    assert len(hash_map_0) == 1


def test_case_6():
    deleted_item_0 = module_0._DeletedItem()
    assert (
        f"{type(deleted_item_0).__module__}.{type(deleted_item_0).__qualname__}"
        == "hash_map._DeletedItem"
    )
    var_0 = deleted_item_0.__eq__(deleted_item_0)
    assert var_0 is True
    bool_0 = deleted_item_0.__bool__()
    var_1 = var_0.__eq__(bool_0)
    none_type_0 = None
    var_2 = deleted_item_0.__eq__(none_type_0)
    bool_1 = var_2.__bool__()


def test_case_7():
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    none_type_0 = None
    none_type_1 = hash_map_0.__setitem__(none_type_0, none_type_0)
    assert len(hash_map_0) == 1
    str_0 = hash_map_0.__iter__()
    var_0 = hash_map_0.setdefault(str_0)
    assert len(hash_map_0) == 2


def test_case_8():
    float_0 = 515.944
    with pytest.raises(AssertionError):
        module_0.HashMap(capacity_factor=float_0)


def test_case_9():
    none_type_0 = None
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    var_1 = hash_map_0.popitem()
    assert len(hash_map_0) == 0
    with pytest.raises(KeyError):
        hash_map_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    str_0 = hash_map_0.__repr__()
    assert str_0 == "HashMap()"
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    none_type_1 = hash_map_0.__setitem__(var_0, var_0)
    var_1 = none_type_0.__eq__(hash_map_0)
    var_1.__delitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = -2280
    hash_map_0 = module_0.HashMap(int_0)
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    var_0 = hash_map_0.values()
    assert len(var_0) == 0
    hash_map_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    var_1 = var_0.__hash__()
    var_2 = hash_map_0.popitem()
    assert len(hash_map_0) == 0
    hash_map_0.__delitem__(var_0)


def test_case_13():
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    none_type_0 = None
    none_type_1 = hash_map_0.__setitem__(none_type_0, none_type_0)
    assert len(hash_map_0) == 1
    str_0 = hash_map_0.__repr__()
    assert str_0 == "HashMap(None: None)"
    var_0 = hash_map_0.setdefault(str_0)
    assert len(hash_map_0) == 2


@pytest.mark.xfail(strict=True)
def test_case_14():
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    bool_0 = True
    hash_map_1 = module_0.HashMap(bool_0)
    assert (
        f"{type(hash_map_1).__module__}.{type(hash_map_1).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_1) == 0
    str_0 = hash_map_1.__repr__()
    assert str_0 == "HashMap()"
    var_0 = hash_map_1.setdefault(bool_0)
    assert len(hash_map_1) == 1
    var_0.__delattr__(hash_map_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    bool_0 = True
    hash_map_0 = module_0.HashMap(bool_0)
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    str_0 = hash_map_0.__repr__()
    assert str_0 == "HashMap()"
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    hash_map_0.__setitem__(hash_map_0, var_0)


def test_case_16():
    none_type_0 = None
    hash_map_0 = module_0.HashMap()
    assert (
        f"{type(hash_map_0).__module__}.{type(hash_map_0).__qualname__}"
        == "hash_map.HashMap"
    )
    assert len(hash_map_0) == 0
    str_0 = hash_map_0.__repr__()
    assert str_0 == "HashMap()"
    var_0 = hash_map_0.setdefault(none_type_0)
    assert len(hash_map_0) == 1
    var_1 = module_1.Generic()
    var_2 = module_2.dataclass()
    var_3 = str_0.__hash__()
    assert var_3 == -6570038262922735928
    var_4 = hash_map_0.__getitem__(none_type_0)
    with pytest.raises(KeyError):
        hash_map_0.__delitem__(var_2)
