# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bloom_filter as module_0
import builtins as module_1


def test_case_0():
    str_0 = "G3exm-x4d/TI~ET:$"
    bloom_0 = module_0.Bloom()
    assert bloom_0.bitarray == 0
    assert bloom_0.size == 8
    assert (
        f"{type(module_0.Bloom.bitstring).__module__}.{type(module_0.Bloom.bitstring).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Bloom.estimated_error_rate).__module__}.{type(module_0.Bloom.estimated_error_rate).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = bloom_0.add(str_0)
    assert bloom_0.bitarray == 18


def test_case_1():
    bloom_0 = module_0.Bloom()
    assert bloom_0.bitarray == 0
    assert bloom_0.size == 8
    assert (
        f"{type(module_0.Bloom.bitstring).__module__}.{type(module_0.Bloom.bitstring).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Bloom.estimated_error_rate).__module__}.{type(module_0.Bloom.estimated_error_rate).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "1"
    bool_0 = False
    bloom_0 = module_0.Bloom(bool_0)
    assert bloom_0.bitarray == 0
    assert (
        f"{type(module_0.Bloom.bitstring).__module__}.{type(module_0.Bloom.bitstring).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Bloom.estimated_error_rate).__module__}.{type(module_0.Bloom.estimated_error_rate).__qualname__}"
        == "builtins.property"
    )
    bloom_0.exists(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "w\x0b'<6/6[d@26_eRUMf)w"
    bloom_0 = module_0.Bloom()
    assert bloom_0.bitarray == 0
    assert bloom_0.size == 8
    assert (
        f"{type(module_0.Bloom.bitstring).__module__}.{type(module_0.Bloom.bitstring).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Bloom.estimated_error_rate).__module__}.{type(module_0.Bloom.estimated_error_rate).__qualname__}"
        == "builtins.property"
    )
    bloom_1 = module_0.Bloom()
    assert bloom_1.bitarray == 0
    assert bloom_1.size == 8
    bool_0 = bloom_1.__contains__(str_0)
    assert bool_0 is False
    object_0 = module_1.object()
    bloom_1.__contains__(bloom_1)


def test_case_4():
    bloom_0 = module_0.Bloom()
    assert bloom_0.bitarray == 0
    assert bloom_0.size == 8
    assert (
        f"{type(module_0.Bloom.bitstring).__module__}.{type(module_0.Bloom.bitstring).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Bloom.estimated_error_rate).__module__}.{type(module_0.Bloom.estimated_error_rate).__qualname__}"
        == "builtins.property"
    )
    str_0 = "HnePPWyN_ZR"
    none_type_0 = bloom_0.add(str_0)
    assert bloom_0.bitarray == 96
    str_1 = "5BK]E"
    bloom_1 = module_0.Bloom()
    assert bloom_1.bitarray == 0
    assert bloom_1.size == 8
    str_2 = bloom_1.format_hash(str_1)
    assert str_2 == "00000001"
