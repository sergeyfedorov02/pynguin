# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import double_ended_queue as module_0
import dataclasses as module_1

def test_case_5():
    deque_0 = module_0.Deque()
    assert f'{type(deque_0).__module__}.{type(deque_0).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_0) == 0
    with pytest.raises(AssertionError):
        deque_0.pop()

@pytest.mark.xfail(strict=True)
def test_case_7():
    deque_0 = module_0.Deque()
    assert f'{type(deque_0).__module__}.{type(deque_0).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_0) == 0
    bytes_0 = b'MR"\xf9(\xbb\xf2o\xca\xa3'
    none_type_0 = deque_0.appendleft(bytes_0)
    assert len(deque_0) == 1
    deque_0.popleft()

def test_case_14():
    deque_0 = module_0.Deque()
    assert f'{type(deque_0).__module__}.{type(deque_0).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_0) == 0
    none_type_0 = None
    deque_1 = module_0.Deque(none_type_0)
    assert len(deque_1) == 0
    deque_2 = module_0.Deque()
    assert len(deque_2) == 0
    none_type_1 = deque_2.append(deque_2)
    assert len(deque_2) == 1
    bool_0 = deque_0.__eq__(deque_2)
    assert bool_0 is False
    with pytest.raises(AssertionError):
        deque_1.popleft()

@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    deque_0 = module_0.Deque(none_type_0)
    assert f'{type(deque_0).__module__}.{type(deque_0).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_0) == 0
    none_type_1 = deque_0.appendleft(list_0)
    assert len(deque_0) == 1
    none_type_2 = deque_0.appendleft(list_0)
    assert len(deque_0) == 2
    var_0 = deque_0.pop()
    assert len(deque_0) == 1
    deque_0.pop()

def test_case_16():
    deque_0 = module_0.Deque()
    assert f'{type(deque_0).__module__}.{type(deque_0).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_0) == 0
    str_0 = deque_0.__repr__()
    assert str_0 == '[]'
    none_type_0 = deque_0.extend(str_0)
    assert len(deque_0) == 2

def test_case_17():
    deque_0 = module_0.Deque()
    assert f'{type(deque_0).__module__}.{type(deque_0).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_0) == 0
    none_type_0 = None
    none_type_1 = deque_0.appendleft(none_type_0)
    assert len(deque_0) == 1
    bool_0 = deque_0.__eq__(deque_0)
    assert bool_0 is True
    list_0 = [none_type_1, none_type_1, deque_0]
    tuple_0 = (bool_0, list_0, list_0)
    none_type_2 = deque_0.extendleft(tuple_0)
    assert len(deque_0) == 4
    var_2 = deque_0.popleft()
    assert len(deque_0) == 4

@pytest.mark.xfail(strict=True)
def test_case_18():
    deque_0 = module_0.Deque()
    assert f'{type(deque_0).__module__}.{type(deque_0).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_0) == 0
    deque_1 = module_0.Deque()
    assert len(deque_1) == 0
    none_type_0 = deque_1.append(deque_1)
    assert len(deque_1) == 1
    none_type_1 = deque_0.append(none_type_0)
    assert len(deque_0) == 1
    bool_0 = deque_0.__eq__(deque_1)
    assert bool_0 is False
    module_1.dataclass(deque_0, init=bool_0, eq=deque_1, unsafe_hash=deque_0)

@pytest.mark.xfail(strict=True)
def test_case_19():
    deque_0 = module_0.Deque()
    assert f'{type(deque_0).__module__}.{type(deque_0).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_0) == 0
    none_type_0 = None
    none_type_1 = deque_0.appendleft(none_type_0)
    assert len(deque_0) == 1
    str_0 = deque_0.__repr__()
    assert str_0 == '[None]'
    deque_1 = module_0.Deque(deque_0)
    assert f'{type(deque_1).__module__}.{type(deque_1).__qualname__}' == 'double_ended_queue.Deque'
    assert len(deque_1) == 1
    var_0.pop()