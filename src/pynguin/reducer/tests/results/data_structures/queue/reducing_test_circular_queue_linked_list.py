# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import circular_queue_linked_list as module_0

@pytest.mark.xfail(strict=True)
def test_case_2():
    circular_queue_linked_list_0 = module_0.CircularQueueLinkedList()
    circular_queue_linked_list_0.first()

@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    bool_0 = False
    circular_queue_linked_list_0 = module_0.CircularQueueLinkedList(bool_0)
    circular_queue_linked_list_0.enqueue(none_type_0)

def test_case_6():
    bool_0 = True
    circular_queue_linked_list_0 = module_0.CircularQueueLinkedList()
    none_type_0 = circular_queue_linked_list_0.enqueue(bool_0)
    none_type_1 = circular_queue_linked_list_0.enqueue(none_type_0)
    var_0 = circular_queue_linked_list_0.dequeue()
    assert var_0 is True

def test_case_7():
    circular_queue_linked_list_0 = module_0.CircularQueueLinkedList()
    none_type_0 = circular_queue_linked_list_0.enqueue(circular_queue_linked_list_0)
    var_0 = circular_queue_linked_list_0.first()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'circular_queue_linked_list.CircularQueueLinkedList'
    assert f'{type(var_0.front).__module__}.{type(var_0.front).__qualname__}' == 'circular_queue_linked_list.Node'
    assert f'{type(var_0.rear).__module__}.{type(var_0.rear).__qualname__}' == 'circular_queue_linked_list.Node'

def test_case_8():
    circular_queue_linked_list_0 = module_0.CircularQueueLinkedList()
    none_type_0 = circular_queue_linked_list_0.enqueue(circular_queue_linked_list_0)
    var_0 = circular_queue_linked_list_0.dequeue()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'circular_queue_linked_list.CircularQueueLinkedList'
    assert f'{type(var_0.front).__module__}.{type(var_0.front).__qualname__}' == 'circular_queue_linked_list.Node'
    assert f'{type(var_0.rear).__module__}.{type(var_0.rear).__qualname__}' == 'circular_queue_linked_list.Node'