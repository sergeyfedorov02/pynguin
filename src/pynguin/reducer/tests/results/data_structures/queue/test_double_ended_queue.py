# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import double_ended_queue as module_0
import dataclasses as module_1


def test_case_0():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    bool_0 = deque_0.__eq__(deque_0)
    assert bool_0 is True
    bool_1 = deque_0.is_empty()
    str_0 = deque_0.__repr__()
    assert str_0 == "[]"
    int_0 = -1735
    none_type_0 = deque_0.append(int_0)
    assert len(deque_0) == 1
    int_1 = deque_0.__len__()
    assert int_1 == 1
    var_0 = module_1.dataclass(eq=int_1, unsafe_hash=bool_0, frozen=str_0)
    bool_2 = var_0.__eq__(int_1)
    deque_1 = module_0.Deque(deque_0)
    assert (
        f"{type(deque_1).__module__}.{type(deque_1).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_1) == 1
    none_type_1 = deque_1.appendleft(deque_1)
    assert len(deque_1) == 2
    var_1 = module_1.dataclass(none_type_0, unsafe_hash=str_0)
    bool_3 = deque_0.is_empty()


def test_case_1():
    str_0 = '+.)"myy\rCNvai~&^z'
    deque_0 = module_0.Deque(str_0)
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 17
    var_0 = deque_0.pop()
    assert var_0 == "z"
    assert len(deque_0) == 16


def test_case_2():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    none_type_0 = deque_0.append(deque_0)
    assert len(deque_0) == 1


def test_case_3():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    str_0 = deque_0.__repr__()
    assert str_0 == "[]"
    none_type_0 = deque_0.extend(str_0)
    assert len(deque_0) == 2


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    deque_0 = module_0.Deque(none_type_0)
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    none_type_1 = deque_0.appendleft(list_0)
    assert len(deque_0) == 1
    none_type_2 = deque_0.appendleft(list_0)
    assert len(deque_0) == 2
    var_0 = deque_0.pop()
    assert len(deque_0) == 1
    deque_0.pop()


def test_case_5():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    bool_0 = deque_0.__eq__(deque_0)
    assert bool_0 is True
    with pytest.raises(AssertionError):
        deque_0.pop()


def test_case_6():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    with pytest.raises(AssertionError):
        deque_0.popleft()


@pytest.mark.xfail(strict=True)
def test_case_7():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    bytes_0 = b'MR"\xf9(\xbb\xf2o\xca\xa3'
    none_type_0 = deque_0.appendleft(bytes_0)
    assert len(deque_0) == 1
    deque_0.popleft()


def test_case_8():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    deque_1 = module_0.Deque()
    assert len(deque_1) == 0
    deque_2 = module_0.Deque()
    assert len(deque_2) == 0
    bool_0 = deque_2.__eq__(deque_1)
    assert bool_0 is True
    deque_3 = module_0.Deque()
    assert len(deque_3) == 0


@pytest.mark.xfail(strict=True)
def test_case_9():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    int_0 = deque_0.__len__()
    assert int_0 == 0
    str_0 = deque_0.__repr__()
    assert str_0 == "[]"
    none_type_0 = deque_0.appendleft(str_0)
    assert len(deque_0) == 1
    iterator_0 = deque_0.__iter__()
    assert (
        f"{type(iterator_0).__module__}.{type(iterator_0).__qualname__}"
        == "double_ended_queue.Deque._Iterator"
    )
    str_1 = deque_0.__repr__()
    assert str_1 == "['[]']"
    deque_0.pop()


def test_case_10():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    str_0 = deque_0.__repr__()
    assert str_0 == "[]"


def test_case_11():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    bool_0 = deque_0.is_empty()
    str_0 = deque_0.__repr__()
    assert str_0 == "[]"
    iterator_0 = deque_0.__iter__()
    assert (
        f"{type(iterator_0).__module__}.{type(iterator_0).__qualname__}"
        == "double_ended_queue.Deque._Iterator"
    )


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    deque_0 = module_0.Deque(none_type_0)
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    none_type_1 = deque_0.append(deque_0)
    assert len(deque_0) == 1
    none_type_2 = deque_0.append(none_type_0)
    assert len(deque_0) == 2
    deque_0.__repr__()


def test_case_13():
    str_0 = 'Jm{Tw"bnx'
    deque_0 = module_0.Deque(str_0)
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 9
    deque_1 = module_0.Deque()
    assert (
        f"{type(deque_1).__module__}.{type(deque_1).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_1) == 0
    deque_2 = module_0.Deque()
    assert len(deque_2) == 0
    bool_0 = deque_2.__eq__(str_0)
    deque_3 = module_0.Deque()
    assert len(deque_3) == 0


def test_case_14():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    none_type_0 = None
    deque_1 = module_0.Deque(none_type_0)
    assert len(deque_1) == 0
    deque_2 = module_0.Deque()
    assert len(deque_2) == 0
    none_type_1 = deque_2.append(deque_2)
    assert len(deque_2) == 1
    bool_0 = deque_0.__eq__(deque_2)
    assert bool_0 is False
    with pytest.raises(AssertionError):
        deque_1.popleft()


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    deque_0 = module_0.Deque(none_type_0)
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    none_type_1 = deque_0.appendleft(list_0)
    assert len(deque_0) == 1
    none_type_2 = deque_0.appendleft(list_0)
    assert len(deque_0) == 2
    bool_0 = deque_0.__eq__(deque_0)
    assert bool_0 is True
    var_0 = deque_0.pop()
    assert len(deque_0) == 1
    deque_0.pop()


def test_case_16():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    bool_0 = deque_0.is_empty()
    str_0 = deque_0.__repr__()
    assert str_0 == "[]"
    none_type_0 = deque_0.extend(str_0)
    assert len(deque_0) == 2
    none_type_1 = deque_0.appendleft(none_type_0)
    assert len(deque_0) == 3
    iterator_0 = deque_0.__iter__()
    assert (
        f"{type(iterator_0).__module__}.{type(iterator_0).__qualname__}"
        == "double_ended_queue.Deque._Iterator"
    )
    deque_1 = module_0.Deque()
    assert len(deque_1) == 0


def test_case_17():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    none_type_0 = None
    none_type_1 = deque_0.appendleft(none_type_0)
    assert len(deque_0) == 1
    bool_0 = deque_0.__eq__(deque_0)
    assert bool_0 is True
    list_0 = [none_type_1, none_type_1, deque_0]
    tuple_0 = (bool_0, list_0, list_0)
    none_type_2 = deque_0.extendleft(tuple_0)
    assert len(deque_0) == 4
    bool_1 = deque_0.is_empty()
    str_0 = deque_0.__repr__()
    assert (
        str_0
        == "[[None, None, [[...], [...], True, None]], [None, None, [[...], [...], True, None]], True, None]"
    )
    int_0 = -1735
    none_type_3 = deque_0.append(int_0)
    assert len(deque_0) == 5
    int_1 = deque_0.__len__()
    assert int_1 == 5
    var_0 = module_1.dataclass(eq=int_1, unsafe_hash=bool_0, frozen=str_0)
    bool_2 = var_0.__eq__(int_1)
    deque_1 = module_0.Deque(deque_0)
    assert (
        f"{type(deque_1).__module__}.{type(deque_1).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_1) == 5
    none_type_4 = deque_1.appendleft(deque_1)
    assert len(deque_1) == 6
    var_1 = module_1.dataclass(init=var_0, eq=deque_1)
    var_2 = deque_0.popleft()
    assert len(deque_0) == 4
    iterator_0 = var_2.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_18():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    deque_1 = module_0.Deque()
    assert len(deque_1) == 0
    none_type_0 = deque_1.append(deque_1)
    assert len(deque_1) == 1
    none_type_1 = deque_0.append(none_type_0)
    assert len(deque_0) == 1
    bool_0 = deque_0.__eq__(deque_1)
    assert bool_0 is False
    module_1.dataclass(deque_0, init=bool_0, eq=deque_1, unsafe_hash=deque_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    deque_0 = module_0.Deque()
    assert (
        f"{type(deque_0).__module__}.{type(deque_0).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_0) == 0
    none_type_0 = None
    none_type_1 = deque_0.appendleft(none_type_0)
    assert len(deque_0) == 1
    str_0 = deque_0.__repr__()
    assert str_0 == "[None]"
    deque_1 = module_0.Deque(deque_0)
    assert (
        f"{type(deque_1).__module__}.{type(deque_1).__qualname__}"
        == "double_ended_queue.Deque"
    )
    assert len(deque_1) == 1
    none_type_2 = deque_1.appendleft(deque_1)
    assert len(deque_1) == 2
    deque_2 = module_0.Deque()
    assert len(deque_2) == 0
    var_0 = deque_1.__iter__()
    iterator_0 = var_0.__iter__()
    var_1 = module_1.dataclass(match_args=var_0, slots=none_type_2)
    var_0.pop()
