# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import queue_by_two_stacks as module_0


def test_case_0():
    bytes_0 = b"\xf7"
    queue_by_two_stacks_0 = module_0.QueueByTwoStacks()
    assert (
        f"{type(queue_by_two_stacks_0).__module__}.{type(queue_by_two_stacks_0).__qualname__}"
        == "queue_by_two_stacks.QueueByTwoStacks"
    )
    assert len(queue_by_two_stacks_0) == 0
    str_0 = queue_by_two_stacks_0.__repr__()
    assert str_0 == "Queue(())"
    queue_by_two_stacks_1 = module_0.QueueByTwoStacks(bytes_0)


def test_case_1():
    queue_by_two_stacks_0 = module_0.QueueByTwoStacks()
    assert (
        f"{type(queue_by_two_stacks_0).__module__}.{type(queue_by_two_stacks_0).__qualname__}"
        == "queue_by_two_stacks.QueueByTwoStacks"
    )
    assert len(queue_by_two_stacks_0) == 0
    int_0 = queue_by_two_stacks_0.__len__()
    assert int_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "+[P8"
    queue_by_two_stacks_0 = module_0.QueueByTwoStacks(str_0)
    assert (
        f"{type(queue_by_two_stacks_0).__module__}.{type(queue_by_two_stacks_0).__qualname__}"
        == "queue_by_two_stacks.QueueByTwoStacks"
    )
    assert len(queue_by_two_stacks_0) == 4
    int_0 = queue_by_two_stacks_0.__len__()
    assert int_0 == 4
    set_0 = {queue_by_two_stacks_0, str_0}
    var_0 = queue_by_two_stacks_0.get()
    assert var_0 == "+"
    assert len(queue_by_two_stacks_0) == 3
    var_1 = queue_by_two_stacks_0.get()
    assert var_1 == "["
    assert len(queue_by_two_stacks_0) == 2
    str_1 = queue_by_two_stacks_0.__repr__()
    assert str_1 == "Queue(('P', '8'))"
    var_0.put(set_0)


def test_case_3():
    none_type_0 = None
    queue_by_two_stacks_0 = module_0.QueueByTwoStacks(none_type_0)
    assert (
        f"{type(queue_by_two_stacks_0).__module__}.{type(queue_by_two_stacks_0).__qualname__}"
        == "queue_by_two_stacks.QueueByTwoStacks"
    )
    assert len(queue_by_two_stacks_0) == 0
    with pytest.raises(IndexError):
        queue_by_two_stacks_0.get()


@pytest.mark.xfail(strict=True)
def test_case_4():
    dict_0 = {}
    queue_by_two_stacks_0 = module_0.QueueByTwoStacks()
    assert (
        f"{type(queue_by_two_stacks_0).__module__}.{type(queue_by_two_stacks_0).__qualname__}"
        == "queue_by_two_stacks.QueueByTwoStacks"
    )
    assert len(queue_by_two_stacks_0) == 0
    int_0 = queue_by_two_stacks_0.__len__()
    assert int_0 == 0
    queue_by_two_stacks_1 = module_0.QueueByTwoStacks()
    none_type_0 = queue_by_two_stacks_1.put(dict_0)
    float_0 = 890.4
    module_0.QueueByTwoStacks(float_0)
