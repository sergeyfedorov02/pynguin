# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import circular_queue as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    int_0 = 400
    circular_queue_0 = module_0.CircularQueue(int_0)
    assert (
        f"{type(circular_queue_0).__module__}.{type(circular_queue_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(circular_queue_0) == 0
    var_0 = circular_queue_0.first()
    assert var_0 is False
    var_1 = circular_queue_0.enqueue(bool_0)
    assert len(circular_queue_0) == 1
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(var_1) == 1
    int_1 = var_1.__len__()
    assert int_1 == 1
    circular_queue_1 = module_0.CircularQueue(bool_0)
    assert len(circular_queue_1) == 0
    int_2 = circular_queue_0.__len__()
    assert int_2 == 1
    circular_queue_2 = module_0.CircularQueue(bool_0)
    assert len(circular_queue_2) == 0
    var_2 = circular_queue_2.first()
    assert var_2 is False
    module_0.CircularQueue(circular_queue_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    int_0 = 3775
    circular_queue_0 = module_0.CircularQueue(int_0)
    assert (
        f"{type(circular_queue_0).__module__}.{type(circular_queue_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(circular_queue_0) == 0
    var_0 = circular_queue_0.enqueue(none_type_0)
    assert len(circular_queue_0) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(var_0) == 1
    var_1 = var_0.first()
    var_1.first()


def test_case_2():
    bool_0 = True
    none_type_0 = None
    circular_queue_0 = module_0.CircularQueue(bool_0)
    assert (
        f"{type(circular_queue_0).__module__}.{type(circular_queue_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(circular_queue_0) == 0
    var_0 = circular_queue_0.enqueue(none_type_0)
    assert len(circular_queue_0) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(var_0) == 1
    var_1 = var_0.first()
    with pytest.raises(Exception):
        var_0.enqueue(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    bool_0 = True
    bool_1 = True
    circular_queue_0 = module_0.CircularQueue(bool_1)
    assert (
        f"{type(circular_queue_0).__module__}.{type(circular_queue_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(circular_queue_0) == 0
    var_0 = circular_queue_0.enqueue(bool_0)
    assert len(circular_queue_0) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(var_0) == 1
    var_1 = var_0.dequeue()
    assert var_1 is True
    assert len(circular_queue_0) == 0
    assert len(var_0) == 0
    var_1.enqueue(set_0)


def test_case_4():
    int_0 = 890
    circular_queue_0 = module_0.CircularQueue(int_0)
    assert (
        f"{type(circular_queue_0).__module__}.{type(circular_queue_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(circular_queue_0) == 0
    with pytest.raises(Exception):
        circular_queue_0.dequeue()


def test_case_5():
    int_0 = -56
    circular_queue_0 = module_0.CircularQueue(int_0)
    assert (
        f"{type(circular_queue_0).__module__}.{type(circular_queue_0).__qualname__}"
        == "circular_queue.CircularQueue"
    )
    assert len(circular_queue_0) == 0
    bool_0 = circular_queue_0.is_empty()
    assert bool_0 is True
