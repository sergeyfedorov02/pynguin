# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import priority_queue_using_list as module_0


def test_case_0():
    int_0 = -1646
    fixed_priority_queue_0 = module_0.FixedPriorityQueue()
    with pytest.raises(ValueError):
        fixed_priority_queue_0.enqueue(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    under_flow_error_0 = module_0.UnderFlowError()
    bool_0 = True
    fixed_priority_queue_0 = module_0.FixedPriorityQueue()
    fixed_priority_queue_0.enqueue(under_flow_error_0, bool_0)


def test_case_2():
    bool_0 = False
    int_0 = -554
    fixed_priority_queue_0 = module_0.FixedPriorityQueue()
    none_type_0 = fixed_priority_queue_0.enqueue(bool_0, int_0)
    assert fixed_priority_queue_0.queues == [[-554], [], []]
    fixed_priority_queue_1 = module_0.FixedPriorityQueue()
    element_priority_queue_0 = module_0.ElementPriorityQueue()
    str_0 = element_priority_queue_0.__str__()
    str_1 = element_priority_queue_0.__str__()


def test_case_3():
    element_priority_queue_0 = module_0.ElementPriorityQueue()
    str_0 = element_priority_queue_0.__str__()
    fixed_priority_queue_0 = module_0.FixedPriorityQueue()
    with pytest.raises(module_0.UnderFlowError):
        fixed_priority_queue_0.dequeue()


def test_case_4():
    fixed_priority_queue_0 = module_0.FixedPriorityQueue()
    str_0 = fixed_priority_queue_0.__str__()
    assert str_0 == "Priority 0: []\nPriority 1: []\nPriority 2: []"


def test_case_5():
    element_priority_queue_0 = module_0.ElementPriorityQueue()
    none_type_0 = element_priority_queue_0.enqueue(element_priority_queue_0)
    assert len(element_priority_queue_0.queue) == 1
    none_type_1 = element_priority_queue_0.enqueue(element_priority_queue_0)
    str_0 = element_priority_queue_0.__str__()


def test_case_6():
    element_priority_queue_0 = module_0.ElementPriorityQueue()
    under_flow_error_0 = module_0.UnderFlowError()
    none_type_0 = element_priority_queue_0.enqueue(under_flow_error_0)
    assert len(element_priority_queue_0.queue) == 1
    int_0 = element_priority_queue_0.dequeue()
    assert element_priority_queue_0.queue == []
    assert (
        f"{type(int_0).__module__}.{type(int_0).__qualname__}"
        == "priority_queue_using_list.UnderFlowError"
    )
    str_0 = element_priority_queue_0.__str__()
    fixed_priority_queue_0 = module_0.FixedPriorityQueue()
    str_1 = fixed_priority_queue_0.__str__()
    assert str_1 == "Priority 0: []\nPriority 1: []\nPriority 2: []"
    with pytest.raises(module_0.UnderFlowError):
        fixed_priority_queue_0.dequeue()


def test_case_7():
    element_priority_queue_0 = module_0.ElementPriorityQueue()
    with pytest.raises(module_0.UnderFlowError):
        element_priority_queue_0.dequeue()


def test_case_8():
    over_flow_error_0 = module_0.OverFlowError()
    under_flow_error_0 = module_0.UnderFlowError()
    element_priority_queue_0 = module_0.ElementPriorityQueue()
    over_flow_error_1 = module_0.OverFlowError()
    under_flow_error_1 = module_0.UnderFlowError()
    bool_0 = True
    fixed_priority_queue_0 = module_0.FixedPriorityQueue()
    none_type_0 = fixed_priority_queue_0.enqueue(bool_0, under_flow_error_0)
    int_0 = fixed_priority_queue_0.dequeue()
    assert fixed_priority_queue_0.queues == [[], [], []]
    assert (
        f"{type(int_0).__module__}.{type(int_0).__qualname__}"
        == "priority_queue_using_list.UnderFlowError"
    )
    str_0 = fixed_priority_queue_0.__str__()
    assert str_0 == "Priority 0: []\nPriority 1: []\nPriority 2: []"
    int_1 = 2
    none_type_1 = element_priority_queue_0.enqueue(int_1)
    assert element_priority_queue_0.queue == [2]
