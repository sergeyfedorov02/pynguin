# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import arrays as module_0


def test_case_0():
    int_0 = -24
    bool_0 = True
    list_0 = [int_0, bool_0]
    list_1 = module_0.permute_recursive(list_0)


def test_case_1():
    int_0 = 2064
    int_1 = 970
    list_0 = [int_0, int_0, int_1]
    list_1 = module_0.permute_backtrack(list_0)


def test_case_2():
    float_0 = -768.274
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    int_0 = 856
    bool_0 = False
    list_0 = [int_0, bool_0]
    prefix_sum_0 = module_0.PrefixSum(list_0)
    assert (
        f"{type(prefix_sum_0).__module__}.{type(prefix_sum_0).__qualname__}"
        == "arrays.PrefixSum"
    )
    assert prefix_sum_0.prefix_sum == [856, 856]
    int_1 = module_0.product_sum_array(dict_0)
    assert int_1 == pytest.approx(-768.274, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "U=gg&l34["
    set_0 = {str_0, str_0, str_0}
    module_0.PrefixSum(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    prefix_sum_0 = module_0.PrefixSum(list_0)
    assert (
        f"{type(prefix_sum_0).__module__}.{type(prefix_sum_0).__qualname__}"
        == "arrays.PrefixSum"
    )
    assert prefix_sum_0.prefix_sum == []
    int_0 = module_0.product_sum_array(list_0)
    assert int_0 == 0
    bool_0 = False
    tuple_0 = (prefix_sum_0, list_0, bool_0, list_0)
    module_0.PrefixSum(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    bool_1 = False
    list_0 = []
    list_1 = module_0.permute_backtrack(list_0)
    list_2 = [bool_0, bool_1]
    list_3 = module_0.permute_recursive(list_2)
    list_4 = module_0.permute_backtrack(list_2)
    prefix_sum_0 = module_0.PrefixSum(list_2)
    assert (
        f"{type(prefix_sum_0).__module__}.{type(prefix_sum_0).__qualname__}"
        == "arrays.PrefixSum"
    )
    assert prefix_sum_0.prefix_sum == [False, 0]
    int_0 = prefix_sum_0.get_sum(bool_1, bool_0)
    assert int_0 is False
    int_1 = module_0.product_sum(list_3, bool_0)
    assert int_1 == 0
    bool_2 = False
    list_1.contains_sum(bool_2)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    list_0 = []
    list_1 = [list_0]
    prefix_sum_0 = module_0.PrefixSum(list_1)
    assert (
        f"{type(prefix_sum_0).__module__}.{type(prefix_sum_0).__qualname__}"
        == "arrays.PrefixSum"
    )
    assert prefix_sum_0.prefix_sum == [[]]
    prefix_sum_0.get_sum(tuple_0, bool_0)


def test_case_7():
    int_0 = -24
    bool_0 = True
    list_0 = [int_0, bool_0]
    bool_1 = True
    prefix_sum_0 = module_0.PrefixSum(list_0)
    assert (
        f"{type(prefix_sum_0).__module__}.{type(prefix_sum_0).__qualname__}"
        == "arrays.PrefixSum"
    )
    assert prefix_sum_0.prefix_sum == [-24, -23]
    bool_2 = prefix_sum_0.contains_sum(bool_0)
    assert bool_2 is True
    list_1 = [int_0, bool_1]
    int_1 = module_0.product_sum_array(list_1)
    assert int_1 == -23


@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    list_1 = module_0.permute_backtrack(list_0)
    int_0 = 2262
    int_1 = module_0.product_sum(list_0, int_0)
    assert int_1 == 0
    none_type_0 = None
    prefix_sum_0 = module_0.PrefixSum(list_0)
    assert (
        f"{type(prefix_sum_0).__module__}.{type(prefix_sum_0).__qualname__}"
        == "arrays.PrefixSum"
    )
    assert prefix_sum_0.prefix_sum == []
    bool_0 = prefix_sum_0.contains_sum(list_1)
    module_0.permute_backtrack(none_type_0)


def test_case_9():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, bool_0]
    int_0 = module_0.product_sum_array(list_1)
    assert int_0 == 11
