# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import binary_search_tree_recursive as module_0
import inspect as module_1
import tokenize as module_2

@pytest.mark.xfail(strict=True)
def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    int_0 = -2049
    none_type_0 = binary_search_tree_0.put(binary_search_tree_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree_recursive.Node'

def test_case_4():
    binary_search_tree_1 = module_0.BinarySearchTree()

@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = False
    binary_search_tree_0.remove(bool_0)

def test_case_10():
    binary_search_tree_1 = module_0.BinarySearchTree()

@pytest.mark.xfail(strict=True)
def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    int_0 = -1816
    none_type_0 = binary_search_tree_0.put(int_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree_recursive.Node'
    int_1 = -1060
    none_type_1 = binary_search_tree_0.put(int_1)
    none_type_2 = binary_search_tree_0.remove(int_0)
    binary_search_tree_0.put(int_1)

def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    int_0 = -1816
    none_type_0 = binary_search_tree_0.put(int_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree_recursive.Node'
    int_1 = -999
    none_type_1 = binary_search_tree_0.put(int_1)
    none_type_2 = binary_search_tree_0.remove(int_1)
    iterator_0 = binary_search_tree_0.preorder_traversal()

@pytest.mark.xfail(strict=True)
def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_1 = False
    none_type_1 = binary_search_tree_0.put(bool_1)
    int_0 = -999
    none_type_2 = binary_search_tree_0.put(int_0)
    int_1 = binary_search_tree_0.get_min_label()
    assert int_1 == -999
    binary_search_tree_0.search(int_3)

def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    iterator_0 = binary_search_tree_0.inorder_traversal()

@pytest.mark.xfail(strict=True)
def test_case_19():
    binary_search_tree_0 = module_0.BinarySearchTree()
    none_type_0 = binary_search_tree_0.put(binary_search_tree_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree_recursive.Node'
    iterator_1 = binary_search_tree_0.inorder_traversal()

@pytest.mark.xfail(strict=True)
def test_case_20():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    none_type_0 = binary_search_tree_0.put(bool_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree_recursive.Node'
    int_0 = -999
    none_type_1 = binary_search_tree_0.put(int_0)
    none_type_2 = binary_search_tree_0.remove(int_0)
    module_1.formatargspec(iterator_0, none_type_3, annotations=none_type_3, formatvarkw=int_2, formatreturns=int_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    none_type_0 = binary_search_tree_0.put(bool_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree_recursive.Node'
    int_0 = -999
    none_type_1 = binary_search_tree_0.put(int_0)
    none_type_2 = binary_search_tree_0.remove(bool_0)
    int_1 = 2107
    none_type_3 = binary_search_tree_0.put(int_1)
    iterator_0 = binary_search_tree_0.preorder_traversal()
    int_3 = binary_search_tree_0.get_max_label()
    assert int_3 == 2107
    bool_1 = binary_search_tree_0.exists(iterator_0)
    assert bool_1 is False
    int_4 = 1723
    binary_search_tree_0.search(int_4)