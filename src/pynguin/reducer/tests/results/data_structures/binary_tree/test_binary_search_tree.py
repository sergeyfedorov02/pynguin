# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import binary_search_tree as module_0


def test_case_0():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    binary_search_tree_0 = module_0.BinarySearchTree()
    str_0 = node_0.__repr__()
    assert str_0 == "None"


def test_case_1():
    float_0 = 1328.586523
    list_0 = [float_0, float_0]
    binary_search_tree_0 = module_0.BinarySearchTree()
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )


def test_case_2():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.get_min()
    with pytest.raises(IndexError):
        binary_search_tree_0.search(var_0)


def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.get_max()


@pytest.mark.xfail(strict=True)
def test_case_4():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    binary_search_tree_0 = module_0.BinarySearchTree(node_0)
    var_0 = binary_search_tree_0.get_min(binary_search_tree_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.value is None
    assert var_0.parent is None
    assert var_0.left is None
    assert var_0.right is None
    str_0 = node_0.__repr__()
    assert str_0 == "None"
    str_1 = node_0.__repr__()
    assert str_1 == "None"
    bool_0 = binary_search_tree_0.empty()
    binary_search_tree_0.get_max(str_0)


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.get_min()
    binary_search_tree_1 = module_0.BinarySearchTree()
    iterable_0 = binary_search_tree_1.preorder_traverse(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    binary_search_tree_0 = module_0.BinarySearchTree(bool_0)
    binary_search_tree_0.get_min()


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.traversal_tree()
    none_type_0 = binary_search_tree_0.insert(*var_0)
    var_1 = binary_search_tree_0.traversal_tree()
    var_0.traversal_tree()


def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.traversal_tree()
    none_type_0 = None
    iterable_0 = binary_search_tree_0.preorder_traverse(none_type_0)
    var_1 = binary_search_tree_0.traversal_tree()
    node_0 = module_0.Node(none_type_0)
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    binary_search_tree_0.traversal_tree(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    binary_search_tree_0.find_kth_smallest(binary_search_tree_0, binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.get_min()
    var_1 = binary_search_tree_0.get_min(var_0)
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    str_0 = var_0.__repr__()
    binary_search_tree_1 = module_0.BinarySearchTree()
    int_0 = -772
    binary_search_tree_0.find_kth_smallest(int_0, node_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    var_0 = binary_search_tree_0.get_min(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.value is True
    assert var_0.parent is None
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    none_type_1 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}"
        == "binary_search_tree.Node"
    )
    none_type_2 = binary_search_tree_0.remove(bool_0)
    var_1 = binary_search_tree_0.traversal_tree()
    module_0.postorder(var_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    none_type_1 = binary_search_tree_0.insert(*list_0)
    none_type_2 = binary_search_tree_0.remove(bool_0)
    list_1 = module_0.postorder(none_type_0)
    binary_search_tree_0.traversal_tree(bool_0)


def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()


def test_case_15():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )


def test_case_16():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = binary_search_tree_0.empty()
    none_type_0 = None
    binary_search_tree_1 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_1.get_min()
    var_1 = binary_search_tree_1.get_min(none_type_0)
    binary_search_tree_2 = module_0.BinarySearchTree()
    str_0 = binary_search_tree_2.__str__()
    str_1 = binary_search_tree_2.__str__()
    str_2 = binary_search_tree_2.__str__()


def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    var_0 = binary_search_tree_0.get_max()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.value is False
    assert var_0.parent is None
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    none_type_1 = binary_search_tree_0.remove(bool_0)
    assert binary_search_tree_0.root is None
    with pytest.raises(IndexError):
        binary_search_tree_0.search(bool_0)


def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.get_max(binary_search_tree_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.BinarySearchTree"
    )
    assert var_0.root is None
    with pytest.raises(IndexError):
        binary_search_tree_0.search(var_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    binary_search_tree_0 = module_0.BinarySearchTree(bool_0)
    binary_search_tree_0.search(binary_search_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    binary_search_tree_0 = module_0.BinarySearchTree(node_0)
    binary_search_tree_0.search(node_0)


def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    none_type_1 = binary_search_tree_0.insert(*list_0)
    var_0 = binary_search_tree_0.get_max()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.value is True
    assert (
        f"{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    int_0 = 1465
    with pytest.raises(ValueError):
        binary_search_tree_0.remove(int_0)


def test_case_22():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    binary_search_tree_0 = module_0.BinarySearchTree(node_0)
    var_0 = binary_search_tree_0.get_min()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.value is None
    assert var_0.parent is None
    assert var_0.left is None
    assert var_0.right is None


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    none_type_1 = binary_search_tree_0.insert(*list_0)
    var_0 = binary_search_tree_0.get_max()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.value is True
    assert (
        f"{type(var_0.parent).__module__}.{type(var_0.parent).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    int_0 = -1973
    none_type_2 = binary_search_tree_0.remove(bool_0)
    assert var_0.parent is None
    var_1 = binary_search_tree_0.traversal_tree()
    str_0 = var_0.__repr__()
    assert str_0 == "True"
    var_2 = binary_search_tree_0.search(int_0)
    none_type_3 = binary_search_tree_0.inorder(var_1, none_type_0)
    binary_search_tree_0.inorder(none_type_3, var_1)


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    binary_search_tree_0 = module_0.BinarySearchTree()
    iterable_0 = binary_search_tree_0.preorder_traverse(none_type_0)
    var_0 = binary_search_tree_0.traversal_tree()
    iterable_1 = binary_search_tree_0.preorder_traverse(var_0)
    var_1 = binary_search_tree_0.get_min(var_0)
    binary_search_tree_1 = module_0.BinarySearchTree()
    binary_search_tree_0.insert(*iterable_1)


@pytest.mark.xfail(strict=True)
def test_case_25():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = False
    bool_1 = binary_search_tree_0.empty()
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    none_type_1 = binary_search_tree_0.insert(*list_0)
    node_0 = module_0.Node(none_type_0)
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    int_0 = -1973
    var_0 = binary_search_tree_0.search(bool_1)
    var_1 = binary_search_tree_0.traversal_tree()
    str_0 = node_0.__repr__()
    assert str_0 == "None"
    var_2 = binary_search_tree_0.search(int_0)
    module_0.postorder(var_1)


@pytest.mark.xfail(strict=True)
def test_case_26():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    str_0 = node_0.__repr__()
    assert str_0 == "None"
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    var_0 = binary_search_tree_0.get_min(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.value is True
    assert var_0.parent is None
    assert var_0.left is None
    assert var_0.right is None
    none_type_1 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}"
        == "binary_search_tree.Node"
    )
    var_1 = binary_search_tree_0.get_max()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_1.value is True
    assert (
        f"{type(var_1.parent).__module__}.{type(var_1.parent).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_1.left is None
    assert var_1.right is None
    int_0 = -584
    none_type_2 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "binary_search_tree.Node"
    )
    binary_search_tree_1 = module_0.BinarySearchTree()
    none_type_3 = binary_search_tree_0.remove(bool_0)
    assert var_1.parent is None
    binary_search_tree_2 = module_0.BinarySearchTree()
    var_2 = binary_search_tree_1.traversal_tree()
    var_3 = binary_search_tree_0.search(int_0)
    module_0.postorder(binary_search_tree_2)


@pytest.mark.xfail(strict=True)
def test_case_27():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    var_0 = binary_search_tree_0.get_min(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_0.value is True
    assert var_0.parent is None
    assert var_0.left is None
    assert var_0.right is None
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    none_type_1 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}"
        == "binary_search_tree.Node"
    )
    none_type_2 = binary_search_tree_0.remove(bool_0)
    var_1 = binary_search_tree_0.traversal_tree()
    str_0 = var_0.__repr__()
    assert str_0 == "{'True': (None, True)}"
    module_0.postorder(var_1)


@pytest.mark.xfail(strict=True)
def test_case_28():
    binary_search_tree_0 = module_0.BinarySearchTree()
    str_0 = binary_search_tree_0.__str__()
    none_type_0 = binary_search_tree_0.insert()
    none_type_1 = binary_search_tree_0.insert(*str_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    str_1 = binary_search_tree_0.__str__()
    assert str_1 == "{'N': (None, {'o': ({'n': (e, None)}, None)})}"
    binary_search_tree_1 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_1.traversal_tree()
    binary_search_tree_2 = module_0.BinarySearchTree(binary_search_tree_1)
    var_1 = binary_search_tree_1.traversal_tree()
    var_0.insert(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}"
        == "builtins.property"
    )
    str_0 = node_0.__repr__()
    assert str_0 == "None"
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.traversal_tree()
    var_1 = binary_search_tree_0.traversal_tree()
    var_2 = binary_search_tree_0.get_min(var_0)
    binary_search_tree_1 = module_0.BinarySearchTree()
    iterable_0 = binary_search_tree_1.preorder_traverse(var_1)
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}"
        == "binary_search_tree.Node"
    )
    var_3 = binary_search_tree_0.get_min(none_type_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_3.value is True
    assert var_3.parent is None
    assert var_3.left is None
    assert var_3.right is None
    none_type_1 = binary_search_tree_0.insert(*list_0)
    assert (
        f"{type(var_3.right).__module__}.{type(var_3.right).__qualname__}"
        == "binary_search_tree.Node"
    )
    none_type_2 = binary_search_tree_0.insert(*list_0)
    var_4 = binary_search_tree_0.get_max()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_4.value is True
    assert (
        f"{type(var_4.parent).__module__}.{type(var_4.parent).__qualname__}"
        == "binary_search_tree.Node"
    )
    assert var_4.left is None
    assert var_4.right is None
    binary_search_tree_2 = module_0.BinarySearchTree()
    binary_search_tree_3 = module_0.BinarySearchTree()
    binary_search_tree_3.remove(none_type_0)
