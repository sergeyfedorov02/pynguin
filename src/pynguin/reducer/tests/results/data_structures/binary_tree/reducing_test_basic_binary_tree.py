# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import basic_binary_tree as module_0
import dataclasses as module_1

def test_case_0():
    int_0 = -2654
    node_0 = module_0.Node(int_0)
    none_type_0 = module_0.display(node_0)

@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    var_0 = module_0.binary_tree_mirror_dict(dict_0, dict_0)
    bool_3 = module_0.is_full_binary_tree(var_0)
    assert bool_3 is True

@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -3525
    node_0 = module_0.Node(int_0)
    module_0.binary_tree_mirror(node_0, node_0)

def test_case_7():
    dict_0 = {}
    with pytest.raises(ValueError):
        module_0.binary_tree_mirror(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    var_0 = module_0.merge_two_binary_trees(binary_tree_path_sum_0, none_type_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'basic_binary_tree.BinaryTreePathSum'
    assert var_0.paths == 0
    binary_tree_path_sum_0.depth_first_search(var_0, none_type_0)

def test_case_11():
    bool_0 = True
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    none_type_0 = None
    int_0 = binary_tree_path_sum_0.path_sum(none_type_0)
    assert int_0 == 0
    node_0 = module_0.Node(bool_0)
    bool_1 = module_0.is_full_binary_tree(node_0)
    assert bool_1 is True

@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    str_0 = '4AY`'
    node_0 = module_0.Node(str_0)
    binary_tree_path_sum_0.path_sum(node_0, str_0)

def test_case_13():
    bool_0 = True
    tree_node_0 = module_0.TreeNode(bool_0)
    bool_1 = module_0.is_binary_search_tree(tree_node_0)
    assert bool_1 is True

@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    module_0.print_preorder(node_0)

def test_case_18():
    dict_0 = {}
    var_0 = module_0.binary_tree_mirror_dict(dict_0, dict_0)
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(var_0)
    iterator_0 = binary_tree_node_sum_0.__iter__()

@pytest.mark.xfail(strict=True)
def test_case_19():
    str_1 = '&5t'
    node_1 = module_0.Node(str_1)
    int_0 = -1345
    tree_node_0 = module_0.TreeNode(int_0)
    var_2 = tree_node_0.__repr__()
    tuple_0 = (node_1, node_1, var_2)
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(tuple_0)
    bool_0 = True
    module_0.binary_tree_mirror_dict(binary_tree_node_sum_0, bool_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.binary_tree_mirror_dict(dict_0, bool_0)

def test_case_22():
    none_type_1 = None
    var_0 = module_0.merge_two_binary_trees(none_type_1, none_type_1)
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(var_0)
    dict_0 = {binary_tree_node_sum_0: binary_tree_node_sum_0, var_0: none_type_1, var_0: none_type_1, var_0: var_0}
    with pytest.raises(ValueError):
        module_0.binary_tree_mirror(dict_0)

@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    node_0 = module_0.Node(binary_tree_path_sum_0)
    binary_tree_path_sum_0.path_sum(node_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.merge_two_binary_trees(tuple_0, none_type_0)
    module_0.merge_two_binary_trees(var_0, var_0)

def test_case_25():
    dict_0 = {}
    none_type_0 = None
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(dict_0)
    int_0 = binary_tree_node_sum_0.depth_first_search(none_type_0)
    assert int_0 == 0
    tree_node_0 = module_0.TreeNode(binary_tree_node_sum_0)
    with pytest.raises(ValueError):
        module_0.is_binary_search_tree(tree_node_0)

def test_case_27():
    none_type_1 = None
    none_type_2 = module_0.print_preorder(none_type_1)

def test_case_28():
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    none_type_0 = None
    int_0 = 1033
    none_type_2 = binary_tree_path_sum_0.depth_first_search(none_type_0, int_0)

def test_case_29():
    bool_0 = True
    tree_node_0 = module_0.TreeNode(bool_0, bool_0)
    with pytest.raises(ValueError):
        module_0.is_binary_search_tree(tree_node_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = True
    tree_node_0 = module_0.TreeNode(bool_0, bool_0, bool_0)
    module_0.is_full_binary_tree(tree_node_0)