# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import avl_tree as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    a_v_ltree_0 = module_0.AVLtree()
    none_type_0 = a_v_ltree_0.insert(a_v_ltree_0)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    a_v_ltree_0.del_node(a_v_ltree_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.insert_node(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data is None
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.height == 1
    a_v_ltree_0 = module_0.AVLtree()
    with pytest.raises(AssertionError):
        module_0.right_rotation(var_0)


def test_case_2():
    bytes_0 = b"\xcck\xa6\xe2\xcc*\x1c!\xb2\xb9\x0f\xfb\xf1\xd8("
    my_node_0 = module_0.MyNode(bytes_0)
    assert my_node_0.height == 1
    a_v_ltree_0 = module_0.AVLtree()
    with pytest.raises(AssertionError):
        module_0.lr_rotation(my_node_0)


def test_case_3():
    tuple_0 = ()
    my_node_0 = module_0.MyNode(tuple_0)
    assert my_node_0.height == 1
    var_0 = module_0.insert_node(my_node_0, tuple_0)
    assert (
        f"{type(my_node_0.right).__module__}.{type(my_node_0.right).__qualname__}"
        == "avl_tree.MyNode"
    )
    assert my_node_0.height == 2
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data == ()
    assert var_0.left is None
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}"
        == "avl_tree.MyNode"
    )
    assert var_0.height == 2


def test_case_4():
    none_type_0 = None
    var_0 = module_0.insert_node(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data is None
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.height == 1
    a_v_ltree_0 = var_0.get_data()
    none_type_1 = module_0.get_right_most(var_0)
    with pytest.raises(AssertionError):
        module_0.right_rotation(var_0)


def test_case_5():
    none_type_0 = None
    var_0 = module_0.insert_node(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data is None
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.height == 1
    none_type_1 = None
    a_v_ltree_0 = module_0.AVLtree()
    none_type_2 = a_v_ltree_0.insert(none_type_1)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    none_type_3 = module_0.get_left_most(var_0)


def test_case_6():
    none_type_0 = None
    a_v_ltree_0 = module_0.AVLtree()
    none_type_1 = a_v_ltree_0.insert(none_type_0)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    none_type_2 = a_v_ltree_0.del_node(none_type_0)
    assert a_v_ltree_0.root is None


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    none_type_1 = None
    a_v_ltree_0 = module_0.AVLtree()
    none_type_2 = a_v_ltree_0.del_node(none_type_0)
    none_type_3 = a_v_ltree_0.insert(none_type_1)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    a_v_ltree_0.del_node(a_v_ltree_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    a_v_ltree_0 = module_0.AVLtree()
    none_type_1 = a_v_ltree_0.insert(none_type_0)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    a_v_ltree_0.del_node(a_v_ltree_0)


def test_case_9():
    a_v_ltree_0 = module_0.AVLtree()


def test_case_10():
    none_type_0 = None
    my_queue_0 = module_0.MyQueue()
    assert my_queue_0.head == 0
    assert my_queue_0.tail == 0
    none_type_1 = my_queue_0.push(none_type_0)
    assert my_queue_0.tail == 1


@pytest.mark.xfail(strict=True)
def test_case_11():
    my_queue_0 = module_0.MyQueue()
    assert my_queue_0.head == 0
    assert my_queue_0.tail == 0
    int_0 = my_queue_0.count()
    assert int_0 == 0
    bytes_0 = b"\xbf\xc7\xdfD"
    module_0.left_rotation(bytes_0)


def test_case_12():
    none_type_0 = None
    var_0 = module_0.insert_node(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data is None
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.height == 1
    tuple_0 = ()
    my_node_0 = module_0.MyNode(tuple_0)
    assert my_node_0.height == 1
    none_type_1 = my_node_0.set_right(var_0)
    none_type_2 = None
    a_v_ltree_0 = module_0.AVLtree()
    none_type_3 = a_v_ltree_0.insert(none_type_2)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    none_type_4 = a_v_ltree_0.del_node(none_type_2)
    assert a_v_ltree_0.root is None
    my_queue_0 = module_0.MyQueue()
    assert my_queue_0.head == 0
    assert my_queue_0.tail == 0
    none_type_5 = my_queue_0.push(none_type_1)
    assert my_queue_0.tail == 1
    my_queue_1 = module_0.MyQueue()
    assert my_queue_1.head == 0
    assert my_queue_1.tail == 0
    var_1 = my_node_0.get_data()
    none_type_6 = my_queue_0.print_queue()


def test_case_13():
    none_type_0 = None
    a_v_ltree_0 = module_0.AVLtree()
    none_type_1 = a_v_ltree_0.insert(none_type_0)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    str_0 = a_v_ltree_0.__str__()
    assert str_0 == " None \n*************************************"
    a_v_ltree_1 = module_0.AVLtree()
    int_0 = a_v_ltree_1.get_height()
    assert int_0 == 0
    var_0 = module_0.insert_node(none_type_1, str_0)
    assert var_0.data == " None \n*************************************"
    assert var_0.height == 1
    none_type_2 = a_v_ltree_0.del_node(none_type_0)
    assert a_v_ltree_0.root is None
    my_node_0 = module_0.MyNode(a_v_ltree_0)
    assert my_node_0.height == 1
    none_type_3 = var_0.set_left(my_node_0)
    var_1 = module_0.get_right_most(my_node_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "avl_tree.AVLtree"
    assert var_1.root is None
    with pytest.raises(AssertionError):
        module_0.lr_rotation(var_0)


def test_case_14():
    a_v_ltree_0 = module_0.AVLtree()
    str_0 = a_v_ltree_0.__str__()
    assert str_0 == ""
    none_type_0 = a_v_ltree_0.insert(str_0)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    none_type_1 = a_v_ltree_0.insert(str_0)
    int_0 = a_v_ltree_0.get_height()
    assert int_0 == 2
    int_1 = a_v_ltree_0.get_height()
    assert int_1 == 2
    a_v_ltree_1 = module_0.AVLtree()
    a_v_ltree_2 = module_0.AVLtree()
    none_type_2 = a_v_ltree_0.insert(str_0)
    a_v_ltree_3 = module_0.AVLtree()
    a_v_ltree_4 = module_0.AVLtree()
    none_type_3 = a_v_ltree_0.del_node(str_0)


def test_case_15():
    none_type_0 = None
    var_0 = module_0.insert_node(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data is None
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.height == 1
    tuple_0 = ()
    my_node_0 = module_0.MyNode(tuple_0)
    assert my_node_0.height == 1
    int_0 = var_0.get_height()
    assert int_0 == 1
    var_1 = module_0.insert_node(my_node_0, tuple_0)
    assert (
        f"{type(my_node_0.right).__module__}.{type(my_node_0.right).__qualname__}"
        == "avl_tree.MyNode"
    )
    assert my_node_0.height == 2
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "avl_tree.MyNode"
    assert var_1.data == ()
    assert var_1.left is None
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "avl_tree.MyNode"
    )
    assert var_1.height == 2
    a_v_ltree_0 = module_0.AVLtree()
    my_node_1 = module_0.left_rotation(var_1)
    assert my_node_0.height == 1
    assert var_1.height == 1
    assert (
        f"{type(my_node_1).__module__}.{type(my_node_1).__qualname__}"
        == "avl_tree.MyNode"
    )
    assert my_node_1.data == ()
    assert (
        f"{type(my_node_1.left).__module__}.{type(my_node_1.left).__qualname__}"
        == "avl_tree.MyNode"
    )
    assert my_node_1.right is None
    assert my_node_1.height == 2
    var_2 = module_0.get_right_most(my_node_1)
    with pytest.raises(AssertionError):
        module_0.right_rotation(my_node_0)


def test_case_16():
    none_type_0 = None
    my_node_0 = module_0.MyNode(none_type_0)
    assert my_node_0.height == 1
    with pytest.raises(AssertionError):
        module_0.rl_rotation(my_node_0)


def test_case_17():
    none_type_0 = None
    var_0 = module_0.insert_node(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data is None
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.height == 1
    tuple_0 = ()
    my_node_0 = module_0.MyNode(tuple_0)
    assert my_node_0.height == 1
    var_1 = module_0.insert_node(my_node_0, tuple_0)
    assert (
        f"{type(my_node_0.right).__module__}.{type(my_node_0.right).__qualname__}"
        == "avl_tree.MyNode"
    )
    assert my_node_0.height == 2
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "avl_tree.MyNode"
    assert var_1.data == ()
    assert var_1.left is None
    assert (
        f"{type(var_1.right).__module__}.{type(var_1.right).__qualname__}"
        == "avl_tree.MyNode"
    )
    assert var_1.height == 2
    a_v_ltree_0 = module_0.AVLtree()
    var_2 = module_0.get_right_most(var_1)
    with pytest.raises(AssertionError):
        module_0.right_rotation(my_node_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    var_0 = module_0.insert_node(none_type_0, none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data is None
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.height == 1
    tuple_0 = ()
    a_v_ltree_0 = module_0.AVLtree()
    dict_0 = {none_type_0: tuple_0, none_type_0: tuple_0}
    none_type_1 = var_0.set_left(dict_0)
    none_type_2 = a_v_ltree_0.del_node(dict_0)
    module_0.get_left_most(var_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 1844
    bool_0 = True
    my_node_0 = module_0.MyNode(bool_0)
    assert my_node_0.height == 1
    var_0 = module_0.del_node(my_node_0, int_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "avl_tree.MyNode"
    assert var_0.data is True
    assert var_0.left is None
    assert var_0.right is None
    assert var_0.height == 1
    var_1 = module_0.get_right_most(var_0)
    assert var_1 is True
    int_1 = var_0.get_height()
    assert int_1 == 1
    a_v_ltree_0 = module_0.AVLtree()
    str_0 = a_v_ltree_0.__str__()
    assert str_0 == ""
    module_0.insert_node(a_v_ltree_0, int_0)


def test_case_20():
    none_type_0 = None
    a_v_ltree_0 = module_0.AVLtree()
    str_0 = a_v_ltree_0.__str__()
    assert str_0 == ""
    none_type_1 = a_v_ltree_0.del_node(none_type_0)
    none_type_2 = a_v_ltree_0.insert(str_0)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    a_v_ltree_1 = module_0.AVLtree()
    a_v_ltree_2 = module_0.AVLtree()
    int_0 = a_v_ltree_0.get_height()
    assert int_0 == 1
    none_type_3 = a_v_ltree_1.insert(a_v_ltree_2)
    float_0 = 373.022
    my_node_0 = module_0.MyNode(float_0)
    assert my_node_0.height == 1
    var_0 = module_0.get_left_most(my_node_0)
    assert var_0 == pytest.approx(373.022, abs=0.01, rel=0.01)
    none_type_4 = a_v_ltree_2.insert(var_0)
    none_type_5 = a_v_ltree_2.del_node(int_0)


def test_case_21():
    none_type_0 = None
    my_node_0 = module_0.MyNode(none_type_0)
    assert my_node_0.height == 1
    none_type_1 = None
    a_v_ltree_0 = module_0.AVLtree()
    none_type_2 = a_v_ltree_0.insert(none_type_1)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    my_node_1 = module_0.MyNode(my_node_0)
    assert my_node_1.height == 1
    str_0 = a_v_ltree_0.__str__()
    assert str_0 == " None \n*************************************"
    none_type_3 = a_v_ltree_0.del_node(none_type_2)
    assert a_v_ltree_0.root is None
    a_v_ltree_1 = module_0.AVLtree()
    none_type_4 = my_node_1.set_left(my_node_0)
    none_type_5 = a_v_ltree_1.insert(a_v_ltree_0)
    assert (
        f"{type(a_v_ltree_1.root).__module__}.{type(a_v_ltree_1.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    my_node_2 = module_0.MyNode(none_type_5)
    assert my_node_2.height == 1
    var_0 = module_0.get_right_most(my_node_2)
    my_node_3 = module_0.MyNode(none_type_5)
    assert my_node_3.height == 1
    var_1 = module_0.get_right_most(my_node_2)
    my_node_4 = module_0.right_rotation(my_node_1)
    assert my_node_0.height == 2
    assert my_node_4.height == 2
    none_type_6 = my_node_1.set_height(var_0)


def test_case_22():
    none_type_0 = None
    my_node_0 = module_0.MyNode(none_type_0)
    assert my_node_0.height == 1
    none_type_1 = None
    var_0 = my_node_0.get_right()
    var_1 = module_0.get_right_most(my_node_0)
    a_v_ltree_0 = module_0.AVLtree()
    none_type_2 = a_v_ltree_0.insert(none_type_1)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    my_node_1 = module_0.MyNode(my_node_0)
    assert my_node_1.height == 1
    str_0 = a_v_ltree_0.__str__()
    assert str_0 == " None \n*************************************"
    none_type_3 = a_v_ltree_0.del_node(none_type_2)
    assert a_v_ltree_0.root is None
    none_type_4 = a_v_ltree_0.insert(a_v_ltree_0)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    my_node_2 = module_0.MyNode(none_type_1)
    assert my_node_2.height == 1
    none_type_5 = my_node_0.set_right(my_node_0)
    with pytest.raises(AssertionError):
        module_0.rl_rotation(my_node_0)


def test_case_23():
    a_v_ltree_0 = module_0.AVLtree()
    str_0 = a_v_ltree_0.__str__()
    assert str_0 == ""
    none_type_0 = a_v_ltree_0.insert(str_0)
    assert (
        f"{type(a_v_ltree_0.root).__module__}.{type(a_v_ltree_0.root).__qualname__}"
        == "avl_tree.MyNode"
    )
    a_v_ltree_1 = module_0.AVLtree()
    none_type_1 = a_v_ltree_0.insert(str_0)
    my_node_0 = module_0.MyNode(a_v_ltree_0)
    assert my_node_0.height == 1
    a_v_ltree_2 = module_0.AVLtree()
    none_type_2 = a_v_ltree_2.insert(a_v_ltree_0)
    assert (
        f"{type(a_v_ltree_2.root).__module__}.{type(a_v_ltree_2.root).__qualname__}"
        == "avl_tree.MyNode"
    )
