# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import basic_binary_tree as module_0
import dataclasses as module_1


def test_case_0():
    int_0 = -2654
    node_0 = module_0.Node(int_0)
    none_type_0 = module_0.display(node_0)


def test_case_1():
    bool_0 = False
    int_0 = module_0.depth_of_tree(bool_0)
    assert int_0 == 0
    tree_node_0 = module_0.TreeNode(bool_0, bool_0)
    var_0 = module_0.binary_tree_mirror_dict(tree_node_0, bool_0)
    dict_0 = {}
    with pytest.raises(ValueError):
        module_0.binary_tree_mirror(dict_0)


def test_case_2():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    bool_1 = module_0.is_full_binary_tree(node_0)
    assert bool_1 is True
    var_0 = module_1.dataclass(init=bool_0, order=bool_0, frozen=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    dict_0 = {}
    var_0 = module_0.binary_tree_mirror_dict(dict_0, dict_0)
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    bool_1 = module_0.is_binary_search_tree(var_0)
    assert bool_1 is True
    tree_node_0 = module_0.TreeNode(bool_1)
    bool_2 = module_0.is_binary_search_tree(tree_node_0)
    assert bool_2 is True
    bool_3 = module_0.is_full_binary_tree(var_0)
    assert bool_3 is True
    none_type_0 = None
    var_1 = tree_node_0.__eq__(none_type_0)
    int_0 = binary_tree_path_sum_0.path_sum(none_type_0)
    assert int_0 == 0
    var_2 = tree_node_0.__repr__()
    none_type_1 = None
    var_3 = module_1.dataclass(
        init=int_0, repr=bool_1, order=none_type_0, unsafe_hash=int_0, slots=none_type_1
    )
    none_type_2 = binary_tree_path_sum_0.depth_first_search(
        none_type_1, binary_tree_path_sum_0
    )
    node_0 = module_0.Node(bool_0)
    bool_4 = module_0.is_full_binary_tree(node_0)
    assert bool_4 is True
    var_4 = module_1.dataclass(init=bool_0, order=bool_0, frozen=bool_0)
    var_5 = module_0.merge_two_binary_trees(none_type_0, var_4)
    binary_tree_path_sum_1 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_1.paths == 0
    var_6 = tree_node_0.__eq__(bool_4)
    var_7 = var_6.__repr__()
    list_0 = []
    binary_tree_path_sum_1.depth_first_search(var_7, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    int_0 = 2467
    tuple_0 = (int_0,)
    module_0.binary_tree_mirror_dict(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    bool_0 = False
    var_0 = module_0.binary_tree_mirror_dict(binary_tree_path_sum_0, bool_0)
    var_0.path_sum(binary_tree_path_sum_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -3525
    node_0 = module_0.Node(int_0)
    module_0.binary_tree_mirror(node_0, node_0)


def test_case_7():
    dict_0 = {}
    with pytest.raises(ValueError):
        module_0.binary_tree_mirror(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    var_0 = module_1.dataclass(
        eq=none_type_0,
        order=none_type_0,
        unsafe_hash=none_type_0,
        frozen=none_type_0,
        slots=none_type_0,
    )
    var_1 = module_0.merge_two_binary_trees(var_0, none_type_0)
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(none_type_0)
    binary_tree_node_sum_0.depth_first_search(var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    none_type_0 = None
    bool_0 = False
    none_type_1 = binary_tree_path_sum_0.depth_first_search(none_type_0, bool_0)
    none_type_2 = None
    binary_tree_path_sum_1 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_1.paths == 0
    binary_tree_path_sum_0.depth_first_search(binary_tree_path_sum_0, none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    var_0 = module_0.merge_two_binary_trees(binary_tree_path_sum_0, none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "basic_binary_tree.BinaryTreePathSum"
    )
    assert var_0.paths == 0
    binary_tree_path_sum_0.depth_first_search(var_0, none_type_0)


def test_case_11():
    bool_0 = True
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    none_type_0 = None
    int_0 = binary_tree_path_sum_0.path_sum(none_type_0)
    assert int_0 == 0
    none_type_1 = None
    none_type_2 = binary_tree_path_sum_0.depth_first_search(
        none_type_1, binary_tree_path_sum_0
    )
    node_0 = module_0.Node(bool_0)
    bool_1 = module_0.is_full_binary_tree(node_0)
    assert bool_1 is True
    var_0 = module_1.dataclass(init=bool_0, order=bool_0, frozen=bool_0)
    binary_tree_path_sum_1 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_1.paths == 0


@pytest.mark.xfail(strict=True)
def test_case_12():
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    str_0 = "4AY`"
    node_0 = module_0.Node(str_0)
    binary_tree_path_sum_0.path_sum(node_0, str_0)


def test_case_13():
    bool_0 = True
    tree_node_0 = module_0.TreeNode(bool_0)
    bool_1 = module_0.is_binary_search_tree(tree_node_0)
    assert bool_1 is True


def test_case_14():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    var_0 = module_0.merge_two_binary_trees(none_type_0, set_0)
    tree_node_0 = module_0.TreeNode(var_0, var_0)
    with pytest.raises(ValueError):
        module_0.is_binary_search_tree(tree_node_0)


def test_case_15():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_0.merge_two_binary_trees(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    module_0.print_preorder(node_0)


def test_case_17():
    complex_0 = 61.0314 - 1169.359j
    node_0 = module_0.Node(complex_0)


def test_case_18():
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.binary_tree_mirror_dict(dict_0, dict_0)
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(var_0)
    iterator_0 = binary_tree_node_sum_0.__iter__()
    with pytest.raises(ValueError):
        module_0.is_binary_search_tree(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "0D"
    var_0 = module_1.dataclass(init=str_0, eq=str_0)
    var_1 = var_0.__repr__()
    node_0 = module_0.Node(var_1)
    str_1 = "&5t"
    node_1 = module_0.Node(str_1)
    int_0 = -1345
    tree_node_0 = module_0.TreeNode(int_0)
    var_2 = tree_node_0.__repr__()
    tuple_0 = (node_1, node_1, var_2)
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(tuple_0)
    bool_0 = True
    module_0.binary_tree_mirror_dict(binary_tree_node_sum_0, bool_0)


def test_case_20():
    dict_0 = {}
    bool_0 = True
    var_0 = module_1.dataclass(kw_only=bool_0)
    var_1 = var_0.__eq__(dict_0)
    var_2 = module_0.binary_tree_mirror_dict(dict_0, bool_0)
    var_3 = var_2.__repr__()
    iterator_0 = var_3.__iter__()
    var_4 = var_3.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.binary_tree_mirror_dict(dict_0, bool_0)


def test_case_22():
    bool_0 = False
    none_type_0 = None
    int_0 = module_0.depth_of_tree(none_type_0)
    assert int_0 == 0
    tree_node_0 = module_0.TreeNode(int_0, none_type_0)
    assert tree_node_0.data == 0
    node_0 = module_0.Node(bool_0)
    none_type_1 = None
    var_0 = module_0.merge_two_binary_trees(none_type_1, none_type_1)
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(var_0)
    dict_0 = {
        binary_tree_node_sum_0: binary_tree_node_sum_0,
        var_0: none_type_1,
        var_0: none_type_1,
        var_0: var_0,
    }
    with pytest.raises(ValueError):
        module_0.binary_tree_mirror(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    node_0 = module_0.Node(binary_tree_path_sum_0)
    binary_tree_path_sum_0.path_sum(node_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_0.merge_two_binary_trees(tuple_0, none_type_0)
    module_0.merge_two_binary_trees(var_0, var_0)


def test_case_25():
    dict_0 = {}
    none_type_0 = None
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(dict_0)
    int_0 = binary_tree_node_sum_0.depth_first_search(none_type_0)
    assert int_0 == 0
    bool_0 = module_0.is_binary_search_tree(none_type_0)
    assert bool_0 is True
    tree_node_0 = module_0.TreeNode(binary_tree_node_sum_0)
    with pytest.raises(ValueError):
        module_0.is_binary_search_tree(tree_node_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b"0\xa2\x9e\x7f."
    tree_node_0 = module_0.TreeNode(bytes_0, right=bytes_0)
    var_0 = tree_node_0.__repr__()
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(var_0)
    int_0 = -408
    node_0 = module_0.Node(int_0)
    binary_tree_node_sum_1 = module_0.BinaryTreeNodeSum(node_0)
    none_type_0 = None
    node_1 = module_0.Node(none_type_0)
    dict_0 = {node_1: node_1}
    bool_0 = True
    tuple_0 = (none_type_0, bool_0, node_1)
    tuple_1 = (var_0, var_0, tuple_0)
    var_1 = tree_node_0.__eq__(tuple_1)
    bool_1 = module_0.is_binary_search_tree(none_type_0)
    assert bool_1 is True
    int_1 = module_0.depth_of_tree(node_0)
    assert int_1 == 1
    module_1.dataclass(
        bool_1, order=dict_0, frozen=none_type_0, match_args=node_1, kw_only=bool_1
    )


def test_case_27():
    none_type_0 = None
    bool_0 = module_0.is_binary_search_tree(none_type_0)
    assert bool_0 is True
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    none_type_1 = None
    none_type_2 = module_0.print_preorder(none_type_1)
    bool_1 = False
    var_0 = module_0.binary_tree_mirror_dict(none_type_1, bool_1)
    bool_2 = True
    tree_node_0 = module_0.TreeNode(bool_1, bool_2)
    var_1 = tree_node_0.__eq__(var_0)
    var_2 = var_1.__eq__(bool_1)
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(var_1)


def test_case_28():
    binary_tree_path_sum_0 = module_0.BinaryTreePathSum()
    assert binary_tree_path_sum_0.paths == 0
    none_type_0 = None
    int_0 = 1033
    none_type_1 = binary_tree_path_sum_0.depth_first_search(none_type_0, int_0)
    none_type_2 = binary_tree_path_sum_0.depth_first_search(none_type_0, int_0)
    bool_0 = module_0.is_binary_search_tree(none_type_0)
    assert bool_0 is True
    none_type_3 = None
    var_0 = module_0.merge_two_binary_trees(binary_tree_path_sum_0, none_type_3)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "basic_binary_tree.BinaryTreePathSum"
    )
    assert var_0.paths == 0
    dict_0 = {none_type_3: var_0, int_0: none_type_0, none_type_3: none_type_3}
    dict_1 = module_0.binary_tree_mirror(dict_0, none_type_0)
    var_1 = module_0.merge_two_binary_trees(none_type_1, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "basic_binary_tree.BinaryTreePathSum"
    )
    assert var_1.paths == 0
    binary_tree_node_sum_0 = module_0.BinaryTreeNodeSum(var_0)
    assert (
        f"{type(binary_tree_node_sum_0.tree).__module__}.{type(binary_tree_node_sum_0.tree).__qualname__}"
        == "basic_binary_tree.BinaryTreePathSum"
    )


def test_case_29():
    bool_0 = True
    tree_node_0 = module_0.TreeNode(bool_0, bool_0)
    with pytest.raises(ValueError):
        module_0.is_binary_search_tree(tree_node_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = True
    tree_node_0 = module_0.TreeNode(bool_0, bool_0, bool_0)
    module_0.is_full_binary_tree(tree_node_0)
