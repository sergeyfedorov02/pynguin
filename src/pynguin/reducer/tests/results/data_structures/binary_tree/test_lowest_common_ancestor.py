# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lowest_common_ancestor as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1244
    module_0.create_sparse(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 1244
    bool_0 = True
    list_0 = module_0.create_sparse(bool_0, bool_0)
    assert list_0 is True
    module_0.create_sparse(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -2751
    list_0 = [int_0, int_0]
    module_0.breadth_first_search(list_0, int_0, int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (bool_0, tuple_0)
    none_type_0 = None
    module_0.swap(tuple_1, none_type_0)


def test_case_4():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: list_0, bool_0: list_0, bool_0: list_0, bool_0: list_0}
    tuple_0 = module_0.breadth_first_search(list_0, list_0, bool_0, dict_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = module_0.lowest_common_ancestor(bool_0, bool_0, list_0, none_type_0)
    assert int_0 is True


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_1, bool_0]
    module_0.lowest_common_ancestor(bool_1, bool_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_1, bool_0]
    bool_2 = True
    module_0.lowest_common_ancestor(bool_2, bool_1, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = True
    module_0.lowest_common_ancestor(bool_1, bool_0, list_0, list_0)
