# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import red_black_tree as module_0

@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -1040.9977802858484
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_1.remove(float_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    int_0 = 2482
    red_black_tree_0 = module_0.RedBlackTree(color=int_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.remove(int_0)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    bool_1 = True
    red_black_tree_2 = module_0.RedBlackTree(color=bool_1)
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 1
    red_black_tree_5 = module_0.RedBlackTree(left=red_black_tree_1, right=red_black_tree_2)
    assert len(red_black_tree_5) == 3

@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = False
    float_0 = 885.94138
    red_black_tree_0 = module_0.RedBlackTree()
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(bool_0)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_1.search(float_0)
    var_0.search(bool_0)

def test_case_38():
    none_type_0 = None
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1

def test_case_50():
    bool_1 = False
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(bool_1, none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    bool_3 = False

def test_case_52():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(bool_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    var_0 = red_black_tree_1.get_min()
    assert var_0 is True
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 2
    var_2 = red_black_tree_0.get_min()
    assert var_2 == -981
    red_black_tree_5 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_5) == 2
    red_black_tree_6 = red_black_tree_5.rotate_right()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 1
    assert f'{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_6) == 2

def test_case_53():
    none_type_0 = None
    int_0 = -981
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1

@pytest.mark.xfail(strict=True)
def test_case_54():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(bool_1, none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_3 = red_black_tree_1.insert(bool_0)
    assert len(red_black_tree_3) == 1

def test_case_56():
    int_0 = -981
    bool_0 = True
    int_1 = -101
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_3 = red_black_tree_0.remove(bool_0)
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert f'{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_4) == 2
    bool_2 = False

@pytest.mark.xfail(strict=True)
def test_case_57():
    none_type_0 = None
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    int_0 = red_black_tree_0.__len__()
    assert int_0 == 1

def test_case_59():
    none_type_0 = None
    int_0 = -972
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    bool_1 = red_black_tree_2.is_right()
    assert bool_1 is False
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 2
    bool_2 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_2)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert f'{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_4) == 3
    int_2 = -2148
    var_0 = red_black_tree_0.floor(bool_0)
    assert var_0 is True
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert f'{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_2.insert(bool_1)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 4
    assert f'{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_6) == 3
    red_black_tree_7 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 4
    assert f'{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_7) == 4
    bool_3 = red_black_tree_4.__contains__(var_0)
    assert bool_3 is True
    red_black_tree_8 = red_black_tree_5.insert(int_2)
    assert len(red_black_tree_5) == 6
    assert f'{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_8) == 6

@pytest.mark.xfail(strict=True)
def test_case_62():
    none_type_0 = None
    bool_0 = False
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = module_0.RedBlackTree(right=red_black_tree_0)
    assert len(red_black_tree_1) == 2
    red_black_tree_2 = red_black_tree_1.insert(bool_0)
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 2
    bool_2 = True
    var_0 = red_black_tree_2.ceil(bool_2)
    red_black_tree_1.insert(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_63():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_0.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.remove(bool_0)
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert f'{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_4) == 2
    int_2 = -133
    var_1 = red_black_tree_3.ceil(int_2)
    assert var_1 == -101
    iterator_0 = red_black_tree_1.preorder_traverse()
    red_black_tree_6 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5.right) == 1
    assert f'{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_6) == 2
    red_black_tree_6.remove(iterator_0)

def test_case_64():
    none_type_0 = None
    int_0 = -981
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1

def test_case_65():
    none_type_0 = None
    int_0 = -981
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 2
    bool_3 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert f'{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_4) == 3
    red_black_tree_6 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_6) == 4

def test_case_66():
    none_type_0 = None
    int_0 = -981
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False

def test_case_67():
    none_type_0 = None
    int_0 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_0)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    int_1 = -584
    red_black_tree_3 = red_black_tree_2.insert(int_1)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert f'{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_4) == 2
    int_2 = -571
    red_black_tree_9 = red_black_tree_2.insert(int_2)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 4
    assert len(red_black_tree_7) == 1
    assert len(red_black_tree_8) == 4
    assert f'{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_9) == 3
    red_black_tree_12 = red_black_tree_4.rotate_left()
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_8) == 2
    assert len(red_black_tree_9) == 4
    assert f'{type(red_black_tree_12).__module__}.{type(red_black_tree_12).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_12) == 4
    bool_3 = red_black_tree_12.check_color_properties()
    assert bool_3 is False

@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    int_0 = -983
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 2

def test_case_69():
    none_type_0 = None
    int_0 = -981
    int_1 = -80
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_1.ceil(int_1)
    int_2 = 3062
    red_black_tree_3 = red_black_tree_1.insert(int_2)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 2
    bool_1 = True
    red_black_tree_4 = red_black_tree_1.insert(bool_1)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert f'{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_4) == 3
    int_3 = 1079
    var_1 = red_black_tree_0.floor(int_3)
    assert var_1 == -80
    bool_2 = red_black_tree_3.check_color_properties()
    assert bool_2 is False
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 2
    assert f'{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_5.insert(bool_2)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 4
    assert f'{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_6) == 4
    red_black_tree_7 = red_black_tree_3.insert(int_0)
    assert len(red_black_tree_0) == 5
    assert len(red_black_tree_1) == 5
    assert len(red_black_tree_2) == 5
    assert len(red_black_tree_3) == 5
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 5
    assert f'{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_7) == 5
    int_4 = 624
    red_black_tree_8 = red_black_tree_7.insert(int_4)
    assert len(red_black_tree_0) == 6
    assert len(red_black_tree_1) == 6
    assert len(red_black_tree_2) == 6
    assert len(red_black_tree_3) == 6
    assert len(red_black_tree_4) == 4
    assert len(red_black_tree_5) == 6
    assert len(red_black_tree_6) == 6
    assert len(red_black_tree_7) == 6
    assert f'{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_8) == 6
    var_2 = red_black_tree_4.search(var_0)
    red_black_tree_9 = red_black_tree_0.remove(bool_1)
    assert len(red_black_tree_0) == 5
    assert len(red_black_tree_1) == 5
    assert len(red_black_tree_2) == 5
    assert len(red_black_tree_3) == 5
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 5
    assert len(red_black_tree_7) == 5
    assert len(red_black_tree_8) == 5
    assert f'{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_9) == 5

def test_case_70():
    none_type_0 = None
    int_0 = -1001
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 2

def test_case_71():
    none_type_0 = None
    int_0 = -983
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    bool_2 = red_black_tree_0.is_left()
    assert bool_2 is False
    red_black_tree_2 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 2
    bool_3 = True
    red_black_tree_3 = red_black_tree_2.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 3
    int_2 = -2148

def test_case_72():
    int_0 = -541
    none_type_0 = None
    int_1 = -80
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 1
    int_2 = 3062
    red_black_tree_3 = red_black_tree_1.insert(int_2)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 2
    bool_2 = True

@pytest.mark.xfail(strict=True)
def test_case_73():
    none_type_0 = None
    int_0 = -983
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert f'{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}' == 'builtins.property'
    assert f'{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}' == 'builtins.property'
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert f'{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_1) == 1
    bool_2 = red_black_tree_0.is_left()
    assert bool_2 is False
    red_black_tree_2 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert f'{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_2) == 2
    bool_3 = True
    red_black_tree_3 = red_black_tree_2.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert f'{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}' == 'red_black_tree.RedBlackTree'
    assert len(red_black_tree_3) == 3
    int_2 = -2148