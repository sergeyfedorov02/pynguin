# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import binary_search_tree as module_0

def test_case_3():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.get_max()

@pytest.mark.xfail(strict=True)
def test_case_4():
    node_0 = module_0.Node()
    assert f'{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}' == 'builtins.property'
    binary_search_tree_0 = module_0.BinarySearchTree(node_0)
    str_0 = node_0.__repr__()
    assert str_0 == 'None'

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    binary_search_tree_0 = module_0.BinarySearchTree(bool_0)
    binary_search_tree_0.get_min()

@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.traversal_tree()
    none_type_0 = binary_search_tree_0.insert(*var_0)
    var_0.traversal_tree()

@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    binary_search_tree_0.find_kth_smallest(binary_search_tree_0, binary_search_tree_0)

@pytest.mark.xfail(strict=True)
def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    node_0 = module_0.Node()
    assert f'{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}' == 'builtins.property'

@pytest.mark.xfail(strict=True)
def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree.Node'
    list_1 = module_0.postorder(none_type_0)
    binary_search_tree_0.traversal_tree(bool_0)

def test_case_17():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree.Node'
    none_type_1 = binary_search_tree_0.remove(bool_0)
    assert binary_search_tree_0.root is None

def test_case_18():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.get_max(binary_search_tree_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'binary_search_tree.BinarySearchTree'
    assert var_0.root is None

@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    binary_search_tree_0 = module_0.BinarySearchTree(bool_0)
    binary_search_tree_0.search(binary_search_tree_0)

@pytest.mark.xfail(strict=True)
def test_case_20():
    node_0 = module_0.Node()
    assert f'{type(module_0.Node.is_right).__module__}.{type(module_0.Node.is_right).__qualname__}' == 'builtins.property'
    binary_search_tree_0 = module_0.BinarySearchTree(node_0)
    binary_search_tree_0.search(node_0)

def test_case_21():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree.Node'
    int_0 = 1465
    with pytest.raises(ValueError):
        binary_search_tree_0.remove(int_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    binary_search_tree_0 = module_0.BinarySearchTree()

@pytest.mark.xfail(strict=True)
def test_case_27():
    binary_search_tree_0 = module_0.BinarySearchTree()
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = binary_search_tree_0.insert(*list_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree.Node'
    none_type_1 = binary_search_tree_0.insert(*list_0)
    assert f'{type(var_0.right).__module__}.{type(var_0.right).__qualname__}' == 'binary_search_tree.Node'
    none_type_2 = binary_search_tree_0.remove(bool_0)
    var_1 = binary_search_tree_0.traversal_tree()
    module_0.postorder(var_1)

@pytest.mark.xfail(strict=True)
def test_case_28():
    binary_search_tree_0 = module_0.BinarySearchTree()
    str_0 = binary_search_tree_0.__str__()
    none_type_1 = binary_search_tree_0.insert(*str_0)
    assert f'{type(binary_search_tree_0.root).__module__}.{type(binary_search_tree_0.root).__qualname__}' == 'binary_search_tree.Node'
    str_1 = binary_search_tree_0.__str__()
    assert str_1 == "{'N': (None, {'o': ({'n': (e, None)}, None)})}"
    var_0.insert(*var_0)

@pytest.mark.xfail(strict=True)
def test_case_29():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.traversal_tree()
    var_2 = binary_search_tree_0.get_min(var_0)