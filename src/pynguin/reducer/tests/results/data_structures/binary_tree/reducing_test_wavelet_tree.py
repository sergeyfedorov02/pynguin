# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import wavelet_tree as module_0

@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 1456
    none_type_0 = None
    bool_0 = False

@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    module_0.build_tree(list_0)

@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    bool_0 = False
    int_0 = module_0.rank(none_type_0, bool_0, bool_0, bool_0)
    assert int_0 == 0
    module_0.range_counting(int_0, bool_0, int_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = -3309
    int_1 = 614
    list_0 = [int_0, int_1, int_0, int_1]
    var_0 = module_0.build_tree(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wavelet_tree.Node'
    assert var_0.minn == -3309
    assert var_0.maxx == 614
    assert var_0.map_left == [1, 1, 2, 2]
    assert f'{type(var_0.left).__module__}.{type(var_0.left).__qualname__}' == 'wavelet_tree.Node'
    assert f'{type(var_0.right).__module__}.{type(var_0.right).__qualname__}' == 'wavelet_tree.Node'
    module_0.rank(var_0, var_0, int_0, int_1)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    module_0.build_tree(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 1456
    none_type_0 = None
    int_1 = module_0.range_counting(none_type_0, int_0, int_0, none_type_0, none_type_0)
    assert int_1 == 0
    int_2 = -1085
    node_0 = module_0.Node(int_2)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'wavelet_tree.Node'
    assert node_0.minn == -1
    assert node_0.maxx == -1
    assert node_0.map_left == []
    assert node_0.left is None
    assert node_0.right is None
    bool_0 = False
    int_3 = module_0.quantile(node_0, int_1, bool_0, int_1)
    assert int_3 == -1
    bool_1 = False
    none_type_1 = None
    bool_2 = False
    int_5 = module_0.rank(none_type_1, int_0, bool_2, bool_2)
    assert int_5 == 0
    int_6 = -335
    int_7 = module_0.range_counting(node_0, bool_1, int_0, int_3, int_6)
    assert int_7 == 0
    module_0.quantile(int_0, int_5, bool_2, bool_2)

@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 1551
    none_type_0 = None
    int_1 = module_0.range_counting(none_type_0, int_0, int_0, none_type_0, none_type_0)
    assert int_1 == 0
    int_2 = -1085
    node_0 = module_0.Node(int_2)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'wavelet_tree.Node'
    assert node_0.minn == -1
    assert node_0.maxx == -1
    assert node_0.map_left == []
    assert node_0.left is None
    assert node_0.right is None
    bool_0 = False
    int_3 = module_0.quantile(node_0, int_1, bool_0, int_1)
    assert int_3 == -1
    str_0 = node_0.__repr__()
    assert str_0 == 'Node(min_value=-1 max_value=-1)'
    list_0 = [bool_0, int_3, int_0]
    var_0 = module_0.build_tree(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wavelet_tree.Node'
    assert var_0.minn == -1
    assert var_0.maxx == 1551
    assert var_0.map_left == [1, 2, 2]
    assert f'{type(var_0.left).__module__}.{type(var_0.left).__qualname__}' == 'wavelet_tree.Node'
    assert f'{type(var_0.right).__module__}.{type(var_0.right).__qualname__}' == 'wavelet_tree.Node'
    int_5 = module_0.quantile(var_0, int_2, int_3, int_3)
    assert int_5 == -1
    bool_2 = False
    bool_3 = True
    module_0.range_counting(str_0, str_0, bool_2, str_0, bool_3)

@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 1456
    none_type_0 = None
    int_3 = module_0.range_counting(none_type_0, int_0, int_0, none_type_0, none_type_0)
    assert int_3 == 0
    int_4 = -1085
    node_0 = module_0.Node(int_4)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'wavelet_tree.Node'
    assert node_0.minn == -1
    assert node_0.maxx == -1
    assert node_0.map_left == []
    assert node_0.left is None
    assert node_0.right is None
    bool_1 = True
    int_7 = 677
    int_8 = module_0.range_counting(node_0, bool_1, int_0, int_3, int_7)
    assert int_8 == 0
    module_0.quantile(none_type_2, none_type_2, none_type_2, str_2)

@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = 1527
    none_type_0 = None
    int_1 = module_0.range_counting(none_type_0, int_0, int_0, none_type_0, none_type_0)
    assert int_1 == 0
    node_0 = module_0.Node(int_1)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'wavelet_tree.Node'
    assert node_0.minn == -1
    assert node_0.maxx == -1
    assert node_0.map_left == []
    assert node_0.left is None
    assert node_0.right is None
    bool_0 = False
    int_2 = module_0.quantile(node_0, int_1, bool_0, int_1)
    assert int_2 == -1
    list_0 = [bool_0, int_2, int_0]
    var_0 = module_0.build_tree(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wavelet_tree.Node'
    assert var_0.minn == -1
    assert var_0.maxx == 1527
    assert var_0.map_left == [1, 2, 2]
    assert f'{type(var_0.left).__module__}.{type(var_0.left).__qualname__}' == 'wavelet_tree.Node'
    assert f'{type(var_0.right).__module__}.{type(var_0.right).__qualname__}' == 'wavelet_tree.Node'
    int_3 = module_0.rank(var_0, int_0, bool_0, bool_0)
    assert int_3 == 0
    module_0.rank_till_index(var_0, int_3, int_0)

@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = -1085
    bool_0 = False
    list_0 = [bool_0, int_0]
    var_0 = module_0.build_tree(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wavelet_tree.Node'
    assert var_0.minn == -1085
    assert var_0.maxx is False
    assert var_0.map_left == [0, 1]
    assert f'{type(var_0.left).__module__}.{type(var_0.left).__qualname__}' == 'wavelet_tree.Node'
    assert f'{type(var_0.right).__module__}.{type(var_0.right).__qualname__}' == 'wavelet_tree.Node'
    int_2 = module_0.range_counting(var_0, bool_0, bool_0, int_0, int_0)
    assert int_2 == 0

@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 1490
    none_type_0 = None
    bool_0 = False
    int_1 = -3498
    list_0 = [bool_0, int_1, int_1]
    var_0 = module_0.build_tree(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wavelet_tree.Node'
    assert var_0.minn == -3498
    assert var_0.maxx is False
    assert var_0.map_left == [0, 1, 2]
    assert f'{type(var_0.left).__module__}.{type(var_0.left).__qualname__}' == 'wavelet_tree.Node'
    assert f'{type(var_0.right).__module__}.{type(var_0.right).__qualname__}' == 'wavelet_tree.Node'
    int_3 = module_0.range_counting(none_type_0, int_0, int_0, none_type_0, none_type_0)
    assert int_3 == 0
    bool_1 = False
    int_4 = module_0.quantile(var_0, int_3, bool_1, int_3)
    assert int_4 is False
    module_0.range_counting(var_0, bool_1, int_0, int_4, int_4)

@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = -1861
    bool_0 = False
    list_0 = [int_0, bool_0, int_0]
    var_0 = module_0.build_tree(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wavelet_tree.Node'
    assert var_0.minn == -1861
    assert var_0.maxx is False
    assert var_0.map_left == [1, 1, 2]
    assert f'{type(var_0.left).__module__}.{type(var_0.left).__qualname__}' == 'wavelet_tree.Node'
    assert f'{type(var_0.right).__module__}.{type(var_0.right).__qualname__}' == 'wavelet_tree.Node'
    module_0.quantile(var_0, bool_0, int_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = -1085
    bool_0 = True
    list_0 = [bool_0, int_0]
    var_0 = module_0.build_tree(list_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'wavelet_tree.Node'
    assert var_0.minn == -1085
    assert var_0.maxx is True
    assert var_0.map_left == [0, 1]
    assert f'{type(var_0.left).__module__}.{type(var_0.left).__qualname__}' == 'wavelet_tree.Node'
    assert f'{type(var_0.right).__module__}.{type(var_0.right).__qualname__}' == 'wavelet_tree.Node'
    int_1 = module_0.rank(var_0, bool_0, bool_0, bool_0)
    assert int_1 == 0
    node_0 = module_0.Node(int_1)
    assert node_0.minn == -1
    assert node_0.maxx == -1
    assert node_0.map_left == []
    int_2 = module_0.range_counting(var_0, bool_0, bool_0, int_0, int_0)
    assert int_2 == 1
    none_type_0 = None