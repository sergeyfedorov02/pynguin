# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import distribute_coins as module_0
import builtins as module_1
import dataclasses as module_2


def test_case_0():
    none_type_0 = None
    int_0 = module_0.distribute_coins(none_type_0)
    assert int_0 == 0
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -3951
    tree_node_0 = module_0.TreeNode(int_0)
    module_0.distribute_coins(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    tree_node_0 = module_0.TreeNode(bool_0, none_type_0)
    var_0 = tree_node_0.__eq__(bool_0)
    var_1 = tree_node_0.__repr__()
    tree_node_1 = module_0.TreeNode(bool_0)
    var_2 = tree_node_1.__eq__(bool_0)
    var_3 = tree_node_1.__repr__()
    var_4 = var_3.__repr__()
    var_5 = var_4.__repr__()
    complex_0 = -978 + 1726.903423j
    var_6 = var_4.__eq__(var_4)
    bool_1 = False
    int_0 = -996
    var_7 = var_6.__repr__()
    tuple_0 = (complex_0, bool_1, int_0, var_5)
    var_8 = var_7.__repr__()
    int_1 = module_0.distribute_coins(tree_node_1)
    assert int_1 == 0
    var_9 = var_5.__repr__()
    var_10 = var_8.__eq__(var_3)
    module_2.dataclass(var_5, unsafe_hash=tuple_0)


def test_case_3():
    bool_0 = False
    tree_node_0 = module_0.TreeNode(bool_0)
    bytes_0 = b""
    none_type_0 = None
    int_0 = module_0.distribute_coins(none_type_0)
    assert int_0 == 0
    tree_node_1 = module_0.TreeNode(bytes_0)
    with pytest.raises(ValueError):
        module_0.distribute_coins(tree_node_0)
