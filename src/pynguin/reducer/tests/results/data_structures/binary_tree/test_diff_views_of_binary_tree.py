# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import diff_views_of_binary_tree as module_0
import dataclasses as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    tree_node_0 = module_0.make_tree()
    assert tree_node_0.val == 3
    list_0 = module_0.binary_tree_right_side_view(tree_node_0)
    list_1 = module_0.binary_tree_right_side_view(tree_node_0)
    list_2 = module_0.binary_tree_bottom_side_view(tree_node_0)
    module_0.binary_tree_top_side_view(list_0)


def test_case_1():
    bool_0 = False
    list_0 = module_0.binary_tree_top_side_view(bool_0)
    list_1 = module_0.binary_tree_right_side_view(list_0)
    tree_node_0 = module_0.TreeNode(bool_0)
    var_0 = tree_node_0.__eq__(list_0)
    tree_node_1 = module_0.make_tree()
    assert tree_node_1.val == 3
    list_2 = module_0.binary_tree_left_side_view(tree_node_1)
    var_1 = tree_node_1.__eq__(tree_node_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    tree_node_0 = module_0.make_tree()
    assert tree_node_0.val == 3
    var_0 = tree_node_0.__eq__(dict_0)
    module_0.binary_tree_left_side_view(var_0)


def test_case_3():
    none_type_0 = None
    list_0 = module_0.binary_tree_bottom_side_view(none_type_0)
    list_1 = module_0.binary_tree_bottom_side_view(list_0)
    list_2 = module_0.binary_tree_left_side_view(none_type_0)
    list_3 = module_0.binary_tree_right_side_view(list_1)
    tree_node_0 = module_0.make_tree()
    assert tree_node_0.val == 3
    var_0 = tree_node_0.__repr__()
    assert (
        var_0
        == "TreeNode(val=3, left=TreeNode(val=9, left=None, right=None), right=TreeNode(val=20, left=TreeNode(val=15, left=None, right=None), right=TreeNode(val=7, left=None, right=None)))"
    )
    var_1 = var_0.__eq__(tree_node_0)
    list_4 = module_0.binary_tree_bottom_side_view(tree_node_0)
    var_2 = tree_node_0.__eq__(none_type_0)
    tree_node_1 = module_0.make_tree()
    assert tree_node_1.val == 3
    tree_node_2 = module_0.make_tree()
    assert tree_node_2.val == 3
    var_3 = tree_node_2.__repr__()
    assert (
        var_3
        == "TreeNode(val=3, left=TreeNode(val=9, left=None, right=None), right=TreeNode(val=20, left=TreeNode(val=15, left=None, right=None), right=TreeNode(val=7, left=None, right=None)))"
    )
    dict_0 = {}
    var_4 = module_1.dataclass(unsafe_hash=dict_0, frozen=list_0, slots=tree_node_2)
    var_5 = var_4.__repr__()


def test_case_4():
    tree_node_0 = module_0.make_tree()
    assert tree_node_0.val == 3
    list_0 = module_0.binary_tree_top_side_view(tree_node_0)


def test_case_5():
    tree_node_0 = module_0.make_tree()
    assert tree_node_0.val == 3
    list_0 = module_0.binary_tree_bottom_side_view(tree_node_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    list_0 = module_0.binary_tree_bottom_side_view(none_type_0)
    bool_0 = True
    tree_node_0 = module_0.TreeNode(bool_0)
    var_0 = tree_node_0.__repr__()
    tree_node_1 = module_0.make_tree()
    assert tree_node_1.val == 3
    var_1 = tree_node_1.__eq__(tree_node_0)
    list_1 = module_0.binary_tree_left_side_view(tree_node_0)
    list_2 = module_0.binary_tree_bottom_side_view(tree_node_0)
    var_2 = var_1.__repr__()
    module_0.binary_tree_right_side_view(var_2)
