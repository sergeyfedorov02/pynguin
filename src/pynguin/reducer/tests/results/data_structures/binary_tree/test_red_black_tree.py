# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import red_black_tree as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -1040.9977802858484
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_1.remove(float_0)


def test_case_1():
    float_0 = -1040.39
    bool_0 = False
    int_0 = -2176
    bool_1 = True
    red_black_tree_0 = module_0.RedBlackTree(color=bool_1)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    bool_2 = red_black_tree_1.is_right()
    assert bool_2 is False
    red_black_tree_2 = red_black_tree_1.remove(bool_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.insert(float_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    var_0 = red_black_tree_3.black_height()
    assert var_0 == 1
    red_black_tree_4 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_5 = red_black_tree_2.rotate_left()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 2
    var_1 = red_black_tree_5.get_max()
    assert var_1 == pytest.approx(-1040.39, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -1040.9977802858484
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_1.remove(float_0)


def test_case_3():
    none_type_0 = None
    bool_0 = False
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.is_left()
    assert bool_1 is False
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = module_0.RedBlackTree(
        none_type_0, none_type_0, left=red_black_tree_1
    )
    assert len(red_black_tree_2) == 2
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_3 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 1
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    var_0 = red_black_tree_0.search(bool_1)
    var_1 = red_black_tree_2.black_height()
    assert var_1 == 1
    bool_2 = red_black_tree_3.check_color_properties()
    assert bool_2 is True
    bool_3 = red_black_tree_2.__eq__(red_black_tree_2)
    assert bool_3 is True
    red_black_tree_4 = red_black_tree_2.remove(bool_0)
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2


def test_case_4():
    bytes_0 = b"\x8br\xe3\xed\tR\x18\x0f\xda\xb2,Q"
    int_0 = 1612
    red_black_tree_0 = module_0.RedBlackTree(color=int_0, right=int_0)
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(bytes_0)
    assert red_black_tree_0.label == b"\x8br\xe3\xed\tR\x18\x0f\xda\xb2,Q"
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert red_black_tree_1.label == b"\x8br\xe3\xed\tR\x18\x0f\xda\xb2,Q"
    assert red_black_tree_1.parent is None
    assert red_black_tree_1.left is None
    assert red_black_tree_1.right == 1612
    assert red_black_tree_1.color == 1612
    str_0 = red_black_tree_1.__repr__()
    assert (
        str_0
        == "{\"b'\\\\x8br\\\\xe3\\\\xed\\\\tR\\\\x18\\\\x0f\\\\xda\\\\xb2,Q' red\": (None, 1612)}"
    )


def test_case_5():
    float_0 = -1040.39
    bool_0 = False
    int_0 = -2176
    bool_1 = True
    red_black_tree_0 = module_0.RedBlackTree(color=bool_1)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.remove(bool_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.insert(float_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    var_0 = red_black_tree_3.black_height()
    assert var_0 == 1
    int_1 = module_0.color(red_black_tree_2)
    assert int_1 is True


def test_case_6():
    bool_0 = False
    float_0 = 1828.637
    bool_1 = False
    bool_2 = False
    red_black_tree_0 = module_0.RedBlackTree(right=bool_2)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.remove(bool_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.remove(float_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.insert(bool_0)
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    iterator_0 = red_black_tree_3.postorder_traverse()


def test_case_7():
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_color_properties()
    assert bool_0 is True


def test_case_8():
    red_black_tree_0 = module_0.RedBlackTree()
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True


def test_case_9():
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree()
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.__contains__(none_type_0)
    assert bool_0 is True


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 1770
    red_black_tree_0 = module_0.RedBlackTree(color=int_0, right=int_0)
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    var_0 = red_black_tree_0.search(int_0)
    bool_0 = red_black_tree_0.__eq__(var_0)
    var_0.black_height()


def test_case_11():
    none_type_0 = None
    bool_0 = True
    none_type_1 = None
    red_black_tree_0 = module_0.RedBlackTree(none_type_1, none_type_1)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.remove(bool_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_1.search(bool_0)
    var_1 = red_black_tree_1.search(none_type_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_1) == 1
    str_0 = var_1.__repr__()
    assert str_0 == "'None blk'"
    red_black_tree_2 = var_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    int_0 = -1194
    red_black_tree_3 = module_0.RedBlackTree(color=int_0)
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.rotate_right()
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    var_2 = red_black_tree_4.floor(red_black_tree_2)


def test_case_12():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    var_1 = red_black_tree_4.search(bool_1)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_1) == 1
    int_2 = 624
    red_black_tree_5 = red_black_tree_0.insert(int_2)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 4
    assert len(var_1) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 4


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    var_0 = red_black_tree_0.black_height()
    assert var_0 == 1
    none_type_1 = None
    red_black_tree_1 = module_0.RedBlackTree(parent=red_black_tree_0)
    assert len(red_black_tree_1) == 1
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_2 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    var_1 = red_black_tree_1.ceil(red_black_tree_2)
    var_1.remove(none_type_1)


def test_case_14():
    none_type_0 = None
    int_0 = module_0.color(none_type_0)
    assert int_0 == 0
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.__bool__()
    var_0 = red_black_tree_0.get_max()
    int_1 = red_black_tree_0.__len__()
    assert int_1 == 1
    int_2 = -182
    bool_1 = red_black_tree_0.__contains__(int_2)
    assert bool_1 is False
    red_black_tree_1 = module_0.RedBlackTree(none_type_0, int_2, right=none_type_0)
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = module_0.RedBlackTree(color=red_black_tree_1)
    assert len(red_black_tree_2) == 1


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    bool_0 = False
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert len(red_black_tree_2) == 1
    var_0 = red_black_tree_2.get_min()
    red_black_tree_3 = module_0.RedBlackTree(bool_0)
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.rotate_right()
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    red_black_tree_4.remove(none_type_0)


def test_case_16():
    none_type_0 = None
    int_0 = module_0.color(none_type_0)
    assert int_0 == 0
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree()
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.remove(bool_0)
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.remove(int_0)
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = red_black_tree_4.rotate_left()
    assert len(red_black_tree_5) == 1
    red_black_tree_6 = red_black_tree_5.rotate_left()
    assert len(red_black_tree_6) == 1
    bool_1 = red_black_tree_6.is_left()
    assert bool_1 is False
    red_black_tree_7 = module_0.RedBlackTree()
    assert len(red_black_tree_7) == 1


@pytest.mark.xfail(strict=True)
def test_case_17():
    int_0 = -513
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_0.get_min()
    red_black_tree_2 = red_black_tree_1.insert(bool_1)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_0.is_right()
    assert bool_2 is False
    red_black_tree_3 = red_black_tree_2.rotate_right()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.insert(bool_0)
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = module_0.RedBlackTree(
        parent=int_0, left=none_type_0, right=red_black_tree_4
    )
    assert len(red_black_tree_5) == 2
    red_black_tree_6 = red_black_tree_5.rotate_right()
    assert len(red_black_tree_6) == 2
    red_black_tree_6.is_right()


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_1.search(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_0) == 1
    red_black_tree_2 = var_0.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.insert(none_type_0)
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.rotate_right()
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    var_1 = red_black_tree_4.search(none_type_0)
    assert len(var_1) == 1
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    int_0 = -504
    red_black_tree_5 = module_0.RedBlackTree(color=int_0)
    assert len(red_black_tree_5) == 1
    int_1 = 1390
    var_2 = red_black_tree_5.black_height()
    assert var_2 == 1
    red_black_tree_6 = red_black_tree_5.rotate_right()
    assert len(red_black_tree_6) == 1
    red_black_tree_7 = red_black_tree_5.remove(none_type_0)
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 1
    iterator_0 = red_black_tree_7.preorder_traverse()
    int_2 = red_black_tree_5.__len__()
    assert int_2 == 1
    var_3 = red_black_tree_5.get_max()
    red_black_tree_8 = red_black_tree_6.rotate_right()
    assert len(red_black_tree_8) == 1
    str_0 = red_black_tree_8.__repr__()
    assert str_0 == "'None red'"
    var_4 = red_black_tree_6.ceil(int_1)
    red_black_tree_9 = module_0.RedBlackTree(
        color=red_black_tree_5, parent=red_black_tree_5, right=red_black_tree_5
    )
    assert len(red_black_tree_9) == 2
    var_5 = red_black_tree_9.search(set_0)
    red_black_tree_10 = red_black_tree_8.rotate_right()
    assert len(red_black_tree_10) == 1
    int_3 = red_black_tree_9.__len__()
    assert int_3 == 2
    red_black_tree_11 = red_black_tree_6.rotate_right()
    assert len(red_black_tree_11) == 1
    var_5.rotate_right()


def test_case_19():
    none_type_0 = None
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    var_0 = red_black_tree_0.black_height()
    assert var_0 == 1
    float_0 = -1040.9977802858484
    none_type_1 = None
    red_black_tree_1 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_1)
    assert len(red_black_tree_1) == 1
    bool_1 = red_black_tree_1.__eq__(red_black_tree_0)
    assert bool_1 is False
    iterator_0 = red_black_tree_1.preorder_traverse()
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    var_1 = red_black_tree_0.search(red_black_tree_0)
    int_0 = -2280
    red_black_tree_3 = red_black_tree_1.insert(int_0)
    assert red_black_tree_3 == pytest.approx(-1040.9977802858484, abs=0.01, rel=0.01)
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    bool_2 = red_black_tree_1.check_coloring()
    assert bool_2 is True


def test_case_20():
    int_0 = 1244
    float_0 = -1906.01043
    red_black_tree_0 = module_0.RedBlackTree(parent=float_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.insert(int_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_3) == 1
    int_1 = module_0.color(red_black_tree_3)
    assert int_1 == 0


def test_case_21():
    red_black_tree_0 = module_0.RedBlackTree()
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )


def test_case_22():
    none_type_0 = None
    int_0 = -981
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.rotate_left()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_1.insert(int_0)
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = red_black_tree_3.rotate_right()
    assert len(red_black_tree_5) == 1
    red_black_tree_6 = module_0.RedBlackTree(
        parent=red_black_tree_0, left=none_type_0, right=none_type_0
    )
    assert len(red_black_tree_6) == 1
    red_black_tree_7 = red_black_tree_0.rotate_right()
    assert len(red_black_tree_7) == 1
    var_0 = red_black_tree_0.black_height()
    assert var_0 == 1
    var_1 = red_black_tree_1.black_height()
    assert var_1 == 1
    red_black_tree_8 = red_black_tree_6.remove(none_type_0)
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 1


def test_case_23():
    float_0 = -1040.9977802858484
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    int_0 = module_0.color(red_black_tree_0)
    assert int_0 == 0
    var_0 = red_black_tree_0.black_height()
    assert var_0 == 1
    int_1 = -2281
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_0.insert(int_1)
    assert red_black_tree_3 == pytest.approx(-1040.9977802858484, abs=0.01, rel=0.01)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    bool_0 = red_black_tree_2.check_coloring()
    assert bool_0 is True


def test_case_24():
    none_type_0 = None
    bool_0 = False
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.is_left()
    assert bool_1 is False
    red_black_tree_1 = module_0.RedBlackTree(right=red_black_tree_0)
    assert len(red_black_tree_1) == 2
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 2
    bool_2 = red_black_tree_0.check_coloring()
    assert bool_2 is True
    red_black_tree_3 = red_black_tree_2.rotate_left()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_0.insert(bool_1)
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    red_black_tree_5 = module_0.RedBlackTree(left=bool_1)
    assert len(red_black_tree_5) == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'False blk': ('None blk', None)}"
    iterator_0 = red_black_tree_4.preorder_traverse()
    iterator_1 = red_black_tree_1.preorder_traverse()
    red_black_tree_6 = red_black_tree_1.rotate_right()
    assert len(red_black_tree_6) == 1
    var_0 = red_black_tree_5.black_height()
    assert var_0 == 1
    bool_3 = False
    red_black_tree_7 = red_black_tree_3.remove(bool_3)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 1


@pytest.mark.xfail(strict=True)
def test_case_25():
    float_0 = 4627.7093
    bool_0 = False
    int_0 = 867
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(float_0, left=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.remove(int_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.rotate_left()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    var_0 = red_black_tree_3.search(bool_0)
    var_0.insert(float_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.__contains__(red_black_tree_0)
    assert bool_0 is False
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_0.rotate_right()
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = red_black_tree_1.insert(bool_0)
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 1
    red_black_tree_6 = red_black_tree_5.rotate_left()
    assert len(red_black_tree_6) == 1
    var_0 = red_black_tree_5.get_min()
    assert var_0 is False
    red_black_tree_7 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_7) == 1
    red_black_tree_8 = red_black_tree_7.rotate_left()
    assert len(red_black_tree_8) == 1
    red_black_tree_9 = red_black_tree_8.rotate_left()
    assert len(red_black_tree_9) == 1
    red_black_tree_10 = red_black_tree_4.rotate_left()
    assert len(red_black_tree_10) == 1
    bool_1 = True
    var_1 = red_black_tree_10.floor(bool_1)
    assert var_1 is False
    var_2 = red_black_tree_2.get_min()
    assert var_2 is False
    str_0 = red_black_tree_9.__repr__()
    assert str_0 == "'False blk'"
    red_black_tree_4.ceil(red_black_tree_7)


@pytest.mark.xfail(strict=True)
def test_case_27():
    float_0 = -1040.9977802858484
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = True
    var_0 = red_black_tree_0.ceil(bool_0)
    red_black_tree_1 = module_0.RedBlackTree(var_0, none_type_0, right=var_0)
    assert len(red_black_tree_1) == 1
    red_black_tree_0.search(none_type_0)


def test_case_28():
    float_0 = 385.0
    red_black_tree_0 = module_0.RedBlackTree(right=float_0)
    assert red_black_tree_0.color == 0
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'None blk': (None, 385.0)}"
    int_0 = 1441
    list_0 = [int_0, int_0, int_0]
    bool_0 = False
    red_black_tree_1 = module_0.RedBlackTree(list_0, bool_0)
    assert len(red_black_tree_1) == 1
    iterator_0 = red_black_tree_1.preorder_traverse()
    str_1 = red_black_tree_1.__repr__()
    assert str_1 == "'[1441, 1441, 1441] blk'"
    bool_1 = red_black_tree_1.check_coloring()
    assert bool_1 is True


def test_case_29():
    int_0 = -561
    float_0 = -371.4
    red_black_tree_0 = module_0.RedBlackTree(color=float_0, left=int_0)
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_color_properties()
    assert bool_0 is False
    bool_1 = True
    none_type_0 = None
    red_black_tree_1 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.insert(bool_1)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = True
    bool_3 = False
    var_0 = red_black_tree_1.ceil(bool_3)
    assert var_0 is True
    red_black_tree_3 = module_0.RedBlackTree()
    assert len(red_black_tree_3) == 1
    iterator_0 = red_black_tree_1.preorder_traverse()
    red_black_tree_4 = red_black_tree_2.rotate_right()
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    var_1 = red_black_tree_4.search(bool_2)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_1) == 1
    var_2 = red_black_tree_1.black_height()
    assert var_2 == 1
    bool_4 = red_black_tree_1.check_color_properties()
    assert bool_4 is True
    red_black_tree_5 = red_black_tree_2.insert(bool_1)
    assert len(red_black_tree_5) == 1
    bool_5 = var_1.__eq__(red_black_tree_5)
    assert bool_5 is True
    red_black_tree_6 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert red_black_tree_6.label is None
    assert red_black_tree_6.parent is None
    assert red_black_tree_6.left == -561
    assert red_black_tree_6.right is None
    assert red_black_tree_6.color == pytest.approx(-371.4, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_30():
    int_0 = 2482
    red_black_tree_0 = module_0.RedBlackTree(color=int_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.__eq__(int_0)
    red_black_tree_1 = red_black_tree_0.remove(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    bool_1 = True
    red_black_tree_2 = module_0.RedBlackTree(color=bool_1)
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_2.rotate_right()
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = module_0.RedBlackTree(
        left=red_black_tree_1, right=red_black_tree_2
    )
    assert len(red_black_tree_5) == 3
    str_0 = red_black_tree_3.__repr__()
    assert str_0 == "'2482 red'"
    str_1 = red_black_tree_2.__repr__()
    assert str_1 == "'None red'"
    red_black_tree_5.ceil(str_1)


def test_case_31():
    float_0 = -1040.9977802858484
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    int_0 = 1982
    red_black_tree_2 = module_0.RedBlackTree(color=int_0)
    assert len(red_black_tree_2) == 1
    str_0 = red_black_tree_2.__repr__()
    assert str_0 == "'None red'"
    red_black_tree_3 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_3) == 1


def test_case_32():
    none_type_0 = None
    bool_0 = True
    int_0 = 1918
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.rotate_left()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    int_1 = -2145
    red_black_tree_4 = module_0.RedBlackTree(
        parent=red_black_tree_0, left=none_type_0, right=none_type_0
    )
    assert len(red_black_tree_4) == 1
    iterator_0 = red_black_tree_3.preorder_traverse()
    red_black_tree_5 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 2
    int_2 = 624
    red_black_tree_6 = red_black_tree_2.insert(int_2)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_5) == 1
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    var_0 = red_black_tree_1.search(bool_0)
    bool_1 = red_black_tree_0.__eq__(int_1)


def test_case_33():
    int_0 = -801
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(
        int_0, int_0, none_type_0, right=none_type_0
    )
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.remove(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = module_0.RedBlackTree(int_0, right=red_black_tree_1)
    assert len(red_black_tree_2) == 2
    red_black_tree_3 = red_black_tree_2.remove(int_0)
    assert len(red_black_tree_2) == 1
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    str_0 = red_black_tree_3.__repr__()
    assert str_0 == "'None blk'"
    red_black_tree_4 = module_0.RedBlackTree(color=int_0)
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 1
    var_0 = red_black_tree_5.get_min()


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = False
    float_0 = 885.94138
    red_black_tree_0 = module_0.RedBlackTree()
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(bool_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_1.search(float_0)
    var_0.search(bool_0)


def test_case_35():
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(
        none_type_0, parent=none_type_0, right=none_type_0
    )
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_0.search(red_black_tree_0)
    red_black_tree_2 = red_black_tree_1.remove(none_type_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1


def test_case_36():
    none_type_0 = None
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    var_0 = red_black_tree_0.black_height()
    assert var_0 == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "'None red'"
    float_0 = -1040.9977802858484
    int_0 = red_black_tree_0.__len__()
    assert int_0 == 1
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    var_1 = red_black_tree_0.search(red_black_tree_0)
    bool_1 = red_black_tree_1.check_color_properties()
    assert bool_1 is False
    red_black_tree_2 = red_black_tree_1.remove(float_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1


def test_case_37():
    none_type_0 = None
    bool_0 = False
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.is_left()
    assert bool_1 is False
    float_0 = -1026.8686123222988
    none_type_1 = None
    bool_2 = False
    var_0 = red_black_tree_0.ceil(bool_2)
    red_black_tree_1 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_1)
    assert len(red_black_tree_1) == 1
    iterator_0 = red_black_tree_1.preorder_traverse()
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    var_1 = red_black_tree_1.insert(bool_2)
    assert var_1 == pytest.approx(-1026.8686123222988, abs=0.01, rel=0.01)
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    var_2 = red_black_tree_2.black_height()
    assert var_2 == 1
    bool_3 = red_black_tree_1.check_color_properties()
    assert bool_3 is True
    bool_4 = var_1.__eq__(var_1)
    red_black_tree_3 = red_black_tree_2.remove(float_0)
    assert red_black_tree_3 == pytest.approx(-1026.8686123222988, abs=0.01, rel=0.01)
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1


def test_case_38():
    none_type_0 = None
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    var_0 = red_black_tree_0.black_height()
    assert var_0 == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "'None red'"
    int_0 = red_black_tree_0.__len__()
    assert int_0 == 1
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = module_0.RedBlackTree(left=str_0, right=red_black_tree_1)
    assert len(red_black_tree_2) == 12
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_3 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    var_1 = red_black_tree_0.search(bool_0)
    bool_1 = red_black_tree_0.check_color_properties()
    assert bool_1 is False
    red_black_tree_4 = red_black_tree_3.remove(none_type_0)
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1


def test_case_39():
    none_type_0 = None
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.is_left()
    assert bool_1 is False
    red_black_tree_1 = module_0.RedBlackTree(right=red_black_tree_0)
    assert len(red_black_tree_1) == 2
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 2
    bool_2 = red_black_tree_0.check_coloring()
    assert bool_2 is True
    red_black_tree_3 = red_black_tree_0.insert(bool_2)
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_0.insert(bool_1)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 2
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    red_black_tree_5 = module_0.RedBlackTree(left=bool_1)
    assert len(red_black_tree_5) == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'True red': ('False red', None)}"
    iterator_0 = red_black_tree_4.preorder_traverse()
    iterator_1 = red_black_tree_0.inorder_traverse()
    red_black_tree_6 = red_black_tree_1.rotate_right()
    assert len(red_black_tree_6) == 3
    var_0 = red_black_tree_5.black_height()
    assert var_0 == 1
    bool_3 = False
    red_black_tree_7 = red_black_tree_3.remove(bool_3)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_6) == 2
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 1


def test_case_40():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.rotate_left()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.remove(bool_0)
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = red_black_tree_4.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 2
    red_black_tree_6 = module_0.RedBlackTree(
        parent=red_black_tree_0, left=none_type_0, right=none_type_0
    )
    assert len(red_black_tree_6) == 1
    int_2 = 624
    red_black_tree_7 = red_black_tree_2.insert(int_2)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 3
    var_0 = red_black_tree_1.search(bool_0)
    var_1 = red_black_tree_0.black_height()
    assert var_1 == 2
    bool_1 = red_black_tree_0.check_color_properties()
    assert bool_1 is True
    red_black_tree_8 = red_black_tree_5.remove(int_2)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(red_black_tree_7) == 2
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 2


def test_case_41():
    none_type_0 = None
    bool_0 = False
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.is_left()
    assert bool_1 is False
    red_black_tree_1 = module_0.RedBlackTree(right=red_black_tree_0)
    assert len(red_black_tree_1) == 2
    red_black_tree_2 = red_black_tree_1.insert(bool_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 2
    red_black_tree_3 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_2.rotate_left()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    red_black_tree_5 = red_black_tree_0.insert(bool_1)
    assert len(red_black_tree_5) == 2
    red_black_tree_6 = module_0.RedBlackTree(left=bool_1)
    assert len(red_black_tree_6) == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'False blk': ('False blk', None)}"
    iterator_0 = red_black_tree_1.preorder_traverse()
    red_black_tree_7 = red_black_tree_1.rotate_right()
    assert len(red_black_tree_7) == 1
    var_0 = red_black_tree_6.black_height()
    assert var_0 == 1
    var_1 = red_black_tree_2.black_height()
    assert var_1 == 1
    red_black_tree_8 = red_black_tree_3.remove(bool_0)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 1
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 1


def test_case_42():
    none_type_0 = None
    bool_0 = False
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.is_left()
    assert bool_1 is False
    red_black_tree_1 = module_0.RedBlackTree(right=red_black_tree_0)
    assert len(red_black_tree_1) == 2
    red_black_tree_2 = red_black_tree_1.insert(bool_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 2
    red_black_tree_3 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_2.rotate_left()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    red_black_tree_5 = red_black_tree_0.insert(bool_1)
    assert len(red_black_tree_5) == 2
    red_black_tree_6 = module_0.RedBlackTree(left=bool_1)
    assert len(red_black_tree_6) == 1
    iterator_0 = red_black_tree_1.preorder_traverse()
    red_black_tree_7 = red_black_tree_1.rotate_right()
    assert len(red_black_tree_7) == 1
    var_0 = red_black_tree_6.black_height()
    assert var_0 == 1
    var_1 = red_black_tree_2.black_height()
    assert var_1 == 1
    red_black_tree_8 = red_black_tree_3.remove(bool_0)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 1
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 1


def test_case_43():
    none_type_0 = None
    int_0 = -972
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_1 = red_black_tree_2.is_right()
    assert bool_1 is False
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'-101 blk': ('-972 red', None)}"
    bool_2 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_2)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    int_2 = -2148
    var_0 = red_black_tree_0.floor(bool_0)
    assert var_0 is True
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_2.insert(bool_1)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 4
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    red_black_tree_7 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 4
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    bool_3 = red_black_tree_4.__contains__(var_0)
    assert bool_3 is True
    bool_4 = red_black_tree_0.check_color_properties()
    assert bool_4 is True
    red_black_tree_8 = red_black_tree_5.insert(int_2)
    assert len(red_black_tree_5) == 6
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 6
    var_1 = red_black_tree_8.get_max()
    assert var_1 is True
    bool_5 = red_black_tree_7.check_color_properties()
    assert bool_5 is False
    red_black_tree_9 = red_black_tree_6.remove(bool_3)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 1
    assert len(red_black_tree_7) == 1
    assert len(red_black_tree_8) == 5
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 3


def test_case_44():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.remove(bool_0)
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_4 = red_black_tree_3.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    red_black_tree_5 = module_0.RedBlackTree(
        parent=red_black_tree_0, left=none_type_0, right=none_type_0
    )
    assert len(red_black_tree_5) == 1
    red_black_tree_6 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    var_1 = red_black_tree_4.black_height()
    assert var_1 == 2
    red_black_tree_7 = red_black_tree_3.remove(var_1)
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 3


def test_case_45():
    float_0 = -1040.39
    bool_0 = False
    int_0 = -2176
    bool_1 = True
    red_black_tree_0 = module_0.RedBlackTree(color=bool_1)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    bool_2 = red_black_tree_1.is_right()
    assert bool_2 is False
    red_black_tree_2 = red_black_tree_1.remove(bool_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.insert(float_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    var_0 = red_black_tree_3.black_height()
    assert var_0 == 1
    red_black_tree_4 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_5 = red_black_tree_2.rotate_left()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 2
    red_black_tree_6 = red_black_tree_3.insert(bool_1)
    assert len(red_black_tree_5) == 1
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    var_1 = red_black_tree_5.get_max()
    assert var_1 == pytest.approx(-1040.39, abs=0.01, rel=0.01)


def test_case_46():
    none_type_0 = None
    int_0 = 3063
    bool_0 = True
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    var_1 = red_black_tree_4.search(bool_1)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_1) == 3
    int_2 = 624
    red_black_tree_5 = red_black_tree_0.insert(int_2)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 4
    assert len(var_1) == 4
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 4
    var_2 = red_black_tree_0.black_height()
    assert var_2 == 1
    red_black_tree_6 = red_black_tree_3.remove(int_1)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 3
    assert len(var_1) == 3
    assert len(red_black_tree_5) == 3
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3


def test_case_47():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    var_1 = red_black_tree_4.search(bool_1)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_1) == 1
    int_2 = 624
    red_black_tree_5 = red_black_tree_0.insert(int_2)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 4
    assert len(var_1) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 4
    var_2 = red_black_tree_0.black_height()
    assert var_2 == 2
    red_black_tree_6 = red_black_tree_3.remove(int_1)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3


def test_case_48():
    float_0 = -1026.8686123222988
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(float_0, parent=float_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    iterator_0 = red_black_tree_0.preorder_traverse()
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_1.black_height()
    assert var_0 == 1
    var_1 = red_black_tree_0.black_height()
    assert var_1 == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "'-1026.8686123222988 blk'"
    red_black_tree_2 = red_black_tree_0.insert(var_0)
    assert red_black_tree_2 == pytest.approx(-1026.8686123222988, abs=0.01, rel=0.01)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True


def test_case_49():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = 1918
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.rotate_left()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_2.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    int_2 = -2145
    red_black_tree_5 = module_0.RedBlackTree(
        parent=red_black_tree_0, left=none_type_0, right=none_type_0
    )
    assert len(red_black_tree_5) == 1
    iterator_0 = red_black_tree_4.preorder_traverse()
    red_black_tree_6 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    int_3 = 624
    red_black_tree_7 = red_black_tree_2.insert(int_3)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_6) == 4
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    var_0 = red_black_tree_1.search(bool_0)
    bool_1 = red_black_tree_0.__eq__(int_2)


def test_case_50():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(bool_1, none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_right()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    var_0 = red_black_tree_2.search(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_0) == 1
    bool_2 = False
    red_black_tree_3 = module_0.RedBlackTree(
        color=bool_2, parent=none_type_0, left=bool_0
    )
    assert len(red_black_tree_3) == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "'False blk'"
    str_1 = var_0.__repr__()
    assert str_1 == "'False blk'"
    bool_3 = False
    var_1 = red_black_tree_0.get_max()
    assert var_1 is False
    int_0 = -2176
    red_black_tree_4 = module_0.RedBlackTree(right=red_black_tree_0)
    assert len(red_black_tree_4) == 2
    bool_4 = True
    red_black_tree_5 = red_black_tree_2.insert(bool_4)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(var_0) == 2
    assert len(red_black_tree_4) == 3
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 2
    red_black_tree_6 = module_0.RedBlackTree()
    assert len(red_black_tree_6) == 1
    red_black_tree_7 = red_black_tree_4.remove(int_0)
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 3
    red_black_tree_8 = red_black_tree_7.insert(bool_3)
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 3
    bool_5 = red_black_tree_4.__bool__()
    iterator_0 = red_black_tree_2.inorder_traverse()
    bool_6 = False
    red_black_tree_9 = red_black_tree_7.remove(bool_6)
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_7) == 2
    assert len(red_black_tree_8) == 2
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 2
    bool_7 = red_black_tree_3.__eq__(bool_3)
    bool_8 = True
    red_black_tree_10 = red_black_tree_7.insert(bool_8)
    assert (
        f"{type(red_black_tree_10).__module__}.{type(red_black_tree_10).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_10) == 2
    var_2 = red_black_tree_6.black_height()
    assert var_2 == 1
    red_black_tree_11 = red_black_tree_0.rotate_right()
    assert len(red_black_tree_11) == 2
    iterator_1 = red_black_tree_5.preorder_traverse()
    red_black_tree_12 = red_black_tree_8.remove(bool_1)
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_7) == 1
    assert len(red_black_tree_8) == 1
    assert len(red_black_tree_9) == 1
    assert len(red_black_tree_10) == 1
    assert (
        f"{type(red_black_tree_12).__module__}.{type(red_black_tree_12).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_12) == 1
    int_1 = module_0.color(red_black_tree_12)
    assert int_1 == 0


def test_case_51():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_1 = red_black_tree_2.is_right()
    assert bool_1 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_4.preorder_traverse()
    red_black_tree_5 = red_black_tree_2.insert(bool_0)
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    int_2 = 624
    var_1 = red_black_tree_0.floor(bool_0)
    assert var_1 is True
    red_black_tree_6 = red_black_tree_0.insert(int_2)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 4
    assert len(red_black_tree_5) == 4
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 4
    var_2 = red_black_tree_1.search(bool_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_2) == 2
    var_3 = red_black_tree_0.black_height()
    assert var_3 == 2
    var_4 = var_2.black_height()
    assert var_4 == 1
    red_black_tree_7 = red_black_tree_1.remove(var_0)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert len(red_black_tree_6) == 3
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 3


def test_case_52():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(bool_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.get_min()
    assert var_0 is True
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    bool_3 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_3)
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    iterator_0 = red_black_tree_3.postorder_traverse()
    var_1 = red_black_tree_0.floor(bool_0)
    var_2 = red_black_tree_0.get_min()
    assert var_2 == -981
    red_black_tree_5 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_5) == 2
    iterator_1 = red_black_tree_5.preorder_traverse()
    red_black_tree_6 = red_black_tree_5.rotate_right()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 1
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 2
    str_0 = red_black_tree_2.__repr__()
    assert str_0 == "'True blk'"
    var_3 = red_black_tree_5.black_height()
    assert var_3 == 1
    bool_4 = red_black_tree_0.check_color_properties()
    assert bool_4 is True
    red_black_tree_7 = red_black_tree_3.remove(var_0)
    assert len(red_black_tree_6) == 1
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 1


def test_case_53():
    none_type_0 = None
    int_0 = -981
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    var_1 = red_black_tree_0.black_height()
    assert var_1 == 1
    bool_3 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    int_2 = -2145
    var_2 = red_black_tree_0.floor(bool_0)
    assert var_2 == -101
    var_3 = red_black_tree_3.floor(int_1)
    assert var_3 == -101
    red_black_tree_5 = red_black_tree_3.insert(int_2)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 4
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 4
    iterator_1 = red_black_tree_5.preorder_traverse()
    int_3 = -1726
    red_black_tree_6 = red_black_tree_3.insert(int_3)
    assert len(red_black_tree_0) == 5
    assert len(red_black_tree_1) == 5
    assert len(red_black_tree_2) == 5
    assert len(red_black_tree_3) == 5
    assert len(red_black_tree_4) == 5
    assert len(red_black_tree_5) == 5
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 5
    str_0 = red_black_tree_1.__repr__()
    assert (
        str_0 == "{'-101 blk': ({'-1726 blk': ('-2145 red', '-981 red')}, 'True blk')}"
    )
    bool_4 = red_black_tree_3.check_color_properties()
    assert bool_4 is False


@pytest.mark.xfail(strict=True)
def test_case_54():
    bool_0 = False
    bool_1 = False
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(bool_1, none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    var_0 = red_black_tree_1.search(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_0) == 1
    bool_2 = False
    red_black_tree_2 = module_0.RedBlackTree(
        color=bool_2, parent=none_type_0, left=bool_0
    )
    assert len(red_black_tree_2) == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "'False blk'"
    str_1 = var_0.__repr__()
    assert str_1 == "'False blk'"
    var_1 = red_black_tree_0.get_max()
    assert var_1 is False
    red_black_tree_3 = red_black_tree_1.insert(bool_0)
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = module_0.RedBlackTree(left=red_black_tree_1, right=var_0)
    assert len(red_black_tree_4) == 3
    red_black_tree_5 = red_black_tree_3.remove(bool_0)
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 1
    red_black_tree_6 = red_black_tree_4.insert(bool_2)
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    bool_3 = red_black_tree_0.__bool__()
    bool_4 = False
    red_black_tree_7 = red_black_tree_0.remove(bool_4)
    assert len(red_black_tree_7) == 1
    bool_5 = red_black_tree_1.__eq__(red_black_tree_4)
    assert bool_5 is False
    bool_6 = True
    red_black_tree_8 = red_black_tree_2.insert(var_0)
    assert len(red_black_tree_8) == 1
    bool_7 = True
    red_black_tree_9 = red_black_tree_0.insert(bool_7)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(var_0) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 5
    assert len(red_black_tree_6) == 5
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 2
    var_2 = red_black_tree_6.floor(bool_6)
    assert var_2 is True
    iterator_0 = red_black_tree_0.postorder_traverse()
    red_black_tree_1.search(none_type_0)


def test_case_55():
    none_type_0 = None
    int_0 = -981
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_2.get_max()
    assert var_0 == -101
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    bool_3 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    var_1 = red_black_tree_0.floor(bool_0)
    assert var_1 == -101
    red_black_tree_5 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 4
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 4
    iterator_1 = red_black_tree_5.preorder_traverse()
    red_black_tree_6 = red_black_tree_5.rotate_left()
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 4
    str_0 = red_black_tree_2.__repr__()
    assert str_0 == "{'-101 blk': ('-981 blk', 'False red')}"
    var_2 = red_black_tree_5.black_height()
    assert var_2 == 2
    bool_4 = red_black_tree_0.check_color_properties()
    assert bool_4 is True
    red_black_tree_7 = red_black_tree_3.remove(var_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(red_black_tree_6) == 3
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 3


def test_case_56():
    int_0 = -981
    bool_0 = True
    int_1 = -101
    none_type_0 = None
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_0.remove(bool_0)
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    red_black_tree_5 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 2
    int_2 = -2176
    var_0 = red_black_tree_4.search(int_1)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_0) == 2
    red_black_tree_6 = module_0.RedBlackTree(parent=int_2, right=var_0)
    assert len(red_black_tree_6) == 3
    int_3 = red_black_tree_3.__len__()
    assert int_3 == 2
    bool_1 = red_black_tree_1.check_color_properties()
    assert bool_1 is True
    bool_2 = False
    bool_3 = red_black_tree_4.is_right()
    assert bool_3 is False
    red_black_tree_7 = red_black_tree_4.insert(bool_2)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert len(var_0) == 3
    assert len(red_black_tree_6) == 4
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 3
    bool_4 = var_0.is_right()
    assert bool_4 is False
    bool_5 = red_black_tree_4.__bool__()
    iterator_0 = red_black_tree_5.inorder_traverse()
    red_black_tree_8 = red_black_tree_4.remove(int_1)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(var_0) == 2
    assert len(red_black_tree_6) == 3
    assert len(red_black_tree_7) == 2
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 2
    red_black_tree_9 = module_0.RedBlackTree(bool_0)
    assert len(red_black_tree_9) == 1
    bool_6 = red_black_tree_7.__eq__(iterator_0)
    int_4 = -473
    red_black_tree_10 = red_black_tree_0.insert(int_4)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 1
    assert len(var_0) == 1
    assert len(red_black_tree_6) == 2
    assert len(red_black_tree_7) == 1
    assert len(red_black_tree_8) == 1
    assert (
        f"{type(red_black_tree_10).__module__}.{type(red_black_tree_10).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_10) == 3
    red_black_tree_11 = red_black_tree_4.insert(int_4)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(var_0) == 2
    assert len(red_black_tree_6) == 3
    assert len(red_black_tree_7) == 2
    assert len(red_black_tree_8) == 2
    assert len(red_black_tree_10) == 4
    assert (
        f"{type(red_black_tree_11).__module__}.{type(red_black_tree_11).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_11) == 4
    bool_7 = red_black_tree_6.check_coloring()
    assert bool_7 is True


@pytest.mark.xfail(strict=True)
def test_case_57():
    none_type_0 = None
    bool_0 = True
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    var_0 = red_black_tree_0.black_height()
    assert var_0 == 1
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "'None red'"
    int_0 = red_black_tree_0.__len__()
    assert int_0 == 1
    iterator_0 = red_black_tree_0.inorder_traverse()
    red_black_tree_1 = red_black_tree_0.remove(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    bool_1 = red_black_tree_0.__eq__(int_0)
    int_1 = 3735
    red_black_tree_2 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    int_2 = -2280
    var_1 = red_black_tree_1.floor(int_2)
    iterator_1 = red_black_tree_0.postorder_traverse()
    red_black_tree_2.search(bool_1)


def test_case_58():
    none_type_0 = None
    int_0 = -981
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    bool_3 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    var_1 = red_black_tree_0.floor(bool_0)
    assert var_1 == -101
    red_black_tree_5 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 4
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 4
    iterator_0 = red_black_tree_5.preorder_traverse()
    red_black_tree_6 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_6) == 4
    str_0 = red_black_tree_2.__repr__()
    assert str_0 == "{'-101 blk': ('-981 blk', {'True blk': ('False red', None)})}"
    var_2 = red_black_tree_5.black_height()
    assert var_2 == 2
    bool_4 = red_black_tree_0.check_color_properties()
    assert bool_4 is True
    red_black_tree_7 = red_black_tree_3.remove(var_0)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert len(red_black_tree_6) == 3
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 3


def test_case_59():
    none_type_0 = None
    int_0 = -972
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_1 = red_black_tree_2.is_right()
    assert bool_1 is False
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'-101 blk': ('-972 red', None)}"
    bool_2 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_2)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    int_2 = -2148
    var_0 = red_black_tree_0.floor(bool_0)
    assert var_0 is True
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_2.insert(bool_1)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 4
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    red_black_tree_7 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 4
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    bool_3 = red_black_tree_4.__contains__(var_0)
    assert bool_3 is True
    bool_4 = red_black_tree_0.check_color_properties()
    assert bool_4 is True
    red_black_tree_8 = red_black_tree_5.insert(int_2)
    assert len(red_black_tree_5) == 6
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 6
    var_1 = red_black_tree_3.get_min()
    assert var_1 == -101
    red_black_tree_9 = red_black_tree_6.remove(bool_3)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 1
    assert len(red_black_tree_7) == 1
    assert len(red_black_tree_8) == 5
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 3


def test_case_60():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = -101
    none_type_1 = None
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_1, right=none_type_1)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.rotate_left()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.remove(bool_0)
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = red_black_tree_4.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 2
    red_black_tree_6 = module_0.RedBlackTree(
        parent=red_black_tree_0, left=none_type_0, right=none_type_0
    )
    assert len(red_black_tree_6) == 1
    iterator_0 = red_black_tree_5.preorder_traverse()
    red_black_tree_7 = red_black_tree_0.rotate_right()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 1
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 2
    bool_1 = False
    red_black_tree_8 = red_black_tree_5.insert(bool_1)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(red_black_tree_7) == 3
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 3
    bool_2 = red_black_tree_5.check_color_properties()
    assert bool_2 is True
    red_black_tree_9 = red_black_tree_0.rotate_left()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 1
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 2
    var_0 = red_black_tree_9.black_height()
    assert var_0 == 1
    str_0 = red_black_tree_8.__repr__()
    assert str_0 == "{'-981 red': (None, {'False red': ('-101 blk', None)})}"
    red_black_tree_10 = red_black_tree_5.insert(var_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(red_black_tree_7) == 4
    assert len(red_black_tree_8) == 4
    assert len(red_black_tree_9) == 3
    assert (
        f"{type(red_black_tree_10).__module__}.{type(red_black_tree_10).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_10) == 3
    bool_3 = red_black_tree_8.check_coloring()
    assert bool_3 is False


def test_case_61():
    int_0 = -561
    float_0 = -371.4
    red_black_tree_0 = module_0.RedBlackTree(color=float_0, left=int_0)
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_color_properties()
    assert bool_0 is False
    int_1 = 355
    bool_1 = True
    bool_2 = True
    red_black_tree_1 = red_black_tree_0.remove(bool_2)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert red_black_tree_1.label is None
    assert red_black_tree_1.parent is None
    assert red_black_tree_1.left == -561
    assert red_black_tree_1.right is None
    assert red_black_tree_1.color == pytest.approx(-371.4, abs=0.01, rel=0.01)
    int_2 = -101
    none_type_0 = None
    red_black_tree_2 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.insert(int_2)
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    red_black_tree_4 = red_black_tree_3.rotate_right()
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 1
    red_black_tree_5 = red_black_tree_4.rotate_left()
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 1
    red_black_tree_6 = red_black_tree_5.remove(bool_1)
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 1
    red_black_tree_7 = red_black_tree_6.insert(int_1)
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(red_black_tree_6) == 2
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 2
    red_black_tree_8 = red_black_tree_2.rotate_left()
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 1
    assert len(red_black_tree_6) == 1
    assert len(red_black_tree_7) == 1
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 2
    var_0 = red_black_tree_6.get_max()
    assert var_0 == -101
    red_black_tree_9 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(red_black_tree_6) == 2
    assert len(red_black_tree_7) == 2
    assert len(red_black_tree_8) == 3
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 3
    red_black_tree_10 = module_0.RedBlackTree(color=int_1)
    assert len(red_black_tree_10) == 1
    str_0 = red_black_tree_3.__repr__()
    assert str_0 == "{'-101 blk': (None, 'False red')}"
    iterator_0 = red_black_tree_3.preorder_traverse()
    iterator_1 = red_black_tree_10.preorder_traverse()
    red_black_tree_11 = red_black_tree_9.rotate_right()
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert len(red_black_tree_6) == 3
    assert len(red_black_tree_7) == 3
    assert len(red_black_tree_8) == 2
    assert len(red_black_tree_9) == 2
    assert (
        f"{type(red_black_tree_11).__module__}.{type(red_black_tree_11).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_11) == 3
    var_1 = red_black_tree_8.black_height()
    assert var_1 == 1
    var_2 = red_black_tree_0.black_height()
    assert var_2 == 1
    red_black_tree_12 = red_black_tree_10.remove(var_1)
    assert len(red_black_tree_12) == 1


@pytest.mark.xfail(strict=True)
def test_case_62():
    none_type_0 = None
    bool_0 = False
    red_black_tree_0 = module_0.RedBlackTree(none_type_0, bool_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.is_left()
    assert bool_1 is False
    red_black_tree_1 = module_0.RedBlackTree(right=red_black_tree_0)
    assert len(red_black_tree_1) == 2
    red_black_tree_2 = red_black_tree_1.insert(bool_0)
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 2
    red_black_tree_3 = red_black_tree_1.rotate_right()
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    bool_2 = True
    var_0 = red_black_tree_2.ceil(bool_2)
    red_black_tree_4 = module_0.RedBlackTree(color=bool_2, parent=red_black_tree_0)
    assert len(red_black_tree_4) == 1
    iterator_0 = red_black_tree_4.preorder_traverse()
    red_black_tree_5 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_5) == 2
    var_1 = red_black_tree_4.search(bool_0)
    var_2 = red_black_tree_0.black_height()
    assert var_2 == 1
    bool_3 = red_black_tree_1.check_color_properties()
    assert bool_3 is True
    red_black_tree_1.insert(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    none_type_0 = None
    int_0 = -981
    bool_0 = True
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_0.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    red_black_tree_3 = red_black_tree_2.remove(bool_0)
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 1
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_4 = red_black_tree_3.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    int_2 = -133
    var_1 = red_black_tree_3.ceil(int_2)
    assert var_1 == -101
    red_black_tree_5 = module_0.RedBlackTree(left=var_0, right=red_black_tree_1)
    assert len(red_black_tree_5.right) == 2
    assert red_black_tree_5.color == 0
    iterator_0 = red_black_tree_1.preorder_traverse()
    red_black_tree_6 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5.right) == 1
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 2
    int_3 = -421
    var_2 = red_black_tree_0.search(int_3)
    var_3 = red_black_tree_4.black_height()
    assert var_3 == 1
    red_black_tree_7 = red_black_tree_1.rotate_left()
    assert len(red_black_tree_7) == 1
    bool_1 = red_black_tree_7.check_color_properties()
    assert bool_1 is True
    red_black_tree_6.remove(iterator_0)


def test_case_64():
    none_type_0 = None
    int_0 = -981
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    bool_2 = red_black_tree_0.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_2 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 2
    var_1 = red_black_tree_0.black_height()
    assert var_1 == 1
    bool_3 = True
    red_black_tree_3 = red_black_tree_2.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 3
    iterator_0 = red_black_tree_2.postorder_traverse()
    var_2 = red_black_tree_0.floor(bool_0)
    assert var_2 == -101
    red_black_tree_4 = red_black_tree_3.insert(bool_0)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 4
    iterator_1 = red_black_tree_4.preorder_traverse()
    red_black_tree_5 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_5) == 4
    str_0 = red_black_tree_3.__repr__()
    assert str_0 == "{'-101 blk': ('-981 blk', {'True blk': ('False red', None)})}"
    var_3 = red_black_tree_3.ceil(int_0)
    assert var_3 == -981
    bool_4 = red_black_tree_0.check_color_properties()
    assert bool_4 is True
    red_black_tree_6 = red_black_tree_2.remove(var_0)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3


def test_case_65():
    none_type_0 = None
    int_0 = -981
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_2.get_max()
    assert var_0 == -101
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    bool_3 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    var_1 = red_black_tree_0.floor(bool_0)
    assert var_1 == -101
    red_black_tree_5 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 4
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 4
    iterator_1 = red_black_tree_5.preorder_traverse()
    red_black_tree_6 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_6) == 4
    str_0 = red_black_tree_2.__repr__()
    assert str_0 == "{'-101 blk': ('-981 blk', {'True blk': ('False red', None)})}"
    var_2 = red_black_tree_5.ceil(bool_1)
    assert var_2 is True
    red_black_tree_7 = red_black_tree_6.rotate_right()
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 3
    assert len(red_black_tree_6) == 3
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    bool_4 = red_black_tree_7.check_color_properties()
    assert bool_4 is True
    red_black_tree_8 = red_black_tree_0.remove(int_1)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 2
    assert len(red_black_tree_6) == 2
    assert len(red_black_tree_7) == 3
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 3


def test_case_66():
    none_type_0 = None
    int_0 = -981
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    int_2 = red_black_tree_1.__len__()
    assert int_2 == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    var_1 = red_black_tree_0.black_height()
    assert var_1 == 1
    bool_3 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    var_2 = red_black_tree_0.floor(bool_0)
    assert var_2 == -101
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_6) == 2
    red_black_tree_7 = red_black_tree_5.insert(bool_2)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 4
    assert len(red_black_tree_6) == 1
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    iterator_1 = red_black_tree_6.preorder_traverse()
    int_3 = 2150
    red_black_tree_8 = red_black_tree_1.insert(int_3)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 2
    assert len(red_black_tree_7) == 5
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 4
    int_4 = 624
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'-101 blk': (None, '2150 red')}"
    red_black_tree_9 = red_black_tree_8.rotate_right()
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 4
    assert len(red_black_tree_6) == 4
    assert len(red_black_tree_8) == 3
    assert len(red_black_tree_9) == 4
    str_1 = red_black_tree_2.__repr__()
    assert str_1 == "{'-101 blk': (None, {'False red': ('2150 red', 'True blk')})}"
    var_3 = red_black_tree_5.black_height()
    assert var_3 == 1
    bool_4 = red_black_tree_3.check_color_properties()
    assert bool_4 is False
    red_black_tree_10 = red_black_tree_0.remove(int_4)
    assert len(red_black_tree_10) == 5


def test_case_67():
    none_type_0 = None
    bool_0 = False
    int_0 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_0)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    int_1 = -584
    red_black_tree_3 = red_black_tree_2.insert(int_1)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    red_black_tree_4 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 2
    iterator_0 = red_black_tree_4.postorder_traverse()
    var_0 = red_black_tree_0.floor(bool_0)
    assert var_0 == -101
    red_black_tree_5 = module_0.RedBlackTree(parent=red_black_tree_3)
    assert len(red_black_tree_5) == 1
    red_black_tree_6 = red_black_tree_5.rotate_right()
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 1
    red_black_tree_7 = red_black_tree_0.rotate_right()
    assert len(red_black_tree_7) == 1
    red_black_tree_8 = red_black_tree_1.insert(int_1)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_7) == 2
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 3
    iterator_1 = red_black_tree_6.preorder_traverse()
    int_2 = -571
    red_black_tree_9 = red_black_tree_2.insert(int_2)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 4
    assert len(red_black_tree_7) == 1
    assert len(red_black_tree_8) == 4
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 3
    str_0 = red_black_tree_9.__repr__()
    assert str_0 == "{'-571 blk': ('-584 red', '-101 red')}"
    red_black_tree_10 = red_black_tree_2.rotate_right()
    assert len(red_black_tree_10) == 1
    str_1 = red_black_tree_9.__repr__()
    assert str_1 == "{'-571 blk': ('-584 red', '-101 red')}"
    red_black_tree_11 = red_black_tree_5.rotate_right()
    assert len(red_black_tree_11) == 1
    var_1 = red_black_tree_11.black_height()
    assert var_1 == 1
    red_black_tree_12 = red_black_tree_4.rotate_left()
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_8) == 2
    assert len(red_black_tree_9) == 4
    assert (
        f"{type(red_black_tree_12).__module__}.{type(red_black_tree_12).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_12) == 4
    bool_3 = red_black_tree_12.check_color_properties()
    assert bool_3 is False
    red_black_tree_13 = red_black_tree_12.rotate_right()
    assert len(red_black_tree_4) == 4
    assert len(red_black_tree_8) == 4
    assert len(red_black_tree_9) == 3
    assert len(red_black_tree_12) == 3
    assert len(red_black_tree_13) == 4


@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    int_0 = -983
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_1 = red_black_tree_0.check_coloring()
    assert bool_1 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_2 = red_black_tree_2.is_right()
    assert bool_2 is False
    var_0 = red_black_tree_1.ceil(int_1)
    bool_3 = red_black_tree_0.is_left()
    assert bool_3 is False
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'-101 blk': ('-983 red', None)}"
    red_black_tree_4 = red_black_tree_3.insert(bool_1)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    int_2 = -2186
    var_1 = red_black_tree_0.floor(bool_0)
    assert var_1 == -101
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 4
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    red_black_tree_7 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 4
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    bool_4 = red_black_tree_4.__contains__(var_1)
    assert bool_4 is True
    bool_5 = red_black_tree_0.check_color_properties()
    assert bool_5 is True
    str_1 = red_black_tree_2.__repr__()
    assert str_1 == "{'-101 blk': (None, 'False red')}"
    red_black_tree_8 = red_black_tree_5.insert(int_2)
    assert len(red_black_tree_5) == 6
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 6
    red_black_tree_9 = red_black_tree_1.rotate_left()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_9) == 2
    bool_6 = red_black_tree_7.check_color_properties()
    assert bool_6 is False
    bool_7 = True
    bool_8 = red_black_tree_4.__bool__()
    red_black_tree_6.remove(bool_7)


def test_case_69():
    none_type_0 = None
    int_0 = -981
    int_1 = -80
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_0 = red_black_tree_0.is_right()
    assert bool_0 is False
    var_0 = red_black_tree_1.ceil(int_1)
    int_2 = 3062
    red_black_tree_3 = red_black_tree_1.insert(int_2)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    str_0 = red_black_tree_3.__repr__()
    assert str_0 == "{'-80 blk': (None, '3062 red')}"
    bool_1 = True
    red_black_tree_4 = red_black_tree_1.insert(bool_1)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    int_3 = 1079
    var_1 = red_black_tree_0.floor(int_3)
    assert var_1 == -80
    bool_2 = red_black_tree_3.check_color_properties()
    assert bool_2 is False
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_5.insert(bool_2)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_4) == 3
    assert len(red_black_tree_5) == 4
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 4
    red_black_tree_7 = red_black_tree_3.insert(int_0)
    assert len(red_black_tree_0) == 5
    assert len(red_black_tree_1) == 5
    assert len(red_black_tree_2) == 5
    assert len(red_black_tree_3) == 5
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 5
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 5
    int_4 = 624
    str_1 = red_black_tree_4.__repr__()
    assert str_1 == "{'True red': ('False red', '3062 red')}"
    bool_3 = red_black_tree_6.__contains__(int_3)
    assert bool_3 is False
    red_black_tree_8 = red_black_tree_7.insert(int_4)
    assert len(red_black_tree_0) == 6
    assert len(red_black_tree_1) == 6
    assert len(red_black_tree_2) == 6
    assert len(red_black_tree_3) == 6
    assert len(red_black_tree_4) == 4
    assert len(red_black_tree_5) == 6
    assert len(red_black_tree_6) == 6
    assert len(red_black_tree_7) == 6
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 6
    var_2 = red_black_tree_4.search(var_0)
    bool_4 = var_2.__bool__()
    assert bool_4 is False
    red_black_tree_9 = red_black_tree_0.remove(bool_1)
    assert len(red_black_tree_0) == 5
    assert len(red_black_tree_1) == 5
    assert len(red_black_tree_2) == 5
    assert len(red_black_tree_3) == 5
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 5
    assert len(red_black_tree_7) == 5
    assert len(red_black_tree_8) == 5
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 5
    red_black_tree_10 = red_black_tree_4.remove(bool_0)
    assert len(red_black_tree_0) == 4
    assert len(red_black_tree_1) == 4
    assert len(red_black_tree_2) == 4
    assert len(red_black_tree_3) == 4
    assert len(red_black_tree_5) == 4
    assert len(red_black_tree_6) == 4
    assert len(red_black_tree_7) == 4
    assert len(red_black_tree_8) == 4
    assert len(red_black_tree_9) == 4
    assert (
        f"{type(red_black_tree_10).__module__}.{type(red_black_tree_10).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_10) == 1


def test_case_70():
    none_type_0 = None
    int_0 = -1001
    bool_0 = False
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_1 = red_black_tree_2.is_right()
    assert bool_1 is False
    var_0 = red_black_tree_1.ceil(int_1)
    red_black_tree_3 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'-101 blk': ('-1001 red', None)}"
    bool_2 = True
    red_black_tree_4 = red_black_tree_3.insert(bool_2)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    iterator_0 = red_black_tree_3.postorder_traverse()
    int_2 = -2148
    var_1 = red_black_tree_0.floor(bool_0)
    assert var_1 == -101
    bool_3 = red_black_tree_3.check_color_properties()
    assert bool_3 is True
    red_black_tree_5 = red_black_tree_4.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 4
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    red_black_tree_7 = red_black_tree_2.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 4
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    bool_4 = red_black_tree_4.__contains__(var_1)
    assert bool_4 is True
    bool_5 = red_black_tree_0.check_color_properties()
    assert bool_5 is True
    red_black_tree_8 = red_black_tree_5.insert(int_2)
    assert len(red_black_tree_5) == 6
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 6
    var_2 = red_black_tree_8.get_max()
    assert var_2 is True
    bool_6 = red_black_tree_7.check_color_properties()
    assert bool_6 is False
    red_black_tree_9 = red_black_tree_1.remove(bool_0)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 3
    assert len(red_black_tree_7) == 3
    assert len(red_black_tree_8) == 5
    assert (
        f"{type(red_black_tree_9).__module__}.{type(red_black_tree_9).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_9) == 3
    red_black_tree_10 = red_black_tree_9.remove(var_1)
    assert len(red_black_tree_5) == 4
    assert len(red_black_tree_6) == 2
    assert len(red_black_tree_7) == 2
    assert len(red_black_tree_8) == 4
    assert len(red_black_tree_9) == 2
    assert (
        f"{type(red_black_tree_10).__module__}.{type(red_black_tree_10).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_10) == 4


def test_case_71():
    none_type_0 = None
    int_0 = -983
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    bool_1 = red_black_tree_0.is_right()
    assert bool_1 is False
    var_0 = red_black_tree_1.ceil(bool_1)
    bool_2 = red_black_tree_0.is_left()
    assert bool_2 is False
    red_black_tree_2 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 2
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'-101 blk': ('-983 red', None)}"
    bool_3 = True
    red_black_tree_3 = red_black_tree_2.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 3
    iterator_0 = red_black_tree_2.postorder_traverse()
    int_2 = -2148
    var_1 = red_black_tree_0.floor(bool_2)
    assert var_1 == -101
    bool_4 = red_black_tree_2.check_color_properties()
    assert bool_4 is True
    red_black_tree_4 = red_black_tree_3.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    red_black_tree_5 = red_black_tree_2.insert(bool_2)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 4
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_1.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 5
    assert len(red_black_tree_5) == 4
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 4
    bool_5 = red_black_tree_3.__contains__(var_1)
    assert bool_5 is True
    bool_6 = red_black_tree_0.check_color_properties()
    assert bool_6 is True
    str_1 = red_black_tree_6.__repr__()
    assert str_1 == "{'False red': ({'-101 blk': (None, 'True red')}, 'True blk')}"
    red_black_tree_7 = red_black_tree_4.insert(int_2)
    assert len(red_black_tree_4) == 6
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 6
    red_black_tree_8 = module_0.RedBlackTree()
    assert len(red_black_tree_8) == 1
    bool_7 = red_black_tree_8.check_color_properties()
    assert bool_7 is True
    bool_8 = False
    red_black_tree_9 = red_black_tree_2.insert(bool_8)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 7
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 5
    assert len(red_black_tree_7) == 7
    assert len(red_black_tree_9) == 3
    var_2 = red_black_tree_8.get_max()
    bool_9 = red_black_tree_6.check_color_properties()
    assert bool_9 is False
    bool_10 = red_black_tree_2.__bool__()
    red_black_tree_10 = red_black_tree_6.remove(bool_4)
    assert len(red_black_tree_4) == 6
    assert len(red_black_tree_5) == 2
    assert len(red_black_tree_6) == 2
    assert len(red_black_tree_7) == 6
    assert len(red_black_tree_9) == 4
    assert (
        f"{type(red_black_tree_10).__module__}.{type(red_black_tree_10).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_10) == 4


def test_case_72():
    int_0 = -541
    none_type_0 = None
    int_1 = -80
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    red_black_tree_2 = red_black_tree_1.rotate_left()
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 1
    bool_1 = red_black_tree_2.is_right()
    assert bool_1 is False
    var_0 = red_black_tree_1.ceil(int_1)
    int_2 = 3062
    red_black_tree_3 = red_black_tree_1.insert(int_2)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 2
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'-80 blk': (None, '3062 red')}"
    str_1 = red_black_tree_3.__repr__()
    assert str_1 == "{'-80 blk': (None, '3062 red')}"
    bool_2 = True
    bool_3 = red_black_tree_2.__eq__(str_1)
    bool_4 = True
    red_black_tree_4 = red_black_tree_2.insert(bool_4)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    red_black_tree_5 = red_black_tree_2.insert(int_2)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 4
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 4
    red_black_tree_6 = red_black_tree_2.insert(bool_2)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 5
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 3
    bool_5 = red_black_tree_0.__contains__(int_1)
    assert bool_5 is True
    red_black_tree_7 = red_black_tree_3.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 6
    assert len(red_black_tree_5) == 6
    assert len(red_black_tree_6) == 4
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    bool_6 = red_black_tree_7.check_color_properties()
    assert bool_6 is False
    str_2 = red_black_tree_1.__repr__()
    assert str_2 == "{'-80 blk': ('-541 red', None)}"
    red_black_tree_8 = red_black_tree_1.insert(var_0)
    assert len(red_black_tree_8) == 2
    red_black_tree_9 = module_0.RedBlackTree()
    assert len(red_black_tree_9) == 1
    bool_7 = red_black_tree_8.check_color_properties()
    assert bool_7 is True
    bool_8 = red_black_tree_0.check_color_properties()
    assert bool_8 is True
    bool_9 = red_black_tree_7.__bool__()
    red_black_tree_10 = red_black_tree_5.remove(bool_4)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert len(red_black_tree_3) == 3
    assert len(red_black_tree_4) == 5
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 1
    assert len(red_black_tree_7) == 1
    assert len(red_black_tree_8) == 3
    assert (
        f"{type(red_black_tree_10).__module__}.{type(red_black_tree_10).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_10) == 5
    red_black_tree_11 = red_black_tree_6.remove(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 4
    assert len(red_black_tree_5) == 4
    assert len(red_black_tree_8) == 2
    assert len(red_black_tree_10) == 4
    assert (
        f"{type(red_black_tree_11).__module__}.{type(red_black_tree_11).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_11) == 1


@pytest.mark.xfail(strict=True)
def test_case_73():
    none_type_0 = None
    int_0 = -983
    int_1 = -101
    red_black_tree_0 = module_0.RedBlackTree(parent=none_type_0, right=none_type_0)
    assert len(red_black_tree_0) == 1
    assert (
        f"{type(module_0.RedBlackTree.grandparent).__module__}.{type(module_0.RedBlackTree.grandparent).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RedBlackTree.sibling).__module__}.{type(module_0.RedBlackTree.sibling).__qualname__}"
        == "builtins.property"
    )
    bool_0 = red_black_tree_0.check_coloring()
    assert bool_0 is True
    red_black_tree_1 = red_black_tree_0.insert(int_1)
    assert (
        f"{type(red_black_tree_1).__module__}.{type(red_black_tree_1).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_1) == 1
    bool_1 = red_black_tree_0.is_right()
    assert bool_1 is False
    var_0 = red_black_tree_1.ceil(bool_1)
    bool_2 = red_black_tree_0.is_left()
    assert bool_2 is False
    red_black_tree_2 = red_black_tree_0.insert(int_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert (
        f"{type(red_black_tree_2).__module__}.{type(red_black_tree_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_2) == 2
    str_0 = red_black_tree_0.__repr__()
    assert str_0 == "{'-101 blk': ('-983 red', None)}"
    bool_3 = True
    red_black_tree_3 = red_black_tree_2.insert(bool_3)
    assert len(red_black_tree_0) == 3
    assert len(red_black_tree_1) == 3
    assert len(red_black_tree_2) == 3
    assert (
        f"{type(red_black_tree_3).__module__}.{type(red_black_tree_3).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_3) == 3
    iterator_0 = red_black_tree_2.postorder_traverse()
    int_2 = -2148
    iterator_1 = red_black_tree_1.inorder_traverse()
    var_1 = red_black_tree_0.floor(bool_2)
    assert var_1 == -101
    red_black_tree_4 = red_black_tree_1.insert(var_1)
    assert (
        f"{type(red_black_tree_4).__module__}.{type(red_black_tree_4).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_4) == 3
    bool_4 = red_black_tree_2.check_color_properties()
    assert bool_4 is True
    red_black_tree_5 = red_black_tree_3.rotate_right()
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert (
        f"{type(red_black_tree_5).__module__}.{type(red_black_tree_5).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_5) == 3
    red_black_tree_6 = red_black_tree_2.insert(bool_2)
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_5) == 4
    assert (
        f"{type(red_black_tree_6).__module__}.{type(red_black_tree_6).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_6) == 3
    red_black_tree_7 = red_black_tree_1.insert(bool_0)
    assert len(red_black_tree_0) == 2
    assert len(red_black_tree_1) == 2
    assert len(red_black_tree_2) == 2
    assert len(red_black_tree_3) == 2
    assert len(red_black_tree_4) == 2
    assert len(red_black_tree_5) == 5
    assert len(red_black_tree_6) == 4
    assert (
        f"{type(red_black_tree_7).__module__}.{type(red_black_tree_7).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_7) == 4
    bool_5 = red_black_tree_3.__contains__(var_1)
    assert bool_5 is True
    bool_6 = red_black_tree_0.check_color_properties()
    assert bool_6 is True
    bool_7 = red_black_tree_1.__eq__(bool_0)
    str_1 = red_black_tree_7.__repr__()
    assert str_1 == "{'False red': ({'-101 blk': (None, 'True red')}, 'True blk')}"
    red_black_tree_8 = red_black_tree_5.insert(int_2)
    assert len(red_black_tree_5) == 6
    assert (
        f"{type(red_black_tree_8).__module__}.{type(red_black_tree_8).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(red_black_tree_8) == 6
    red_black_tree_9 = red_black_tree_2.rotate_left()
    assert len(red_black_tree_0) == 1
    assert len(red_black_tree_1) == 1
    assert len(red_black_tree_2) == 1
    assert len(red_black_tree_3) == 1
    assert len(red_black_tree_4) == 1
    assert len(red_black_tree_9) == 2
    bool_8 = red_black_tree_0.check_color_properties()
    assert bool_8 is True
    bool_9 = True
    var_2 = red_black_tree_7.search(bool_9)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "red_black_tree.RedBlackTree"
    )
    assert len(var_2) == 1
    bool_10 = var_2.__bool__()
    assert bool_10 is True
    red_black_tree_10 = red_black_tree_7.rotate_right()
    assert len(red_black_tree_6) == 2
    assert len(red_black_tree_7) == 2
    assert len(red_black_tree_9) == 4
    assert len(red_black_tree_10) == 4
    red_black_tree_10.remove(bool_3)
