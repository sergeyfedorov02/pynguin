# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import segment_tree_other as module_0
import builtins as module_1


def test_case_0():
    str_0 = "|"
    segment_tree_0 = module_0.SegmentTree(str_0, str_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn == "|"
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )


def test_case_1():
    bool_0 = False
    segment_tree_0 = module_0.SegmentTree(bool_0, bool_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection is False
    assert segment_tree_0.fn is False


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "F'"
    module_0.SegmentTree(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.SegmentTreeNode(none_type_0, none_type_0, none_type_0, right=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    tuple_0 = (none_type_0,)
    bool_0 = False
    set_0 = set()
    segment_tree_node_0 = module_0.SegmentTreeNode(bool_0, bool_0, set_0, right=bool_0)
    var_0 = segment_tree_node_0.__repr__()
    assert var_0 == "SegmentTreeNode(start=False, end=False, val=set())"
    var_0.update(none_type_0, tuple_0)


def test_case_5():
    str_0 = "|"
    bool_0 = False
    segment_tree_0 = module_0.SegmentTree(str_0, str_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn == "|"
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    var_0 = segment_tree_0.update(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "|"
    bool_0 = False
    segment_tree_0 = module_0.SegmentTree(str_0, str_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn == "|"
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    segment_tree_0.query_range(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "_"
    bool_0 = True
    segment_tree_0 = module_0.SegmentTree(str_0, str_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "_"
    assert segment_tree_0.fn == "_"
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    segment_tree_0.update(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "|"
    segment_tree_0 = module_0.SegmentTree(str_0, str_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn == "|"
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    segment_tree_0.query_range(segment_tree_0, segment_tree_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "|"
    bool_0 = True
    segment_tree_0 = module_0.SegmentTree(str_0, str_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn == "|"
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    segment_tree_0.query_range(bool_0, str_0)


def test_case_10():
    str_0 = "|"
    bool_0 = False
    bool_1 = False
    segment_tree_0 = module_0.SegmentTree(str_0, bool_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn is False
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    var_0 = segment_tree_0.update(bool_0, bool_0)
    var_1 = segment_tree_0.query_range(bool_0, bool_1)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "|"
    bool_0 = False
    segment_tree_0 = module_0.SegmentTree(str_0, str_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn == "|"
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    float_0 = -2145.120908
    segment_tree_0.query_range(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "|"
    segment_tree_0 = module_0.SegmentTree(str_0, str_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn == "|"
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    var_0 = segment_tree_0.traverse()
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "|"
    bool_0 = False
    bool_1 = True
    segment_tree_0 = module_0.SegmentTree(str_0, bool_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "|"
    assert segment_tree_0.fn is False
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    var_0 = segment_tree_0.update(bool_0, bool_0)
    segment_tree_0.query_range(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "]"
    int_0 = -202
    none_type_0 = None
    segment_tree_0 = module_0.SegmentTree(str_0, int_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "segment_tree_other.SegmentTree"
    )
    assert segment_tree_0.collection == "]"
    assert segment_tree_0.fn == -202
    assert (
        f"{type(segment_tree_0.root).__module__}.{type(segment_tree_0.root).__qualname__}"
        == "segment_tree_other.SegmentTreeNode"
    )
    segment_tree_0.update(int_0, none_type_0)
