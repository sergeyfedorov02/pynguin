# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import non_recursive_segment_tree as module_0


def test_case_0():
    none_type_0 = None
    list_0 = [none_type_0]
    segment_tree_0 = module_0.SegmentTree(list_0, none_type_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "non_recursive_segment_tree.SegmentTree"
    )
    assert segment_tree_0.N == 1
    assert segment_tree_0.st == [None, None]
    assert segment_tree_0.fn is None


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    bytes_0 = b"\x9a\xc50\xb79\x91jX\x02"
    list_0 = [bool_0, bool_0, bytes_0, bytes_0]
    module_0.SegmentTree(list_0, bool_0)


def test_case_2():
    bool_0 = False
    none_type_0 = None
    list_0 = [none_type_0]
    segment_tree_0 = module_0.SegmentTree(list_0, none_type_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "non_recursive_segment_tree.SegmentTree"
    )
    assert segment_tree_0.N == 1
    assert segment_tree_0.st == [None, None]
    assert segment_tree_0.fn is None
    var_0 = segment_tree_0.query(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = -1470
    list_0 = [int_0]
    none_type_0 = None
    int_1 = -1931
    segment_tree_0 = module_0.SegmentTree(list_0, int_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "non_recursive_segment_tree.SegmentTree"
    )
    assert segment_tree_0.N == 1
    assert segment_tree_0.st == [None, -1470]
    assert segment_tree_0.fn == -1470
    var_0 = segment_tree_0.query(int_0, int_1)
    module_0.SegmentTree(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    int_0 = -929
    list_0 = [none_type_0]
    segment_tree_0 = module_0.SegmentTree(list_0, none_type_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "non_recursive_segment_tree.SegmentTree"
    )
    assert segment_tree_0.N == 1
    assert segment_tree_0.st == [None, None]
    assert segment_tree_0.fn is None
    segment_tree_0.query(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    none_type_0 = None
    int_0 = -929
    list_0 = [none_type_0]
    segment_tree_0 = module_0.SegmentTree(list_0, none_type_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "non_recursive_segment_tree.SegmentTree"
    )
    assert segment_tree_0.N == 1
    assert segment_tree_0.st == [None, None]
    assert segment_tree_0.fn is None
    none_type_1 = segment_tree_0.update(bool_0, int_0)
    bool_1 = False
    bool_2 = True
    segment_tree_0.query(bool_1, bool_2)


def test_case_6():
    bool_0 = False
    list_0 = [bool_0]
    segment_tree_0 = module_0.SegmentTree(list_0, list_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "non_recursive_segment_tree.SegmentTree"
    )
    assert segment_tree_0.N == 1
    assert segment_tree_0.st == [None, False]
    assert segment_tree_0.fn == [False]
    none_type_0 = segment_tree_0.update(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    none_type_0 = None
    int_0 = -929
    list_0 = [none_type_0]
    segment_tree_0 = module_0.SegmentTree(list_0, none_type_0)
    assert (
        f"{type(segment_tree_0).__module__}.{type(segment_tree_0).__qualname__}"
        == "non_recursive_segment_tree.SegmentTree"
    )
    assert segment_tree_0.N == 1
    assert segment_tree_0.st == [None, None]
    assert segment_tree_0.fn is None
    none_type_1 = segment_tree_0.update(bool_0, int_0)
    segment_tree_1 = module_0.SegmentTree(list_0, segment_tree_0)
    bool_1 = True
    int_1 = 2250
    segment_tree_0.query(bool_1, int_1)
