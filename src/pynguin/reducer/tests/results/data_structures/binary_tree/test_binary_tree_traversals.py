# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import binary_tree_traversals as module_0
import dataclasses as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.make_tree()
    assert var_0.data == 1
    var_1 = var_0.__eq__(var_0)
    var_2 = var_1.__repr__()
    var_3 = var_0.__eq__(var_1)
    var_4 = var_0.__repr__()
    assert (
        var_4
        == "Node(data=1, left=Node(data=2, left=Node(data=4, left=None, right=None), right=Node(data=5, left=None, right=None)), right=Node(data=3, left=None, right=None))"
    )
    module_0.preorder(var_3)


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    var_0 = module_0.make_tree()
    assert var_0.data == 1
    list_0 = module_0.reverse_inorder(var_0)
    list_1 = module_0.preorder(var_0)
    var_1 = module_0.zigzag(set_0)
    module_0.level_order(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.make_tree()
    assert var_0.data == 1
    var_1 = module_0.zigzag(var_0)
    var_2 = var_0.__repr__()
    assert (
        var_2
        == "Node(data=1, left=Node(data=2, left=Node(data=4, left=None, right=None), right=Node(data=5, left=None, right=None)), right=Node(data=3, left=None, right=None))"
    )
    module_0.postorder(var_2)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    list_0 = module_0.inorder(none_type_0)
    node_0 = module_0.Node(none_type_0)
    node_1 = module_0.Node(none_type_0)
    var_0 = node_1.__repr__()
    sequence_0 = module_0.level_order(none_type_0)
    list_1 = module_0.inorder(node_1)
    var_1 = node_1.__repr__()
    list_2 = module_0.postorder(node_1)
    int_0 = -872
    node_2 = module_0.Node(int_0)
    var_2 = node_1.__eq__(node_1)
    module_0.zigzag(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    var_0 = module_1.dataclass(
        order=none_type_0, match_args=none_type_0, kw_only=none_type_0
    )
    var_1 = var_0.__eq__(none_type_0)
    var_2 = var_0.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_0.__repr__()
    str_0 = "+aa~!8\r"
    module_0.inorder(str_0)


def test_case_5():
    none_type_0 = None
    bool_0 = True
    sequence_0 = module_0.get_nodes_from_left_to_right(none_type_0, bool_0)
    none_type_1 = None
    list_0 = module_0.inorder(none_type_1)
    int_0 = module_0.height(none_type_1)
    assert int_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 73.2
    module_0.reverse_inorder(float_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.make_tree()
    assert var_0.data == 1
    list_0 = module_0.reverse_inorder(var_0)
    sequence_0 = module_0.level_order(var_0)
    var_1 = module_0.make_tree()
    assert var_1.data == 1
    int_0 = module_0.height(var_0)
    assert int_0 == 3
    module_0.inorder(int_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    int_0 = module_0.height(none_type_0)
    assert int_0 == 0
    var_0 = none_type_0.__repr__()
    module_0.level_order(var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    sequence_0 = module_0.level_order(none_type_0)
    var_0 = none_type_0.__repr__()
    module_0.level_order(var_0)


def test_case_10():
    var_0 = module_0.make_tree()
    assert var_0.data == 1
    sequence_0 = module_0.level_order(var_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    int_0 = 234
    bool_0 = True
    list_0 = [int_0, bool_0]
    bool_1 = True
    module_0.get_nodes_from_left_to_right(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    var_0 = module_0.make_tree()
    assert var_0.data == 1
    list_0 = module_0.reverse_inorder(var_0)
    var_1 = module_0.zigzag(var_0)
    node_0 = module_0.Node(none_type_0)
    sequence_0 = module_0.level_order(node_0)
    int_0 = -1123
    sequence_1 = module_0.get_nodes_from_right_to_left(none_type_0, int_0)
    module_0.level_order(sequence_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    int_0 = 2432
    module_0.get_nodes_from_right_to_left(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 3140
    none_type_0 = None
    var_0 = module_0.zigzag(none_type_0)
    module_0.preorder(int_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    var_0 = module_0.make_tree()
    assert var_0.data == 1
    bool_0 = False
    dict_0 = {}
    int_0 = -1572
    none_type_0 = None
    node_0 = module_0.Node(int_0, none_type_0, none_type_0)
    node_1 = module_0.Node(dict_0, node_0)
    var_1 = node_1.__repr__()
    var_2 = var_1.__eq__(bool_0)
    var_3 = var_2.__eq__(var_0)
    var_4 = var_3.__repr__()
    module_0.zigzag(var_4)


def test_case_16():
    float_0 = -2161.7
    int_0 = -407
    sequence_0 = module_0.get_nodes_from_left_to_right(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    int_0 = -1067
    sequence_0 = module_0.get_nodes_from_right_to_left(int_0, int_0)
    module_1.dataclass(sequence_0, init=sequence_0, unsafe_hash=int_0, kw_only=int_0)
