# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import disjoint_set as module_0


def test_case_0():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = module_0.make_set(node_0)
    assert node_0.rank == 0
    none_type_1 = module_0.union_set(node_0, node_0)
    set_0 = module_0.find_python_set(node_0)


def test_case_1():
    int_0 = -2305
    node_0 = module_0.Node(int_0)
    node_1 = module_0.Node(int_0)
    with pytest.raises(ValueError):
        module_0.find_python_set(node_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_0.make_set(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    module_0.union_set(node_0, node_0)


def test_case_4():
    bool_0 = True
    node_0 = module_0.Node(bool_0)
    none_type_0 = module_0.make_set(node_0)
    assert node_0.rank == 0
    none_type_1 = module_0.union_set(node_0, node_0)


def test_case_5():
    int_0 = 146
    node_0 = module_0.Node(int_0)
    none_type_0 = module_0.make_set(node_0)
    assert node_0.rank == 0
    node_1 = module_0.Node(int_0)
    none_type_1 = module_0.make_set(node_1)
    assert node_1.rank == 0
    none_type_2 = module_0.union_set(node_1, node_0)
    assert node_0.rank == 1


def test_case_6():
    int_0 = 146
    node_0 = module_0.Node(int_0)
    none_type_0 = module_0.make_set(node_0)
    assert node_0.rank == 0
    node_1 = module_0.Node(int_0)
    node_2 = module_0.find_set(node_0)
    assert (
        f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "disjoint_set.Node"
    )
    assert node_2.data == 146
    assert node_2.rank == 0
    assert (
        f"{type(node_2.parent).__module__}.{type(node_2.parent).__qualname__}"
        == "disjoint_set.Node"
    )
    none_type_1 = module_0.make_set(node_1)
    assert node_1.rank == 0
    node_3 = module_0.find_set(node_0)
    assert node_3.rank == 0
    none_type_2 = module_0.union_set(node_1, node_0)
    assert node_0.rank == 1
    assert node_2.rank == 1
    assert node_3.rank == 1
    none_type_3 = module_0.union_set(node_1, node_1)
