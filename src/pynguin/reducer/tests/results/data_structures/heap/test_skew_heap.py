# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import skew_heap as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b';\x13\xf13"\xc7\xc5\x95'
    skew_heap_0 = module_0.SkewHeap(bytes_0)
    assert (
        f"{type(skew_heap_0).__module__}.{type(skew_heap_0).__qualname__}"
        == "skew_heap.SkewHeap"
    )
    iterator_0 = skew_heap_0.__iter__()
    none_type_0 = None
    skew_heap_1 = skew_heap_0.pop()
    assert skew_heap_1 == 19
    iterator_1 = skew_heap_0.__iter__()
    skew_heap_2 = module_0.SkewHeap()
    skew_heap_3 = module_0.SkewHeap()
    skew_heap_0.insert(none_type_0)


def test_case_1():
    skew_heap_0 = module_0.SkewHeap()
    assert (
        f"{type(skew_heap_0).__module__}.{type(skew_heap_0).__qualname__}"
        == "skew_heap.SkewHeap"
    )
    none_type_0 = skew_heap_0.insert(skew_heap_0)
    var_0 = skew_heap_0.pop()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "skew_heap.SkewHeap"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -1113
    module_0.SkewHeap(int_0)


def test_case_3():
    skew_heap_0 = module_0.SkewHeap()
    assert (
        f"{type(skew_heap_0).__module__}.{type(skew_heap_0).__qualname__}"
        == "skew_heap.SkewHeap"
    )
    none_type_0 = skew_heap_0.insert(skew_heap_0)
    var_0 = skew_heap_0.__iter__()


def test_case_4():
    none_type_0 = None
    skew_heap_0 = module_0.SkewHeap(none_type_0)
    assert (
        f"{type(skew_heap_0).__module__}.{type(skew_heap_0).__qualname__}"
        == "skew_heap.SkewHeap"
    )
    iterator_0 = skew_heap_0.__iter__()
    skew_heap_1 = module_0.SkewHeap(none_type_0)
    with pytest.raises(IndexError):
        skew_heap_1.top()


@pytest.mark.xfail(strict=True)
def test_case_5():
    skew_heap_0 = module_0.SkewHeap()
    assert (
        f"{type(skew_heap_0).__module__}.{type(skew_heap_0).__qualname__}"
        == "skew_heap.SkewHeap"
    )
    none_type_0 = skew_heap_0.insert(skew_heap_0)
    bool_0 = skew_heap_0.pop()
    assert (
        f"{type(bool_0).__module__}.{type(bool_0).__qualname__}" == "skew_heap.SkewHeap"
    )
    skew_heap_0.pop()


def test_case_6():
    skew_heap_0 = module_0.SkewHeap()
    assert (
        f"{type(skew_heap_0).__module__}.{type(skew_heap_0).__qualname__}"
        == "skew_heap.SkewHeap"
    )
    none_type_0 = skew_heap_0.clear()
    none_type_1 = skew_heap_0.insert(skew_heap_0)
    var_0 = skew_heap_0.pop()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "skew_heap.SkewHeap"
    )
    none_type_2 = var_0.insert(none_type_1)
    bool_0 = var_0.__bool__()
    var_1 = skew_heap_0.pop()
