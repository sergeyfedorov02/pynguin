# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import binomial_heap as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    binomial_heap_1 = module_0.BinomialHeap()
    assert binomial_heap_1.size == 0
    var_0 = binomial_heap_1.merge_heaps(binomial_heap_1)
    var_1 = binomial_heap_0.insert(binomial_heap_0)
    assert binomial_heap_0.size == 1
    assert (
        f"{type(binomial_heap_0.bottom_root).__module__}.{type(binomial_heap_0.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_0.min_node).__module__}.{type(binomial_heap_0.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    binomial_heap_0.__str__()


@pytest.mark.xfail(strict=True)
def test_case_1():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    var_0 = binomial_heap_0.insert(binomial_heap_0)
    assert binomial_heap_0.size == 1
    assert (
        f"{type(binomial_heap_0.bottom_root).__module__}.{type(binomial_heap_0.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_0.min_node).__module__}.{type(binomial_heap_0.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    binomial_heap_0.__str__()


@pytest.mark.xfail(strict=True)
def test_case_2():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    binomial_heap_1 = binomial_heap_0.insert(binomial_heap_0)
    assert binomial_heap_0.size == 1
    assert (
        f"{type(binomial_heap_0.bottom_root).__module__}.{type(binomial_heap_0.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_0.min_node).__module__}.{type(binomial_heap_0.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    var_0 = module_0.BinomialHeap(binomial_heap_1, heap_size=binomial_heap_1)
    var_0.insert(binomial_heap_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    var_0 = binomial_heap_0.__str__()
    assert var_0 == ""
    var_0.delete_min()


def test_case_4():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    var_0 = binomial_heap_0.insert(binomial_heap_0)
    assert binomial_heap_0.size == 1
    assert (
        f"{type(binomial_heap_0.bottom_root).__module__}.{type(binomial_heap_0.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_0.min_node).__module__}.{type(binomial_heap_0.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    binomial_heap_1 = module_0.BinomialHeap()
    var_1 = binomial_heap_1.merge_heaps(binomial_heap_0)
    assert binomial_heap_1.size == 1
    assert (
        f"{type(binomial_heap_1.bottom_root).__module__}.{type(binomial_heap_1.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_1.min_node).__module__}.{type(binomial_heap_1.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    binomial_heap_2 = module_0.BinomialHeap()
    var_2 = binomial_heap_1.is_empty()
    assert var_2 is False
    binomial_heap_3 = module_0.BinomialHeap(heap_size=var_2)
    assert binomial_heap_3.size is False
    var_3 = binomial_heap_1.delete_min()
    assert binomial_heap_1.size == 0
    assert binomial_heap_1.min_node is None
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "binomial_heap.BinomialHeap"
    )
    assert var_3.size == 1
    assert (
        f"{type(var_3.bottom_root).__module__}.{type(var_3.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(var_3.min_node).__module__}.{type(var_3.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    var_4 = binomial_heap_2.insert(var_2)
    var_5 = binomial_heap_2.insert(var_2)
    assert binomial_heap_2.size == 2
    var_6 = binomial_heap_2.__str__()
    assert var_6 == "False\n-#\n-False\n--#\n--#"


def test_case_5():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    binomial_heap_0.peek()


def test_case_7():
    bool_0 = True
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    var_0 = binomial_heap_0.insert(bool_0)
    assert binomial_heap_0.size == 1
    assert (
        f"{type(binomial_heap_0.bottom_root).__module__}.{type(binomial_heap_0.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_0.min_node).__module__}.{type(binomial_heap_0.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    var_1 = binomial_heap_0.insert(bool_0)
    assert binomial_heap_0.size == 2


@pytest.mark.xfail(strict=True)
def test_case_8():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    var_0 = binomial_heap_0.insert(binomial_heap_0)
    assert binomial_heap_0.size == 1
    assert (
        f"{type(binomial_heap_0.bottom_root).__module__}.{type(binomial_heap_0.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_0.min_node).__module__}.{type(binomial_heap_0.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    binomial_heap_1 = module_0.BinomialHeap()
    var_1 = binomial_heap_1.merge_heaps(binomial_heap_0)
    assert binomial_heap_1.size == 1
    assert (
        f"{type(binomial_heap_1.bottom_root).__module__}.{type(binomial_heap_1.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_1.min_node).__module__}.{type(binomial_heap_1.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    var_2 = binomial_heap_1.delete_min()
    assert binomial_heap_1.size == 0
    assert binomial_heap_1.min_node is None
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "binomial_heap.BinomialHeap"
    )
    assert var_2.size == 1
    assert (
        f"{type(var_2.bottom_root).__module__}.{type(var_2.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(var_2.min_node).__module__}.{type(var_2.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    binomial_heap_0.merge_heaps(var_2)


@pytest.mark.xfail(strict=True)
def test_case_9():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    binomial_heap_1 = module_0.BinomialHeap(heap_size=binomial_heap_0)
    var_0 = binomial_heap_0.merge_heaps(binomial_heap_1)
    assert (
        f"{type(binomial_heap_0.size).__module__}.{type(binomial_heap_0.size).__qualname__}"
        == "binomial_heap.BinomialHeap"
    )
    var_0.insert(binomial_heap_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    assert node_0.left_tree_size == 0
    var_0 = node_0.merge_trees(node_0)
    assert node_0.left_tree_size == 1
    assert (
        f"{type(node_0.right).__module__}.{type(node_0.right).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "binomial_heap.Node"
    )
    assert var_0.val is False
    assert var_0.left_tree_size == 1
    assert var_0.left is None
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}"
        == "binomial_heap.Node"
    )
    assert var_0.parent is None
    binomial_heap_0 = module_0.BinomialHeap(var_0, node_0, bool_0)
    var_1 = binomial_heap_0.delete_min()
    assert var_1 is False
    assert binomial_heap_0.size == 1
    binomial_heap_1 = module_0.BinomialHeap()
    assert binomial_heap_1.size == 0
    binomial_heap_1.pre_order()


@pytest.mark.xfail(strict=True)
def test_case_11():
    binomial_heap_0 = module_0.BinomialHeap()
    assert binomial_heap_0.size == 0
    var_0 = binomial_heap_0.insert(binomial_heap_0)
    assert binomial_heap_0.size == 1
    assert (
        f"{type(binomial_heap_0.bottom_root).__module__}.{type(binomial_heap_0.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(binomial_heap_0.min_node).__module__}.{type(binomial_heap_0.min_node).__qualname__}"
        == "binomial_heap.Node"
    )
    binomial_heap_1 = module_0.BinomialHeap(heap_size=binomial_heap_0)
    binomial_heap_2 = module_0.BinomialHeap(heap_size=binomial_heap_1)
    binomial_heap_0.merge_heaps(binomial_heap_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    assert node_0.left_tree_size == 0
    none_type_0 = None
    binomial_heap_0 = module_0.BinomialHeap(none_type_0, node_0, bool_0)
    binomial_heap_0.delete_min()


@pytest.mark.xfail(strict=True)
def test_case_13():
    float_0 = 1510.0422
    node_0 = module_0.Node(float_0)
    assert node_0.left_tree_size == 0
    var_0 = node_0.merge_trees(node_0)
    assert node_0.left_tree_size == 1
    assert (
        f"{type(node_0.right).__module__}.{type(node_0.right).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "binomial_heap.Node"
    )
    assert var_0.val == pytest.approx(1510.0422, abs=0.01, rel=0.01)
    assert var_0.left_tree_size == 1
    assert var_0.left is None
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}"
        == "binomial_heap.Node"
    )
    assert var_0.parent is None
    var_1 = node_0.merge_trees(node_0)
    assert node_0.left_tree_size == 3
    assert var_0.left_tree_size == 3
    assert var_1.left_tree_size == 3
    var_2 = var_0.__str__()
    var_3 = node_0.merge_trees(var_0)
    assert node_0.left_tree_size == 7
    assert var_0.left_tree_size == 7
    assert var_1.left_tree_size == 7
    assert var_3.left_tree_size == 7
    var_1.delete_min()


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    node_0 = module_0.Node(bool_0)
    assert node_0.left_tree_size == 0
    none_type_0 = None
    var_0 = node_0.merge_trees(node_0)
    assert node_0.left_tree_size == 1
    assert (
        f"{type(node_0.right).__module__}.{type(node_0.right).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "binomial_heap.Node"
    )
    assert var_0.val is False
    assert var_0.left_tree_size == 1
    assert var_0.left is None
    assert (
        f"{type(var_0.right).__module__}.{type(var_0.right).__qualname__}"
        == "binomial_heap.Node"
    )
    assert var_0.parent is None
    binomial_heap_0 = module_0.BinomialHeap(none_type_0, node_0, bool_0)
    var_1 = binomial_heap_0.peek()
    var_2 = binomial_heap_0.delete_min()
    assert var_2 is False
    assert binomial_heap_0.size == 1
    assert (
        f"{type(binomial_heap_0.bottom_root).__module__}.{type(binomial_heap_0.bottom_root).__qualname__}"
        == "binomial_heap.Node"
    )
    bool_1 = True
    var_3 = binomial_heap_0.insert(bool_1)
    assert (
        f"{type(node_0.left).__module__}.{type(node_0.left).__qualname__}"
        == "binomial_heap.Node"
    )
    assert (
        f"{type(var_0.left).__module__}.{type(var_0.left).__qualname__}"
        == "binomial_heap.Node"
    )
    assert binomial_heap_0.size == 2
    var_2.is_empty()
