# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import min_heap as module_0

@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b'6M]\x93\xe3\xb7'
    module_0.MinHeap(bytes_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.MinHeap(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    node_0 = module_0.Node(bool_0, bool_0)
    set_0 = set()
    min_heap_0 = module_0.MinHeap(set_0)
    assert f'{type(min_heap_0).__module__}.{type(min_heap_0).__qualname__}' == 'min_heap.MinHeap'
    assert min_heap_0.idx_of_element == {}
    assert min_heap_0.heap_dict == {}
    assert min_heap_0.heap == {*()}
    var_0 = node_0.__str__()
    assert var_0 == 'Node(False, False)'
    var_1 = min_heap_0.sift_down(bool_0, var_0)
    var_1.remove()

@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    node_0 = module_0.Node(bool_0, bool_0)
    set_0 = set()
    min_heap_0 = module_0.MinHeap(set_0)
    assert f'{type(min_heap_0).__module__}.{type(min_heap_0).__qualname__}' == 'min_heap.MinHeap'
    assert min_heap_0.idx_of_element == {}
    assert min_heap_0.heap_dict == {}
    assert min_heap_0.heap == {*()}
    var_0 = node_0.__str__()
    assert var_0 == 'Node(True, True)'
    min_heap_0.sift_down(bool_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    str_0 = 'Gb"TD\t\rp23&A#Q'
    node_0 = module_0.Node(str_0, str_0)
    node_1 = module_0.Node(bool_0, bool_0)
    set_0 = {node_1, node_0}
    module_0.MinHeap(set_0)