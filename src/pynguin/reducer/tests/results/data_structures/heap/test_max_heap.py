# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import max_heap as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = binary_heap_0.insert(binary_heap_0)
    assert len(binary_heap_0) == 1
    bool_0 = True
    binary_heap_0.insert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = binary_heap_0.insert(binary_heap_0)
    assert len(binary_heap_0) == 1
    int_0 = binary_heap_0.pop()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(int_0).__module__}.{type(int_0).__qualname__}" == "max_heap.BinaryHeap"
    )
    assert len(int_0) == 0
    binary_heap_1 = module_0.BinaryHeap()
    binary_heap_1.pop()


def test_case_2():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    binary_heap_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_4():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    var_0 = binary_heap_0.__len__()
    assert var_0 == 0
    var_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_5():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    none_type_0 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 1
    none_type_1 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    int_0 = binary_heap_0.pop()
    assert int_0 is False
    assert len(binary_heap_0) == 1
    none_type_2 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    bool_1 = True
    none_type_3 = binary_heap_0.insert(bool_1)
    assert len(binary_heap_0) == 3
    var_0 = binary_heap_0.__len__()
    assert var_0 == 3
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    bool_0 = True
    none_type_0 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 1
    int_0 = binary_heap_0.pop()
    assert int_0 is True
    assert len(binary_heap_0) == 0
    none_type_1 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 1
    bool_1 = True
    var_0 = binary_heap_0.__len__()
    assert var_0 == 1
    none_type_2 = binary_heap_0.insert(bool_1)
    assert len(binary_heap_0) == 2
    var_1 = binary_heap_0.__len__()
    assert var_1 == 2
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_7():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    none_type_0 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 1
    none_type_1 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    int_0 = binary_heap_0.pop()
    assert int_0 is False
    assert len(binary_heap_0) == 1
    none_type_2 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    bool_1 = True
    none_type_3 = binary_heap_0.insert(int_0)
    assert len(binary_heap_0) == 3
    none_type_4 = binary_heap_0.insert(bool_1)
    assert len(binary_heap_0) == 4
    var_0 = binary_heap_0.__len__()
    assert var_0 == 4
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_8():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    none_type_0 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 1
    none_type_1 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    int_0 = binary_heap_0.pop()
    assert int_0 is False
    assert len(binary_heap_0) == 1
    none_type_2 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    bool_1 = True
    none_type_3 = binary_heap_0.insert(int_0)
    assert len(binary_heap_0) == 3
    none_type_4 = binary_heap_0.insert(bool_1)
    assert len(binary_heap_0) == 4
    var_0 = binary_heap_0.__len__()
    assert var_0 == 4
    int_1 = binary_heap_0.pop()
    assert int_1 is True
    assert len(binary_heap_0) == 3
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_9():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    none_type_0 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 1
    none_type_1 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    none_type_2 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 3
    int_0 = binary_heap_0.pop()
    assert int_0 is False
    assert len(binary_heap_0) == 2
    none_type_3 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 3
    bool_1 = True
    none_type_4 = binary_heap_0.insert(bool_1)
    assert len(binary_heap_0) == 4
    var_0 = binary_heap_0.__len__()
    assert var_0 == 4
    var_0.pop()


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_heap_0 = module_0.BinaryHeap()
    assert len(binary_heap_0) == 0
    assert (
        f"{type(module_0.BinaryHeap.get_list).__module__}.{type(module_0.BinaryHeap.get_list).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    none_type_0 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 1
    none_type_1 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    int_0 = binary_heap_0.pop()
    assert int_0 is False
    assert len(binary_heap_0) == 1
    none_type_2 = binary_heap_0.insert(bool_0)
    assert len(binary_heap_0) == 2
    bool_1 = True
    none_type_3 = binary_heap_0.insert(bool_1)
    assert len(binary_heap_0) == 3
    bool_2 = True
    none_type_4 = binary_heap_0.insert(int_0)
    assert len(binary_heap_0) == 4
    none_type_5 = binary_heap_0.insert(bool_2)
    assert len(binary_heap_0) == 5
    var_0 = binary_heap_0.__len__()
    assert var_0 == 5
    int_1 = binary_heap_0.pop()
    assert int_1 is True
    assert len(binary_heap_0) == 4
    var_0.pop()
