# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import heap_generic as module_0


def test_case_0():
    none_type_0 = None
    dict_0 = {}
    tuple_0 = (none_type_0, dict_0)
    heap_0 = module_0.Heap(tuple_0)
    assert heap_0.size == 0
    assert heap_0.key == (None, {})
    var_0 = heap_0.get_top()


def test_case_1():
    heap_0 = module_0.Heap()
    assert heap_0.size == 0


def test_case_2():
    bool_0 = True
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = heap_0.insert_item(bool_0, bool_0)
    assert heap_0.arr == [[True, True]]
    assert heap_0.pos_map == {True: 0}
    assert heap_0.size == 1
    bool_1 = False
    bool_2 = True
    none_type_1 = heap_0.insert_item(bool_1, bool_2)
    assert heap_0.arr == [[False, True], [True, True]]
    assert heap_0.pos_map == {True: 1, False: 0}
    assert heap_0.size == 2
    heap_1 = module_0.Heap()
    var_0 = heap_1.extract_top()


def test_case_3():
    int_0 = 311
    bool_0 = True
    bool_1 = False
    heap_0 = module_0.Heap(bool_1)
    assert heap_0.size == 0
    none_type_0 = heap_0.insert_item(int_0, bool_0)
    assert heap_0.arr == [[311, True]]
    assert heap_0.pos_map == {311: 0}
    assert heap_0.size == 1


def test_case_4():
    bool_0 = False
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = heap_0.insert_item(bool_0, bool_0)
    assert heap_0.arr == [[False, False]]
    assert heap_0.pos_map == {False: 0}
    assert heap_0.size == 1
    none_type_1 = heap_0.update_item(bool_0, bool_0)
    heap_1 = module_0.Heap()


def test_case_5():
    bool_0 = True
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    var_0 = heap_0.get_top()
    var_1 = heap_0.get_top()
    none_type_0 = heap_0.update_item(var_1, bool_0)
    none_type_1 = heap_0.insert_item(bool_0, bool_0)
    assert heap_0.arr == [[True, True]]
    assert heap_0.pos_map == {True: 0}
    assert heap_0.size == 1


def test_case_6():
    bool_0 = False
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = heap_0.delete_item(bool_0)


def test_case_7():
    bool_0 = True
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = heap_0.insert_item(bool_0, bool_0)
    assert heap_0.arr == [[True, True]]
    assert heap_0.pos_map == {True: 0}
    assert heap_0.size == 1
    none_type_1 = heap_0.update_item(bool_0, bool_0)
    var_0 = heap_0.extract_top()
    assert heap_0.size == 0


def test_case_8():
    bool_0 = False
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = heap_0.insert_item(bool_0, bool_0)
    assert heap_0.arr == [[False, False]]
    assert heap_0.pos_map == {False: 0}
    assert heap_0.size == 1
    heap_1 = module_0.Heap(bool_0)
    var_0 = heap_1.extract_top()
    int_0 = 5618
    none_type_1 = heap_1.update_item(heap_1, int_0)
    var_1 = heap_1.extract_top()
    heap_2 = module_0.Heap()
    var_2 = heap_2.get_top()
    bool_1 = True
    none_type_2 = heap_1.delete_item(bool_1)
    none_type_3 = heap_1.insert_item(bool_0, bool_1)
    assert heap_1.size == 1
    int_1 = 3689
    none_type_4 = heap_1.update_item(int_0, int_1)
    heap_3 = module_0.Heap()
    var_3 = heap_1.extract_top()
    assert heap_1.size == 0
    none_type_5 = heap_2.update_item(bool_0, heap_2)
    heap_4 = module_0.Heap(var_2)
    none_type_6 = heap_1.insert_item(var_1, bool_0)
    assert heap_1.arr == [[None, False]]
    assert heap_1.pos_map == {False: 0, None: 0}
    assert heap_1.size == 1


def test_case_9():
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    var_0 = heap_0.get_top()


def test_case_10():
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    int_0 = -1803
    int_1 = 612
    none_type_0 = heap_0.update_item(int_0, int_1)
    var_0 = heap_0.extract_top()
    var_1 = heap_0.get_top()


def test_case_11():
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    var_0 = heap_0.extract_top()
    heap_1 = module_0.Heap(heap_0)
    assert (
        f"{type(heap_1.key).__module__}.{type(heap_1.key).__qualname__}"
        == "heap_generic.Heap"
    )
    var_1 = heap_1.extract_top()
    int_0 = 5618
    none_type_0 = heap_1.update_item(heap_1, int_0)
    var_2 = heap_1.extract_top()
    heap_2 = module_0.Heap()
    var_3 = heap_2.get_top()
    bool_0 = True
    none_type_1 = heap_1.delete_item(bool_0)
    int_1 = 3689
    none_type_2 = None
    heap_3 = module_0.Heap(none_type_2)
    heap_4 = module_0.Heap(int_0)
    assert heap_4.key == 5618
    var_4 = heap_2.extract_top()
    var_5 = heap_0.get_top()
    none_type_3 = heap_4.update_item(heap_4, var_1)
    heap_5 = module_0.Heap()
    var_6 = heap_3.extract_top()
    heap_6 = module_0.Heap(int_1)
    assert heap_6.key == 3689
    int_2 = 1533
    none_type_4 = heap_3.insert_item(heap_6, int_2)
    assert len(heap_3.arr) == 1
    assert len(heap_3.pos_map) == 1
    assert heap_3.size == 1
    bool_1 = False
    none_type_5 = heap_3.insert_item(none_type_0, bool_1)
    assert len(heap_3.arr) == 2
    assert heap_3.size == 2


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = -2040
    bytes_0 = b"d\x96\x1dYZ\xd8u\xc3\x9e,\xd0\xac\xb4\xccL\xc9\n\x97\x15\xac"
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = heap_0.delete_item(bytes_0)
    var_0 = heap_0.extract_top()
    heap_1 = module_0.Heap()
    bool_0 = True
    none_type_1 = heap_1.insert_item(bool_0, int_0)
    assert heap_1.arr == [[True, -2040]]
    assert heap_1.pos_map == {True: 0}
    assert heap_1.size == 1
    none_type_2 = heap_1.insert_item(none_type_0, bool_0)
    assert heap_1.arr == [[None, True], [True, -2040]]
    assert heap_1.pos_map == {True: 1, None: 0}
    assert heap_1.size == 2
    int_1 = -395
    none_type_3 = heap_1.insert_item(heap_0, int_0)
    assert len(heap_1.arr) == 3
    assert len(heap_1.pos_map) == 3
    assert heap_1.size == 3
    var_1 = heap_0.extract_top()
    none_type_4 = heap_1.delete_item(int_0)
    bool_1 = False
    var_2 = heap_0.get_top()
    none_type_5 = heap_1.insert_item(bool_1, bool_0)
    assert len(heap_1.arr) == 4
    assert heap_1.size == 4
    var_3 = heap_1.extract_top()
    assert len(heap_1.pos_map) == 3
    assert heap_1.size == 3
    var_4 = heap_1.extract_top()
    assert len(heap_1.pos_map) == 2
    assert heap_1.size == 2
    bool_2 = False
    none_type_6 = heap_0.delete_item(bool_2)
    int_1.extract_top()


def test_case_13():
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    var_0 = heap_0.get_top()
    bool_0 = False
    heap_1 = module_0.Heap()
    none_type_0 = heap_1.update_item(var_0, bool_0)
    str_0 = "?-"
    heap_2 = module_0.Heap()
    var_1 = heap_2.extract_top()
    bool_1 = True
    int_0 = 1122
    none_type_1 = heap_2.insert_item(bool_1, int_0)
    assert heap_2.arr == [[True, 1122]]
    assert heap_2.pos_map == {True: 0}
    assert heap_2.size == 1
    bool_2 = False
    none_type_2 = heap_1.delete_item(heap_2)
    none_type_3 = heap_0.delete_item(none_type_1)
    heap_3 = module_0.Heap()
    var_2 = heap_3.extract_top()
    heap_4 = module_0.Heap()
    none_type_4 = heap_2.insert_item(var_1, int_0)
    assert heap_2.arr == [[None, 1122], [True, 1122]]
    assert heap_2.pos_map == {True: 1, None: 0}
    assert heap_2.size == 2
    none_type_5 = heap_2.update_item(none_type_1, bool_2)
    assert heap_2.arr == [[True, 1122], [None, False]]
    assert heap_2.pos_map == {True: 0, None: 1}
    var_3 = heap_1.extract_top()
    none_type_6 = heap_2.delete_item(str_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -2040
    bytes_0 = b"d\x96\x1dYZ\xd8u\xc3\x9e,\xd0\xac\xb4\xccL\xc9\n\x97\x15\xac"
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = heap_0.delete_item(bytes_0)
    var_0 = heap_0.extract_top()
    none_type_1 = heap_0.update_item(int_0, int_0)
    heap_1 = module_0.Heap()
    bool_0 = True
    none_type_2 = heap_1.insert_item(bool_0, int_0)
    assert heap_1.arr == [[True, -2040]]
    assert heap_1.pos_map == {True: 0}
    assert heap_1.size == 1
    none_type_3 = heap_1.insert_item(none_type_0, bool_0)
    assert heap_1.arr == [[None, True], [True, -2040]]
    assert heap_1.pos_map == {True: 1, None: 0}
    assert heap_1.size == 2
    int_1 = -395
    none_type_4 = heap_1.insert_item(heap_0, int_0)
    assert len(heap_1.arr) == 3
    assert len(heap_1.pos_map) == 3
    assert heap_1.size == 3
    var_1 = heap_0.extract_top()
    none_type_5 = heap_1.delete_item(int_0)
    bool_1 = False
    int_2 = -590
    none_type_6 = heap_1.insert_item(int_2, bool_0)
    assert len(heap_1.arr) == 4
    assert heap_1.size == 4
    var_2 = heap_0.get_top()
    none_type_7 = heap_1.insert_item(bool_1, bool_0)
    assert len(heap_1.arr) == 5
    assert len(heap_1.pos_map) == 5
    assert heap_1.size == 5
    var_3 = heap_1.extract_top()
    assert len(heap_1.pos_map) == 4
    assert heap_1.size == 4
    var_4 = heap_1.extract_top()
    assert len(heap_1.pos_map) == 3
    assert heap_1.size == 3
    bool_2 = False
    none_type_8 = heap_0.delete_item(bool_2)
    int_1.extract_top()


@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = -2040
    bytes_0 = b"d\x96\x1dYZ\xd8u\xc3\x9e,\xd0\xac\xb4\xccL\xc9\n\x97\x15\xac"
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = heap_0.delete_item(bytes_0)
    var_0 = heap_0.extract_top()
    none_type_1 = heap_0.update_item(int_0, int_0)
    heap_1 = module_0.Heap()
    bool_0 = True
    none_type_2 = heap_1.insert_item(bool_0, int_0)
    assert heap_1.arr == [[True, -2040]]
    assert heap_1.pos_map == {True: 0}
    assert heap_1.size == 1
    none_type_3 = heap_1.insert_item(none_type_0, bool_0)
    assert heap_1.arr == [[None, True], [True, -2040]]
    assert heap_1.pos_map == {True: 1, None: 0}
    assert heap_1.size == 2
    int_1 = -395
    none_type_4 = heap_1.insert_item(heap_0, int_0)
    assert len(heap_1.arr) == 3
    assert len(heap_1.pos_map) == 3
    assert heap_1.size == 3
    var_1 = heap_0.extract_top()
    none_type_5 = heap_1.delete_item(int_0)
    int_2 = 1523
    none_type_6 = heap_1.update_item(bool_0, int_2)
    bool_1 = False
    int_3 = -590
    none_type_7 = heap_1.insert_item(int_3, bool_0)
    assert len(heap_1.arr) == 4
    assert len(heap_1.pos_map) == 4
    assert heap_1.size == 4
    var_2 = heap_0.get_top()
    none_type_8 = heap_1.insert_item(bool_1, bool_0)
    assert len(heap_1.arr) == 5
    assert len(heap_1.pos_map) == 5
    assert heap_1.size == 5
    var_3 = heap_1.extract_top()
    assert len(heap_1.pos_map) == 4
    assert heap_1.size == 4
    var_4 = heap_1.extract_top()
    assert len(heap_1.pos_map) == 3
    assert heap_1.size == 3
    bool_2 = False
    none_type_9 = heap_0.delete_item(bool_2)
    int_1.extract_top()


def test_case_16():
    int_0 = -2040
    int_1 = 1017
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    none_type_0 = None
    none_type_1 = heap_0.insert_item(int_1, none_type_0)
    assert heap_0.arr == [[1017, None]]
    assert heap_0.pos_map == {1017: 0}
    assert heap_0.size == 1
    heap_1 = module_0.Heap()
    var_0 = heap_0.extract_top()
    assert heap_0.size == 0
    none_type_2 = heap_1.update_item(int_0, int_1)
    heap_2 = module_0.Heap()
    heap_3 = module_0.Heap()
    var_1 = heap_2.extract_top()
    bool_0 = True
    none_type_3 = heap_2.update_item(bool_0, heap_2)
    bool_1 = True
    none_type_4 = heap_2.insert_item(bool_1, int_0)
    none_type_5 = heap_2.insert_item(none_type_0, bool_1)
    assert heap_2.arr == [[None, True], [True, -2040]]
    assert heap_2.pos_map == {True: 1, None: 0}
    var_2 = heap_0.extract_top()
    bool_2 = True
    int_2 = -373
    int_3 = -412
    heap_4 = module_0.Heap()
    int_4 = 585
    none_type_6 = heap_2.insert_item(heap_0, int_4)
    assert len(heap_2.pos_map) == 3
    var_3 = heap_3.extract_top()
    var_4 = heap_3.get_top()
    bool_3 = False
    int_5 = -590
    none_type_7 = heap_1.insert_item(int_5, bool_1)
    none_type_8 = heap_2.insert_item(int_3, int_2)
    assert len(heap_2.pos_map) == 4
    heap_5 = module_0.Heap()
    var_5 = heap_1.get_top()
    none_type_9 = heap_1.insert_item(bool_3, bool_1)
    assert heap_1.arr == [[False, True], [-590, True]]
    assert heap_1.pos_map == {-590: 1, False: 0}
    var_6 = heap_2.extract_top()
    assert heap_2.arr == [[None, True], [-412, -373], [True, -2040], [True, -2040]]
    assert heap_2.pos_map == {True: 2, None: 0, -412: 1}
    assert heap_2.size == 3
    var_7 = heap_4.extract_top()
    none_type_10 = heap_0.delete_item(bool_2)
    var_8 = heap_3.extract_top()


def test_case_17():
    heap_0 = module_0.Heap()
    assert heap_0.size == 0
    var_0 = heap_0.extract_top()
    var_1 = heap_0.extract_top()
    bool_0 = False
    var_2 = heap_0.get_top()
    none_type_0 = heap_0.insert_item(var_1, bool_0)
    assert heap_0.arr == [[None, False]]
    assert heap_0.pos_map == {None: 0}
    assert heap_0.size == 1
    var_3 = heap_0.get_top()
    bool_1 = True
    none_type_1 = None
    heap_1 = module_0.Heap(none_type_1)
    int_0 = 19
    none_type_2 = heap_0.delete_item(int_0)
    var_4 = heap_0.extract_top()
    assert heap_0.size == 0
    var_5 = heap_0.get_top()
    none_type_3 = heap_1.delete_item(heap_1)
    var_6 = heap_1.get_top()
    none_type_4 = heap_0.update_item(bool_1, var_0)
    heap_2 = module_0.Heap(var_0)
    var_7 = heap_2.extract_top()
    none_type_5 = heap_0.delete_item(none_type_4)
    assert heap_0.size == -1
    none_type_6 = heap_0.insert_item(bool_1, none_type_1)
    assert heap_0.pos_map == {None: 0, True: -1}
    assert heap_0.size == 0
    heap_3 = module_0.Heap()
    none_type_7 = heap_1.delete_item(heap_0)
    var_8 = heap_0.get_top()
    none_type_8 = heap_3.insert_item(var_2, none_type_1)
    none_type_9 = heap_0.insert_item(none_type_1, none_type_5)
    assert heap_0.arr == [[None, None]]
    assert heap_0.size == 1
    heap_4 = module_0.Heap()
    bool_2 = False
    none_type_10 = heap_2.delete_item(var_0)
    none_type_11 = heap_0.update_item(bool_1, heap_1)
    none_type_12 = heap_1.update_item(bool_2, bool_2)
    var_9 = heap_0.get_top()
