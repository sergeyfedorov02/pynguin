# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import template_base as module_0
import enum as module_1
import re as module_2
import inspect as module_3
import token as module_4
import ast as module_5
import tokenize as module_6
import django.utils.safestring as module_7


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    origin_0 = module_0.Origin(none_type_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}"
        == "builtins.property"
    )
    var_0 = origin_0.__eq__(none_type_0)
    assert var_0 is False
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.Template(none_type_0)


def test_case_2():
    none_type_0 = None
    token_0 = module_0.Token(none_type_0, none_type_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = token_0.split_contents()


def test_case_3():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0, builtins=enum_dict_0)
    assert parser_0.libraries == {}
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    with pytest.raises(TypeError):
        module_0.Variable(enum_dict_0)


def test_case_4():
    node_list_0 = module_0.NodeList()
    assert (
        f"{type(node_list_0).__module__}.{type(node_list_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.NodeList.contains_nontext is False
    var_0 = node_list_0.render(node_list_0)


def test_case_5():
    node_list_0 = module_0.NodeList()
    assert (
        f"{type(node_list_0).__module__}.{type(node_list_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.NodeList.contains_nontext is False


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\r"
    origin_0 = module_0.Origin(str_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}"
        == "builtins.property"
    )
    parser_0 = module_0.Parser(str_0, origin=str_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == ["\r"]
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin == "\r"
    parser_0.skip_past(origin_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    origin_0 = module_0.Origin(none_type_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}"
        == "builtins.property"
    )
    var_0 = origin_0.__repr__()
    assert var_0 == "<Origin name=None>"
    var_1 = origin_0.__eq__(none_type_0)
    assert var_1 is False
    var_1.__iter__()


def test_case_8():
    str_0 = "3c="
    lexer_0 = module_0.Lexer(str_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = lexer_0.tokenize()


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    variable_node_0 = module_0.VariableNode(none_type_0)
    assert (
        f"{type(variable_node_0).__module__}.{type(variable_node_0).__qualname__}"
        == "template_base.VariableNode"
    )
    assert variable_node_0.filter_expression is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.VariableNode.child_nodelists == ()
    variable_node_0.render(none_type_0)


def test_case_10():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_0.Variable(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "Z"
    variable_0 = module_0.Variable(str_0)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    variable_0.resolve(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "3c="
    lexer_0 = module_0.Lexer(str_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    variable_0 = module_0.Variable(str_0)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = lexer_0.tokenize()
    var_1 = var_0.__str__()
    assert var_1 == '[<Text token: "3c=...">]'
    var_0.parse(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    var_0 = none_type_0.__repr__()
    var_1 = var_0.__eq__(var_0)
    module_0.Parser(var_0, builtins=var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "Q"
    text_node_0 = module_0.TextNode(str_0)
    assert (
        f"{type(text_node_0).__module__}.{type(text_node_0).__qualname__}"
        == "template_base.TextNode"
    )
    assert text_node_0.s == "Q"
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.TextNode.child_nodelists == ()
    parser_0 = module_0.Parser(str_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == ["Q"]
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    parser_0.parse()


@pytest.mark.xfail(strict=True)
def test_case_15():
    regex_flag_0 = module_2.RegexFlag.DOTALL
    module_0.Template(regex_flag_0, regex_flag_0, engine=regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    node_0 = module_3.currentframe()
    origin_0 = module_0.Origin(node_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}"
        == "builtins.property"
    )
    var_0 = origin_0.__str__()
    var_1 = module_4.ISEOF(origin_0)
    assert var_1 is False
    var_2 = var_1.__repr__()
    node_0.render(node_0)


def test_case_17():
    node_list_0 = module_0.NodeList()
    assert (
        f"{type(node_list_0).__module__}.{type(node_list_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.NodeList.contains_nontext is False
    var_0 = node_list_0.get_nodes_by_type(node_list_0)
    var_1 = node_list_0.render(node_list_0)


def test_case_18():
    var_0 = module_2.purge()
    var_1 = var_0.__repr__()
    var_2 = module_0.token_kwargs(var_0, var_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    variable_0 = module_0.Variable(var_1)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )


@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    variable_does_not_exist_0 = module_0.VariableDoesNotExist(none_type_0, none_type_0)
    assert (
        f"{type(variable_does_not_exist_0).__module__}.{type(variable_does_not_exist_0).__qualname__}"
        == "template_base.VariableDoesNotExist"
    )
    assert variable_does_not_exist_0.msg is None
    assert variable_does_not_exist_0.params is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    variable_does_not_exist_0.__str__()


@pytest.mark.xfail(strict=True)
def test_case_20():
    node_list_0 = module_0.NodeList()
    assert (
        f"{type(node_list_0).__module__}.{type(node_list_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.NodeList.contains_nontext is False
    var_0 = node_list_0.render(node_list_0)
    debug_lexer_0 = module_0.DebugLexer(var_0)
    var_1 = var_0.__str__()
    var_2 = debug_lexer_0.create_token(var_0, var_0, node_list_0, var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "template_base.Token"
    )
    assert var_2.token_type == module_0.TokenType.TEXT
    assert (
        f"{type(var_2.contents).__module__}.{type(var_2.contents).__qualname__}"
        == "django.utils.safestring.SafeString"
    )
    assert len(var_2.contents) == 0
    assert (
        f"{type(var_2.lineno).__module__}.{type(var_2.lineno).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(var_2.lineno) == 0
    assert (
        f"{type(var_2.position).__module__}.{type(var_2.position).__qualname__}"
        == "django.utils.safestring.SafeString"
    )
    assert len(var_2.position) == 0
    var_3 = debug_lexer_0.tokenize()
    match_case_0 = module_5.match_case(*var_0)
    var_4 = debug_lexer_0.__repr__()
    assert var_4 == '<DebugLexer template_string="...", verbatim=False>'
    var_5 = node_list_0.get_nodes_by_type(var_2)
    filter_expression_0 = module_0.FilterExpression(var_1, debug_lexer_0)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    match_case_0.__contains__(var_5)


@pytest.mark.xfail(strict=True)
def test_case_21():
    node_0 = module_0.Node()
    assert (
        f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "template_base.Node"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.Node.must_be_first is False
    assert module_0.Node.child_nodelists == ("nodelist",)
    assert module_0.Node.token is None
    origin_0 = module_0.Origin(node_0)
    assert (
        f"{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_4.ISEOF(origin_0)
    assert var_0 is False
    var_1 = node_0.render(node_0)
    token_type_0 = module_0.TokenType.COMMENT
    var_2 = module_3.ismemberdescriptor(var_1)
    var_3 = origin_0.__repr__()
    var_4 = module_3.isabstract(origin_0)
    debug_lexer_0 = module_0.DebugLexer(token_type_0)
    var_4.clear()


def test_case_22():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0, enum_dict_0, origin=enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert (
        f"{type(parser_0.libraries).__module__}.{type(parser_0.libraries).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(parser_0.libraries) == 0
    assert (
        f"{type(parser_0.origin).__module__}.{type(parser_0.origin).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(parser_0.origin) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = parser_0.parse()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(var_0) == 0
    assert module_0.NodeList.contains_nontext is False


def test_case_23():
    str_0 = "3c="
    var_0 = module_0.token_kwargs(str_0, str_0, str_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = ""
    parser_0 = module_0.Parser(str_0, builtins=str_0)
    assert parser_0.libraries == {}
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    parser_0.parse(parser_0)


def test_case_25():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0, builtins=enum_dict_0)
    assert parser_0.libraries == {}
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = parser_0.parse()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(var_0) == 0
    assert module_0.NodeList.contains_nontext is False


def test_case_26():
    str_0 = "3c="
    var_0 = module_0.token_kwargs(str_0, str_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )


def test_case_27():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    with pytest.raises(module_0.TemplateSyntaxError):
        parser_0.find_filter(parser_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = ""
    module_0.Variable(str_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = parser_0.error(enum_dict_0, parser_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "template_base.TemplateSyntaxError"
    )
    assert (
        f"{type(var_0.token).__module__}.{type(var_0.token).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(var_0.token) == 0
    enum_dict_0.parse()


@pytest.mark.xfail(strict=True)
def test_case_30():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = parser_0.parse()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(var_0) == 0
    assert module_0.NodeList.contains_nontext is False
    bool_0 = False
    var_1 = parser_0.prepend_token(bool_0)
    var_2 = var_0.render(bool_0)
    module_0.Variable(var_2)


def test_case_31():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = parser_0.parse()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(var_0) == 0
    assert module_0.NodeList.contains_nontext is False
    text_node_0 = module_0.TextNode(enum_dict_0)
    assert (
        f"{type(text_node_0).__module__}.{type(text_node_0).__qualname__}"
        == "template_base.TextNode"
    )
    assert (
        f"{type(text_node_0.s).__module__}.{type(text_node_0.s).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(text_node_0.s) == 0
    assert module_0.TextNode.child_nodelists == ()
    bool_0 = False
    var_1 = var_0.render(bool_0)
    var_2 = text_node_0.render(parser_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "enum._EnumDict"
    assert len(var_2) == 0
    with pytest.raises(TypeError):
        module_0.Variable(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    enum_dict_0 = module_1._EnumDict()
    module_0.Template(enum_dict_0, engine=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "\r"
    parser_0 = module_0.Parser(str_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == ["\r"]
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    parser_0.parse()


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    text_node_0 = module_0.TextNode(none_type_0)
    assert (
        f"{type(text_node_0).__module__}.{type(text_node_0).__qualname__}"
        == "template_base.TextNode"
    )
    assert text_node_0.s is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.TextNode.child_nodelists == ()
    origin_0 = module_0.Origin(none_type_0)
    assert (
        f"{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}"
        == "builtins.property"
    )
    var_0 = origin_0.__eq__(none_type_0)
    assert var_0 is False
    var_1 = text_node_0.render_annotated(none_type_0)
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_35():
    node_list_0 = module_0.NodeList()
    assert (
        f"{type(node_list_0).__module__}.{type(node_list_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.NodeList.contains_nontext is False
    var_0 = node_list_0.render(node_list_0)
    debug_lexer_0 = module_0.DebugLexer(var_0)
    var_1 = debug_lexer_0.tokenize()
    var_1.parse(var_1)


def test_case_36():
    str_0 = "3c="
    with pytest.raises(module_0.TemplateSyntaxError):
        module_0.FilterExpression(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = parser_0.error(enum_dict_0, parser_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "template_base.TemplateSyntaxError"
    )
    assert (
        f"{type(var_0.token).__module__}.{type(var_0.token).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(var_0.token) == 0
    var_1 = parser_0.parse()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(var_1) == 0
    assert module_0.NodeList.contains_nontext is False
    text_node_0 = module_0.TextNode(enum_dict_0)
    assert (
        f"{type(text_node_0).__module__}.{type(text_node_0).__qualname__}"
        == "template_base.TextNode"
    )
    assert (
        f"{type(text_node_0.s).__module__}.{type(text_node_0.s).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(text_node_0.s) == 0
    assert module_0.TextNode.child_nodelists == ()
    bool_0 = False
    var_2 = var_1.render(bool_0)
    parser_0.compile_filter(var_1)


def test_case_38():
    str_0 = "J\ro#VELh~v"
    variable_0 = module_0.Variable(str_0)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )


def test_case_39():
    str_0 = "\r"
    variable_0 = module_0.Variable(str_0)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )


def test_case_40():
    str_0 = "Z"
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )


@pytest.mark.xfail(strict=True)
def test_case_41():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0, builtins=enum_dict_0)
    assert parser_0.libraries == {}
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    parser_0.invalid_block_tag(enum_dict_0, parser_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = parser_0.error(enum_dict_0, parser_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "template_base.TemplateSyntaxError"
    )
    assert (
        f"{type(var_0.token).__module__}.{type(var_0.token).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(var_0.token) == 0
    var_1 = parser_0.error(parser_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "template_base.TemplateSyntaxError"
    )
    assert (
        f"{type(var_1.token).__module__}.{type(var_1.token).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(var_1.token) == 0
    var_2 = parser_0.parse()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(var_2) == 0
    assert module_0.NodeList.contains_nontext is False
    parser_0.isalnum()


@pytest.mark.xfail(strict=True)
def test_case_43():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    parser_0.delete_first_token()


def test_case_44():
    var_0 = module_6.any()
    var_1 = var_0.__repr__()
    filter_expression_0 = module_0.FilterExpression(var_1, var_1)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )


def test_case_45():
    str_0 = ".M9,:8o"
    with pytest.raises(module_0.TemplateSyntaxError):
        module_0.FilterExpression(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0, enum_dict_0, origin=enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert (
        f"{type(parser_0.libraries).__module__}.{type(parser_0.libraries).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(parser_0.libraries) == 0
    assert (
        f"{type(parser_0.origin).__module__}.{type(parser_0.origin).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(parser_0.origin) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    parser_0.skip_past(parser_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    token_type_0 = module_0.TokenType.BLOCK
    var_0 = token_type_0.__repr__()
    assert var_0 == "<TokenType.BLOCK: 2>"
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    variable_0 = module_0.Variable(var_0)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_1 = module_2.purge()
    var_2 = var_1.__repr__()
    var_3 = module_0.token_kwargs(var_2, var_1)
    var_4 = variable_0.__str__()
    assert var_4 == "<TokenType.BLOCK: 2>"
    var_0.visit_SetComp(variable_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "\r"
    parser_0 = module_0.Parser(str_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == ["\r"]
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    variable_0 = module_0.Variable(str_0)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = variable_0.__repr__()
    assert var_0 == "<Variable: '\\r'>"
    parser_0.parse()


def test_case_49():
    str_0 = "Z"
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = filter_expression_0.__repr__()
    assert var_0 == "<FilterExpression 'Z'>"
    variable_0 = module_0.Variable(var_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    none_type_0 = None
    text_node_0 = module_0.TextNode(none_type_0)
    assert (
        f"{type(text_node_0).__module__}.{type(text_node_0).__qualname__}"
        == "template_base.TextNode"
    )
    assert text_node_0.s is None
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.TextNode.child_nodelists == ()
    module_7.mark_safe(text_node_0)


def test_case_51():
    node_list_0 = module_0.NodeList()
    assert (
        f"{type(node_list_0).__module__}.{type(node_list_0).__qualname__}"
        == "template_base.NodeList"
    )
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.NodeList.contains_nontext is False
    debug_lexer_0 = module_0.DebugLexer(node_list_0)
    var_0 = node_list_0.__str__()
    with pytest.raises(AssertionError):
        debug_lexer_0.create_token(var_0, var_0, node_list_0, var_0)


def test_case_52():
    str_0 = "Z"
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    token_0 = module_0.Token(str_0, filter_expression_0)
    var_0 = token_0.split_contents()


def test_case_53():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0, origin=enum_dict_0)
    assert (
        f"{type(parser_0).__module__}.{type(parser_0).__qualname__}"
        == "template_base.Parser"
    )
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert (
        f"{type(parser_0.origin).__module__}.{type(parser_0.origin).__qualname__}"
        == "enum._EnumDict"
    )
    assert len(parser_0.origin) == 0
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    var_0 = module_3.getdoc(enum_dict_0)
    with pytest.raises(module_0.TemplateSyntaxError):
        module_0.Variable(var_0)


def test_case_54():
    str_0 = "''"
    var_0 = module_0.token_kwargs(str_0, str_0, str_0)
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )


def test_case_55():
    int_0 = 1414
    variable_node_0 = module_0.VariableNode(int_0)
    assert (
        f"{type(variable_node_0).__module__}.{type(variable_node_0).__qualname__}"
        == "template_base.VariableNode"
    )
    assert variable_node_0.filter_expression == 1414
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert module_0.VariableNode.child_nodelists == ()
    with pytest.raises(TypeError):
        module_3.getfullargspec(variable_node_0)


def test_case_56():
    str_0 = "Z"
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = filter_expression_0.resolve(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    str_0 = "3c="
    variable_0 = module_0.Variable(str_0)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    variable_0.resolve(variable_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = "Z"
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    filter_expression_0.resolve(str_0)


def test_case_59():
    str_0 = ">#Y8OA\\|_GW"
    variable_0 = module_0.Variable(str_0)
    assert (
        f"{type(variable_0).__module__}.{type(variable_0).__qualname__}"
        == "template_base.Variable"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    with pytest.raises(module_0.TemplateSyntaxError):
        module_0.FilterExpression(str_0, variable_0)


def test_case_60():
    str_0 = "_uKG&V)'t$^"
    var_0 = module_5.MatchAs()
    with pytest.raises(module_0.TemplateSyntaxError):
        module_0.FilterExpression(str_0, str_0)


def test_case_61():
    str_0 = ""
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = filter_expression_0.resolve(filter_expression_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    str_0 = "d"
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert (
        f"{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}"
        == "template_base.FilterExpression"
    )
    assert module_0.FILTER_SEPARATOR == "|"
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ":"
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == "."
    assert module_0.BLOCK_TAG_START == "{%"
    assert module_0.BLOCK_TAG_END == "%}"
    assert module_0.VARIABLE_TAG_START == "{{"
    assert module_0.VARIABLE_TAG_END == "}}"
    assert module_0.COMMENT_TAG_START == "{#"
    assert module_0.COMMENT_TAG_END == "#}"
    assert module_0.SINGLE_BRACE_START == "{"
    assert module_0.SINGLE_BRACE_END == "}"
    assert module_0.UNKNOWN_SOURCE == "<unknown source>"
    assert (
        f"{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}"
        == "logging.Logger"
    )
    assert module_0.logger.name == "django.template"
    assert module_0.logger.level == 0
    assert (
        f"{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}"
        == "logging.RootLogger"
    )
    assert module_0.logger.handlers == []
    assert (
        module_0.constant_string
        == "(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')"
    )
    assert (
        module_0.filter_raw_string
        == "\n^(?P<constant>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"\\)|_\\('[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\\)|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )"
    )
    assert (
        f"{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}"
        == "django.utils.functional.SimpleLazyObject"
    )
    assert (
        f"{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    origin_0 = module_0.Origin(none_type_0, str_0, none_type_0)
    assert (
        f"{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}"
        == "builtins.property"
    )
    var_0 = filter_expression_0.resolve(str_0, str_0)
    filter_expression_0.resolve(origin_0, var_0)
