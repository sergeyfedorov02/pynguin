# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import template_base as module_0
import enum as module_1
import re as module_2
import inspect as module_3
import token as module_4
import ast as module_5
import tokenize as module_6
import django.utils.safestring as module_7

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.Template(none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '\r'
    origin_0 = module_0.Origin(str_0)
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}' == 'builtins.property'
    parser_0 = module_0.Parser(str_0, origin=str_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'template_base.Parser'
    assert parser_0.tokens == ['\r']
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin == '\r'
    parser_0.skip_past(origin_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = '3c='
    lexer_0 = module_0.Lexer(str_0)
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    var_0 = lexer_0.tokenize()
    var_1 = var_0.__str__()
    assert var_1 == '[<Text token: "3c=...">]'
    var_0.parse(var_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    var_0 = none_type_0.__repr__()
    module_0.Parser(var_0, builtins=var_0)

@pytest.mark.xfail(strict=True)
def test_case_15():
    regex_flag_0 = module_2.RegexFlag.DOTALL
    module_0.Template(regex_flag_0, regex_flag_0, engine=regex_flag_0)

def test_case_18():
    var_0 = module_2.purge()
    var_2 = module_0.token_kwargs(var_0, var_0)
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'

@pytest.mark.xfail(strict=True)
def test_case_20():
    node_list_0 = module_0.NodeList()
    assert f'{type(node_list_0).__module__}.{type(node_list_0).__qualname__}' == 'template_base.NodeList'
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert module_0.NodeList.contains_nontext is False
    var_0 = node_list_0.render(node_list_0)
    debug_lexer_0 = module_0.DebugLexer(var_0)
    var_4 = debug_lexer_0.__repr__()
    assert var_4 == '<DebugLexer template_string="...", verbatim=False>'
    var_5 = node_list_0.get_nodes_by_type(var_2)

@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = ''
    parser_0 = module_0.Parser(str_0, builtins=str_0)
    assert parser_0.libraries == {}
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    parser_0.parse(parser_0)

@pytest.mark.xfail(strict=True)
def test_case_30():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'template_base.Parser'
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    var_0 = parser_0.parse()
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'template_base.NodeList'
    assert len(var_0) == 0
    assert module_0.NodeList.contains_nontext is False
    bool_0 = False
    var_2 = var_0.render(bool_0)
    module_0.Variable(var_2)

def test_case_31():
    bool_0 = False

@pytest.mark.xfail(strict=True)
def test_case_32():
    enum_dict_0 = module_1._EnumDict()
    module_0.Template(enum_dict_0, engine=enum_dict_0)

@pytest.mark.xfail(strict=True)
def test_case_35():
    node_list_0 = module_0.NodeList()
    assert f'{type(node_list_0).__module__}.{type(node_list_0).__qualname__}' == 'template_base.NodeList'
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert module_0.NodeList.contains_nontext is False
    var_0 = node_list_0.render(node_list_0)
    debug_lexer_0 = module_0.DebugLexer(var_0)
    var_1 = debug_lexer_0.tokenize()
    var_1.parse(var_1)

@pytest.mark.xfail(strict=True)
def test_case_37():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'template_base.Parser'
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    var_1 = parser_0.parse()
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'template_base.NodeList'
    assert len(var_1) == 0
    assert module_0.NodeList.contains_nontext is False

@pytest.mark.xfail(strict=True)
def test_case_42():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'template_base.Parser'
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    var_0 = parser_0.error(enum_dict_0, parser_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'template_base.TemplateSyntaxError'
    assert f'{type(var_0.token).__module__}.{type(var_0.token).__qualname__}' == 'enum._EnumDict'
    assert len(var_0.token) == 0
    var_1 = parser_0.error(parser_0, var_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'template_base.TemplateSyntaxError'
    assert f'{type(var_1.token).__module__}.{type(var_1.token).__qualname__}' == 'enum._EnumDict'
    assert len(var_1.token) == 0
    parser_0.isalnum()

def test_case_44():
    var_0 = module_6.any()
    var_1 = var_0.__repr__()
    filter_expression_0 = module_0.FilterExpression(var_1, var_1)
    assert f'{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}' == 'template_base.FilterExpression'
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}' == 'builtins.member_descriptor'

def test_case_45():
    str_0 = '.M9,:8o'
    with pytest.raises(module_0.TemplateSyntaxError):
        module_0.FilterExpression(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_46():
    enum_dict_0 = module_1._EnumDict()
    parser_0 = module_0.Parser(enum_dict_0, enum_dict_0, origin=enum_dict_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'template_base.Parser'
    assert parser_0.tokens == []
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert f'{type(parser_0.libraries).__module__}.{type(parser_0.libraries).__qualname__}' == 'enum._EnumDict'
    assert len(parser_0.libraries) == 0
    assert f'{type(parser_0.origin).__module__}.{type(parser_0.origin).__qualname__}' == 'enum._EnumDict'
    assert len(parser_0.origin) == 0
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    parser_0.skip_past(parser_0)

@pytest.mark.xfail(strict=True)
def test_case_47():
    var_1 = module_2.purge()
    var_2 = var_1.__repr__()
    var_3 = module_0.token_kwargs(var_2, var_1)
    var_0.visit_SetComp(variable_0)

@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = '\r'
    parser_0 = module_0.Parser(str_0)
    assert f'{type(parser_0).__module__}.{type(parser_0).__qualname__}' == 'template_base.Parser'
    assert parser_0.tokens == ['\r']
    assert parser_0.tags == {}
    assert parser_0.filters == {}
    assert parser_0.command_stack == []
    assert parser_0.extra_data == {}
    assert parser_0.libraries == {}
    assert parser_0.origin is None
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    parser_0.parse()

def test_case_51():
    node_list_0 = module_0.NodeList()
    assert f'{type(node_list_0).__module__}.{type(node_list_0).__qualname__}' == 'template_base.NodeList'
    assert len(node_list_0) == 0
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert module_0.NodeList.contains_nontext is False
    debug_lexer_0 = module_0.DebugLexer(node_list_0)
    var_0 = node_list_0.__str__()
    with pytest.raises(AssertionError):
        debug_lexer_0.create_token(var_0, var_0, node_list_0, var_0)

def test_case_52():
    str_0 = 'Z'
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert f'{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}' == 'template_base.FilterExpression'
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}' == 'builtins.member_descriptor'
    token_0 = module_0.Token(str_0, filter_expression_0)
    var_0 = token_0.split_contents()

def test_case_54():
    str_0 = "''"
    var_0 = module_0.token_kwargs(str_0, str_0, str_0)
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'

def test_case_59():
    str_0 = '>#Y8OA\\|_GW'
    variable_0 = module_0.Variable(str_0)
    assert f'{type(variable_0).__module__}.{type(variable_0).__qualname__}' == 'template_base.Variable'
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.Variable.literal).__module__}.{type(module_0.Variable.literal).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Variable.lookups).__module__}.{type(module_0.Variable.lookups).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Variable.message_context).__module__}.{type(module_0.Variable.message_context).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Variable.translate).__module__}.{type(module_0.Variable.translate).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.Variable.var).__module__}.{type(module_0.Variable.var).__qualname__}' == 'builtins.member_descriptor'
    with pytest.raises(module_0.TemplateSyntaxError):
        module_0.FilterExpression(str_0, variable_0)

def test_case_60():
    str_0 = "_uKG&V)'t$^"
    with pytest.raises(module_0.TemplateSyntaxError):
        module_0.FilterExpression(str_0, str_0)

def test_case_61():
    str_0 = ''
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert f'{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}' == 'template_base.FilterExpression'
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}' == 'builtins.member_descriptor'
    var_0 = filter_expression_0.resolve(filter_expression_0)

@pytest.mark.xfail(strict=True)
def test_case_62():
    str_0 = 'd'
    filter_expression_0 = module_0.FilterExpression(str_0, str_0)
    assert f'{type(filter_expression_0).__module__}.{type(filter_expression_0).__qualname__}' == 'template_base.FilterExpression'
    assert module_0.FILTER_SEPARATOR == '|'
    assert module_0.FILTER_ARGUMENT_SEPARATOR == ':'
    assert module_0.VARIABLE_ATTRIBUTE_SEPARATOR == '.'
    assert module_0.BLOCK_TAG_START == '{%'
    assert module_0.BLOCK_TAG_END == '%}'
    assert module_0.VARIABLE_TAG_START == '{{'
    assert module_0.VARIABLE_TAG_END == '}}'
    assert module_0.COMMENT_TAG_START == '{#'
    assert module_0.COMMENT_TAG_END == '#}'
    assert module_0.SINGLE_BRACE_START == '{'
    assert module_0.SINGLE_BRACE_END == '}'
    assert module_0.UNKNOWN_SOURCE == '<unknown source>'
    assert f'{type(module_0.logger).__module__}.{type(module_0.logger).__qualname__}' == 'logging.Logger'
    assert module_0.logger.name == 'django.template'
    assert module_0.logger.level == 0
    assert f'{type(module_0.logger.parent).__module__}.{type(module_0.logger.parent).__qualname__}' == 'logging.RootLogger'
    assert module_0.logger.handlers == []
    assert module_0.constant_string == '(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\')'
    assert module_0.filter_raw_string == '\n^(?P<constant>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n^(?P<var>[\\w\\.\\+-]+)|\n (?:\\s*\\|\\s*\n     (?P<filter_name>\\w+)\n         (?::\n             (?:\n              (?P<constant_arg>(?:_\\("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"\\)|_\\(\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'\\)|"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'))|\n              (?P<var_arg>[\\w\\.\\+-]+)\n             )\n         )?\n )'
    assert f'{type(module_0.filter_re).__module__}.{type(module_0.filter_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.kwarg_re).__module__}.{type(module_0.kwarg_re).__qualname__}' == 'django.utils.functional.SimpleLazyObject'
    assert f'{type(module_0.FilterExpression.filters).__module__}.{type(module_0.FilterExpression.filters).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.is_var).__module__}.{type(module_0.FilterExpression.is_var).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.token).__module__}.{type(module_0.FilterExpression.token).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.FilterExpression.var).__module__}.{type(module_0.FilterExpression.var).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = None
    origin_0 = module_0.Origin(none_type_0, str_0, none_type_0)
    assert f'{type(module_0.Origin.loader_name).__module__}.{type(module_0.Origin.loader_name).__qualname__}' == 'builtins.property'
    var_0 = filter_expression_0.resolve(str_0, str_0)
    filter_expression_0.resolve(origin_0, var_0)