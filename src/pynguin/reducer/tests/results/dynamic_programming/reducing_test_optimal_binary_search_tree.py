# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import optimal_binary_search_tree as module_0

@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    module_0.find_optimal_binary_search_tree(list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    node_0 = module_0.Node(list_0, list_0)
    list_1 = [node_0, node_0]
    module_0.find_optimal_binary_search_tree(list_1)

@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    node_0 = module_0.Node(list_0, list_0)
    list_1 = [node_0]
    var_1 = module_0.find_optimal_binary_search_tree(list_1)
    module_0.find_optimal_binary_search_tree(var_1)

@pytest.mark.xfail(strict=True)
def test_case_8():
    list_0 = []
    int_0 = 0
    var_0 = module_0.Node(int_0, int_0)
    list_1 = [var_0, var_0]
    var_2 = module_0.find_optimal_binary_search_tree(list_1)
    node_0 = module_0.Node(list_1, list_0)
    var_3 = var_0.__str__()
    assert var_3 == 'Node(key=0, freq=0)'
    module_0.print_binary_search_tree(var_3, list_0, int_0, var_2, node_0, var_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    node_0 = module_0.Node(list_0, list_0)
    var_0 = node_0.__str__()
    assert var_0 == 'Node(key=[], freq=[])'
    int_0 = 0
    bytes_0 = b'\xa7\xa2\xc3\x16\xbb\xf1'
    tuple_0 = (bytes_0,)
    module_0.print_binary_search_tree(var_0, node_0, int_0, int_0, int_0, tuple_0)