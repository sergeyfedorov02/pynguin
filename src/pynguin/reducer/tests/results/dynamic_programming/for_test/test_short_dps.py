# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import short_dps as module_0


def test_case_0():
    str_0 = "=PTE2N]f'0?}<8"
    list_0 = [str_0]
    none_type_0 = None
    int_0 = -380
    int_1 = module_0.combination_sum_iv(list_0, none_type_0, int_0)
    assert int_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    int_0 = 2765
    module_0.combination_sum_iv(bool_0, bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    list_0 = [bool_0]
    int_0 = module_0.combination_sum_iv(bool_0, list_0, bool_0)
    assert int_0 == 1
    float_0 = -1094.309888
    int_1 = 700
    bool_1 = False
    list_1 = module_0.longest_subsequence(list_0)
    bool_2 = False
    list_2 = [int_1, bool_1, bool_2, bool_2]
    int_2 = module_0.max_product_subarray(list_2)
    assert int_2 == 700
    set_0 = {float_0}
    var_0 = module_0.matrix_chain_order(set_0)
    dict_0 = {bool_0: bool_0, float_0: set_0, float_0: bool_0, bool_0: float_0}
    float_1 = module_0.max_subarray_sum(dict_0)
    assert float_1 is True
    bool_3 = False
    int_3 = -4069
    list_3 = [bool_3, int_3, bool_3]
    list_4 = module_0.longest_subsequence(list_3)
    list_5 = module_0.longest_subsequence(list_4)
    var_1 = module_0.matrix_chain_order(list_3)
    bool_4 = True
    module_0.is_sum_subset(list_4, bool_4)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    list_0 = []
    bool_0 = False
    int_0 = module_0.combination_sum_iv_bottom_up(none_type_0, list_0, bool_0)
    assert int_0 == 1
    int_1 = -1918
    int_2 = module_0.combination_sum_iv_dp_array(int_0, list_0, int_1)
    assert int_2 == 0
    float_0 = module_0.max_subarray_sum(bool_0, none_type_0)
    assert float_0 == 0
    int_3 = -914
    bool_1 = False
    dict_0 = {int_0: bool_1, bool_0: float_0, bool_0: int_3}
    tuple_0 = (bool_0, int_3, list_0, dict_0)
    list_1 = [tuple_0, int_1]
    bool_2 = True
    module_0.max_subarray_sum(list_1, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_0.combination_sum_iv_dp_array(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "^Cv%"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.matrix_chain_order(dict_0)
    bool_0 = True
    module_0.combination_sum_iv_dp_array(bool_0, var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    list_0 = []
    int_0 = 2758
    module_0.combination_sum_iv_bottom_up(bool_0, list_0, int_0)


def test_case_7():
    bool_0 = False
    bool_1 = False
    list_0 = []
    int_0 = 2757
    int_1 = module_0.combination_sum_iv_bottom_up(bool_1, list_0, int_0)
    assert int_1 == 0
    list_1 = [bool_0, bool_0]
    var_0 = module_0.matrix_chain_order(list_1)


def test_case_8():
    bool_0 = False
    int_0 = -1539
    list_0 = [int_0, bool_0, int_0]
    list_1 = module_0.longest_subsequence(list_0)


def test_case_9():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    var_0 = module_0.matrix_chain_order(list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    var_0 = module_0.print_optiomal_solution(none_type_0, none_type_0, none_type_0)
    module_0.matrix_chain_order(var_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "Ju,Rn\\\\a&K8&(##)2NY"
    tuple_0 = (str_0,)
    list_0 = [tuple_0]
    module_0.print_optiomal_solution(list_0, str_0, list_0)


def test_case_12():
    bool_0 = True
    with pytest.raises(ValueError):
        module_0.max_product_subarray(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    int_0 = module_0.max_product_subarray(bool_0)
    assert int_0 == 0
    none_type_0 = None
    module_0.matrix_chain_order(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    int_0 = -2244
    var_0 = module_0.matrix_chain_order(tuple_0)
    int_1 = 2156
    int_2 = module_0.combination_sum_iv(int_1, int_1, int_0)
    assert int_2 == 0
    list_0 = [int_0, int_0, int_1, int_1]
    int_3 = module_0.max_product_subarray(list_0)
    assert int_3 == 23406863268096
    module_0.max_subarray_sum(tuple_1)


def test_case_15():
    float_0 = 429.31357
    list_0 = [float_0]
    float_1 = module_0.max_subarray_sum(list_0)
    assert float_1 == pytest.approx(429.31357, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        module_0.max_product_subarray(float_0)


def test_case_16():
    bool_0 = False
    bool_1 = False
    list_0 = []
    bool_2 = module_0.is_sum_subset(list_0, bool_0)
    assert bool_2 is True
    float_0 = module_0.max_subarray_sum(bool_0)
    assert float_0 == 0
    int_0 = module_0.combination_sum_iv_dp_array(bool_0, bool_0, bool_1)
    assert int_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    bool_1 = True
    int_0 = -4069
    list_0 = []
    list_1 = module_0.longest_subsequence(list_0)
    list_2 = [int_0]
    bool_2 = module_0.is_sum_subset(list_2, bool_0)
    assert bool_2 is True
    none_type_0 = None
    set_0 = {bool_2, bool_1, int_0}
    var_0 = module_0.dp_count(set_0, int_0)
    assert var_0 == 0
    int_1 = module_0.combination_sum_iv_bottom_up(list_0, none_type_0, var_0)
    assert int_1 == 1
    bool_3 = False
    module_0.combination_sum_iv_dp_array(bool_3, var_0, bool_1)


def test_case_18():
    bool_0 = True
    int_0 = 700
    list_0 = [int_0, bool_0, bool_0, bool_0]
    int_1 = module_0.max_product_subarray(list_0)
    assert int_1 == 700
    int_2 = 794
    list_1 = [bool_0, int_2, bool_0]
    list_2 = module_0.longest_subsequence(list_1)
    var_0 = module_0.dp_count(list_0, int_1)
    assert var_0 == 246052
    var_1 = module_0.find_min(list_0)
    assert var_1 == 1
    int_3 = 683
    list_3 = [int_3, int_2]
    int_4 = 4587
    int_5 = module_0.combination_sum_iv_dp_array(int_4, list_3, int_3)
    assert int_5 == 1


def test_case_19():
    bytes_0 = b"\xc6\xfa\xb3\x8d\x00\x96b=\xa7\xc9A\x80\x9a"
    int_0 = -644
    bool_0 = False
    bool_1 = False
    list_0 = [int_0, bool_0, bool_1]
    list_1 = [list_0, list_0]
    int_1 = module_0.minimum_cost_path(list_1)
    assert int_1 == -2576
    var_0 = module_0.find_min(bytes_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\xfb@\xc4x\x91\xd8Y"
    var_0 = module_0.find_min(bytes_0)
    assert var_0 == 1
    list_0 = [var_0, var_0, bytes_0, var_0]
    module_0.find_min(list_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    list_0 = []
    none_type_0 = None
    float_0 = module_0.max_subarray_sum(none_type_0)
    assert float_0 == 0
    module_0.find_min(list_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    float_0 = -1094.309888
    int_0 = 700
    bool_1 = True
    list_0 = [int_0, bool_1, bool_0, bool_0]
    int_1 = module_0.max_product_subarray(list_0)
    assert int_1 == 700
    set_0 = {float_0}
    float_1 = 615.56
    var_0 = module_0.matrix_chain_order(set_0)
    dict_0 = {bool_0: bool_0, float_0: set_0, float_0: float_1, bool_0: float_0}
    float_2 = module_0.max_subarray_sum(dict_0)
    assert float_2 is True
    bool_2 = False
    bool_3 = False
    int_2 = -4069
    list_1 = [bool_3, int_2, bool_3]
    list_2 = [int_2]
    list_3 = module_0.longest_subsequence(list_1)
    bool_4 = False
    int_3 = module_0.combination_sum_iv(bool_4, int_0, bool_2)
    assert int_3 == 1
    var_1 = module_0.matrix_chain_order(list_1)
    bool_5 = module_0.is_sum_subset(list_2, bool_2)
    assert bool_5 is True
    module_0.combination_sum_iv_dp_array(int_2, list_2, int_1)


def test_case_23():
    int_0 = 176
    bool_0 = False
    int_1 = -1539
    list_0 = [int_0, bool_0, int_1]
    list_1 = module_0.longest_subsequence(list_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    list_0 = []
    bool_0 = False
    int_0 = module_0.combination_sum_iv_bottom_up(none_type_0, list_0, bool_0)
    assert int_0 == 1
    int_1 = -1918
    float_0 = module_0.max_subarray_sum(bool_0, none_type_0)
    assert float_0 == 0
    int_2 = -914
    bool_1 = False
    dict_0 = {int_0: bool_1, bool_0: float_0, bool_0: int_2}
    tuple_0 = (bool_0, int_2, list_0, dict_0)
    list_1 = [tuple_0, int_1]
    bool_2 = True
    module_0.max_subarray_sum(list_1, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    bool_1 = True
    int_0 = -4069
    list_0 = []
    list_1 = module_0.longest_subsequence(list_0)
    list_2 = [int_0]
    bool_2 = module_0.is_sum_subset(list_2, bool_0)
    assert bool_2 is True
    none_type_0 = None
    module_0.print_optiomal_solution(bool_1, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = False
    bool_1 = False
    int_0 = -4069
    list_0 = []
    list_1 = module_0.longest_subsequence(list_0)
    list_2 = [int_0]
    bool_2 = module_0.is_sum_subset(list_2, bool_0)
    assert bool_2 is True
    float_0 = module_0.max_subarray_sum(bool_0)
    assert float_0 == 0
    none_type_0 = None
    bool_3 = True
    int_1 = module_0.combination_sum_iv(bool_0, list_0, bool_3)
    assert int_1 == 0
    module_0.print_optiomal_solution(bool_1, bool_0, none_type_0)


def test_case_27():
    dict_0 = {}
    list_0 = []
    bool_0 = True
    int_0 = module_0.combination_sum_iv_dp_array(dict_0, list_0, bool_0)
    assert int_0 == 0


def test_case_28():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = module_0.is_sum_subset(list_0, bool_0)
    assert bool_1 is True
    set_0 = {bool_1, bool_0, bool_0}
    float_0 = module_0.max_subarray_sum(set_0)
    assert float_0 is True


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    bool_1 = True
    int_0 = -4069
    list_0 = [bool_1, int_0, bool_1]
    list_1 = module_0.longest_subsequence(list_0)
    list_2 = [int_0]
    list_3 = module_0.longest_subsequence(list_1)
    var_0 = module_0.matrix_chain_order(list_0)
    bool_2 = module_0.is_sum_subset(list_2, bool_0)
    assert bool_2 is True
    module_0.combination_sum_iv_dp_array(list_2, list_2, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b"\x1b"
    bool_0 = True
    int_0 = module_0.combination_sum_iv_bottom_up(bool_0, bytes_0, bool_0)
    assert int_0 == 0
    int_1 = -2264
    int_2 = 2156
    int_3 = module_0.combination_sum_iv(int_2, int_2, int_1)
    assert int_3 == 0
    list_0 = [int_1, int_1, int_2, int_2]
    int_4 = module_0.max_product_subarray(list_0)
    assert int_4 == 23825957241856
    int_5 = 1218
    module_0.is_sum_subset(int_4, int_5)


@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = False
    bool_1 = True
    str_0 = "\\$=P"
    bool_2 = module_0.is_sum_subset(str_0, bool_0)
    assert bool_2 is True
    int_0 = 1898
    int_1 = -5362
    int_2 = 1238
    list_0 = [int_1, int_2]
    module_0.combination_sum_iv_bottom_up(int_0, list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = True
    bool_1 = False
    int_0 = -4069
    list_0 = []
    int_1 = module_0.combination_sum_iv(bool_1, list_0, bool_1)
    assert int_1 == 1
    list_1 = [bool_1, int_0, bool_1]
    list_2 = module_0.longest_subsequence(list_1)
    list_3 = []
    int_2 = module_0.max_product_subarray(list_3)
    assert int_2 == 0
    list_4 = [int_1, int_2, int_0]
    list_5 = module_0.longest_subsequence(list_2)
    var_0 = module_0.matrix_chain_order(list_1)
    bool_2 = module_0.is_sum_subset(list_4, bool_0)
    assert bool_2 is True
    module_0.combination_sum_iv_dp_array(list_4, list_4, bool_2)


def test_case_33():
    int_0 = -2437
    bool_0 = False
    int_1 = -1035
    list_0 = [int_0, bool_0, int_1]
    int_2 = module_0.max_product_subarray(list_0)
    assert int_2 is False
    var_0 = module_0.matrix_chain_order(list_0)
    with pytest.raises(ValueError):
        module_0.max_product_subarray(var_0)


def test_case_34():
    int_0 = 700
    bool_0 = False
    list_0 = [int_0, bool_0, bool_0, bool_0]
    int_1 = module_0.max_product_subarray(list_0)
    assert int_1 == 700
    list_1 = module_0.longest_subsequence(list_0)
    var_0 = module_0.find_min(list_0)
    assert var_0 == 0
    var_1 = module_0.matrix_chain_order(list_0)
    int_2 = module_0.minimum_cost_path(var_1)


def test_case_35():
    bool_0 = True
    int_0 = 700
    bool_1 = False
    list_0 = [int_0, bool_1, bool_1, bool_1]
    int_1 = module_0.max_product_subarray(list_0)
    assert int_1 == 700
    bool_2 = module_0.is_sum_subset(list_0, bool_0)
    assert bool_2 is False
    list_1 = module_0.longest_subsequence(list_0)
    var_0 = module_0.find_min(list_0)
    assert var_0 == 0
    var_1 = module_0.matrix_chain_order(list_0)
    int_2 = module_0.minimum_cost_path(var_1)


def test_case_36():
    bool_0 = True
    float_0 = -1094.309888
    int_0 = 700
    bool_1 = False
    list_0 = [int_0, bool_1, bool_1, bool_1]
    int_1 = module_0.max_product_subarray(list_0)
    assert int_1 == 700
    set_0 = {float_0}
    float_1 = 615.56
    var_0 = module_0.matrix_chain_order(set_0)
    dict_0 = {bool_0: bool_0, float_0: set_0, float_0: float_1, bool_0: float_0}
    float_2 = module_0.max_subarray_sum(dict_0)
    assert float_2 is True
    int_2 = 794
    list_1 = [bool_0, int_2, bool_0]
    list_2 = module_0.longest_subsequence(list_1)
    var_1 = module_0.dp_count(list_0, int_1)
    assert var_1 == 8
    var_2 = module_0.find_min(list_0)
    assert var_2 == 0
    var_3 = module_0.matrix_chain_order(var_0)
    int_3 = module_0.minimum_cost_path(var_3)
    int_4 = module_0.minimum_cost_path(var_0)
    int_5 = 673
    list_3 = [int_5, int_2]
    bool_2 = True
    int_6 = 3334
    int_7 = module_0.combination_sum_iv_dp_array(bool_2, list_3, int_6)
    assert int_7 == 0
