# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import short_dps as module_0

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    list_0 = [bool_0]
    int_0 = module_0.combination_sum_iv(bool_0, list_0, bool_0)
    assert int_0 == 1
    bool_3 = False
    int_3 = -4069
    list_3 = [bool_3, int_3, bool_3]
    list_4 = module_0.longest_subsequence(list_3)
    bool_4 = True
    module_0.is_sum_subset(list_4, bool_4)

@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    list_0 = []
    int_0 = 2758
    module_0.combination_sum_iv_bottom_up(bool_0, list_0, int_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    var_0 = module_0.print_optiomal_solution(none_type_0, none_type_0, none_type_0)
    module_0.matrix_chain_order(var_0)

@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = False
    bool_1 = True
    int_0 = -4069
    list_2 = [int_0]
    bool_2 = module_0.is_sum_subset(list_2, bool_0)
    assert bool_2 is True
    set_0 = {bool_2, bool_1, int_0}
    var_0 = module_0.dp_count(set_0, int_0)
    assert var_0 == 0
    module_0.combination_sum_iv_dp_array(bool_3, var_0, bool_1)

@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b'\xfb@\xc4x\x91\xd8Y'
    var_0 = module_0.find_min(bytes_0)
    assert var_0 == 1
    list_0 = [var_0, var_0, bytes_0, var_0]
    module_0.find_min(list_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    list_0 = []
    module_0.find_min(list_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    list_0 = []
    bool_0 = False
    int_0 = module_0.combination_sum_iv_bottom_up(none_type_0, list_0, bool_0)
    assert int_0 == 1
    int_1 = -1918
    float_0 = module_0.max_subarray_sum(bool_0, none_type_0)
    assert float_0 == 0
    int_2 = -914
    bool_1 = False
    dict_0 = {int_0: bool_1, bool_0: float_0, bool_0: int_2}
    tuple_0 = (bool_0, int_2, list_0, dict_0)
    list_1 = [tuple_0, int_1]
    bool_2 = True
    module_0.max_subarray_sum(list_1, bool_2)

@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = False
    bool_1 = False
    none_type_0 = None

@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    int_0 = -4069

@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b'\x1b'
    bool_0 = True
    int_0 = module_0.combination_sum_iv_bottom_up(bool_0, bytes_0, bool_0)
    assert int_0 == 0
    int_1 = -2264
    int_2 = 2156
    int_3 = module_0.combination_sum_iv(int_2, int_2, int_1)
    assert int_3 == 0
    list_0 = [int_1, int_1, int_2, int_2]
    int_4 = module_0.max_product_subarray(list_0)
    assert int_4 == 23825957241856
    int_5 = 1218
    module_0.is_sum_subset(int_4, int_5)

@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_1 = True

@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = True
    bool_1 = False
    int_0 = -4069
    list_0 = []
    int_1 = module_0.combination_sum_iv(bool_1, list_0, bool_1)
    assert int_1 == 1
    list_3 = []
    int_2 = module_0.max_product_subarray(list_3)
    assert int_2 == 0
    list_4 = [int_1, int_2, int_0]
    bool_2 = module_0.is_sum_subset(list_4, bool_0)
    assert bool_2 is True
    module_0.combination_sum_iv_dp_array(list_4, list_4, bool_2)

def test_case_33():
    int_0 = -2437
    bool_0 = False
    int_1 = -1035
    list_0 = [int_0, bool_0, int_1]
    var_0 = module_0.matrix_chain_order(list_0)
    with pytest.raises(ValueError):
        module_0.max_product_subarray(var_0)

def test_case_35():
    bool_0 = True
    int_0 = 700
    bool_1 = False
    list_0 = [int_0, bool_1, bool_1, bool_1]
    bool_2 = module_0.is_sum_subset(list_0, bool_0)
    assert bool_2 is False

def test_case_36():
    bool_0 = True
    float_0 = -1094.309888
    int_0 = 700
    bool_1 = False
    list_0 = [int_0, bool_1, bool_1, bool_1]
    int_1 = module_0.max_product_subarray(list_0)
    assert int_1 == 700
    set_0 = {float_0}
    float_1 = 615.56
    var_0 = module_0.matrix_chain_order(set_0)
    dict_0 = {bool_0: bool_0, float_0: set_0, float_0: float_1, bool_0: float_0}
    float_2 = module_0.max_subarray_sum(dict_0)
    assert float_2 is True
    int_2 = 794
    var_1 = module_0.dp_count(list_0, int_1)
    assert var_1 == 8