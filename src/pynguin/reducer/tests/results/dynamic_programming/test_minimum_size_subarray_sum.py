# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_size_subarray_sum as module_0


def test_case_0():
    bool_0 = True
    with pytest.raises(ValueError):
        module_0.minimum_subarray_sum(bool_0, bool_0)


def test_case_1():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    int_0 = module_0.minimum_subarray_sum(bool_0, list_0)
    assert int_0 == 1
    list_1 = []
    int_1 = module_0.minimum_subarray_sum(bool_0, list_1)
    assert int_1 == 0


def test_case_2():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    int_0 = module_0.minimum_subarray_sum(bool_0, list_0)
    assert int_0 == 1


def test_case_3():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_1, bool_1]
    int_0 = module_0.minimum_subarray_sum(bool_0, list_0)
    assert int_0 == 1
    list_1 = []
    int_1 = module_0.minimum_subarray_sum(bool_0, list_1)
    assert int_1 == 0


def test_case_4():
    bool_0 = False
    list_0 = [bool_0]
    int_0 = module_0.minimum_subarray_sum(bool_0, list_0)
    assert int_0 == 0
    bool_1 = True
    list_1 = [bool_1, bool_1]
    int_1 = module_0.minimum_subarray_sum(bool_0, list_1)
    assert int_1 == 1


def test_case_5():
    str_0 = ""
    tuple_0 = (str_0,)
    with pytest.raises(ValueError):
        module_0.minimum_subarray_sum(tuple_0, tuple_0)


def test_case_6():
    int_0 = -476
    list_0 = [int_0]
    bool_0 = True
    int_1 = module_0.minimum_subarray_sum(bool_0, list_0)
    assert int_1 == 0


def test_case_7():
    int_0 = -91
    list_0 = [int_0, int_0, int_0, int_0]
    int_1 = module_0.minimum_subarray_sum(int_0, list_0)
    assert int_1 == 1


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    bool_1 = False
    int_0 = module_0.minimum_subarray_sum(bool_0, bool_1)
    assert int_0 == 0
    list_0 = [bool_1, bool_0, bool_1]
    int_1 = module_0.minimum_subarray_sum(bool_0, list_0)
    assert int_1 == 1
    int_2 = module_0.minimum_subarray_sum(bool_0, bool_1)
    assert int_2 == 0
    module_0.minimum_subarray_sum(list_0, list_0)
