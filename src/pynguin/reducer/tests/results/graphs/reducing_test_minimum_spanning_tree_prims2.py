# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree_prims2 as module_0

def test_case_4():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    tuple_0 = module_0.prims_algo(graph_undirected_weighted_0)

@pytest.mark.xfail(strict=True)
def test_case_6():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    none_type_0 = None
    int_0 = 876
    none_type_1 = graph_undirected_weighted_0.add_edge(graph_undirected_weighted_0, none_type_0, int_0)
    assert len(graph_undirected_weighted_0) == 2
    tuple_0 = module_0.prims_algo(graph_undirected_weighted_0)
    none_type_2 = None
    graph_undirected_weighted_0.add_edge(tuple_0, none_type_2, none_type_1)

@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    str_0 = graph_undirected_weighted_0.__repr__()
    assert str_0 == '{}'
    int_0 = module_0.get_child_left_position(bool_0)
    assert int_0 == 1
    none_type_0 = graph_undirected_weighted_0.add_edge(int_0, graph_undirected_weighted_0, bool_0)
    assert len(graph_undirected_weighted_0) == 2
    none_type_1 = graph_undirected_weighted_0.add_edge(str_0, int_0, bool_0)
    assert len(graph_undirected_weighted_0) == 3
    none_type_2 = graph_undirected_weighted_0.add_edge(graph_undirected_weighted_0, none_type_1, int_0)
    assert len(graph_undirected_weighted_0) == 4
    int_1 = -538
    tuple_0 = (int_1, bool_0)
    none_type_3 = graph_undirected_weighted_0.add_edge(tuple_0, bool_0, bool_0)
    assert len(graph_undirected_weighted_0) == 6
    tuple_1 = module_0.prims_algo(graph_undirected_weighted_0)
    module_0.prims_algo(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    none_type_0 = graph_undirected_weighted_0.add_edge(graph_undirected_weighted_0, graph_undirected_weighted_0, bool_0)
    assert len(graph_undirected_weighted_0) == 1