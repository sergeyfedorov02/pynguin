# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree_boruvka as module_0

def test_case_0():
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_0 = graph_0.distinct_weight()

@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_0 = graph_0.add_edge(none_type_0, none_type_0, none_type_0)
    assert graph_0.num_vertices == 1
    assert graph_0.adjacency == {None: {}}
    var_0.distinct_weight()

@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_0 = graph_0.boruvka_mst(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'minimum_spanning_tree_boruvka.Graph'
    assert var_0.num_vertices == 0
    assert var_0.num_edges == 0
    assert var_0.adjacency == {}
    var_1 = graph_0.add_vertex(graph_0)
    assert graph_0.num_vertices == 1
    assert len(graph_0.adjacency) == 1
    var_2 = graph_0.__str__()
    assert var_2 == ''
    var_3 = var_0.add_vertex(bool_0)
    assert var_0.num_vertices == 1
    assert var_0.adjacency == {True: {}}
    var_0.boruvka_mst(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    graph_0.build()

def test_case_5():
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_0 = graph_0.boruvka_mst(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'minimum_spanning_tree_boruvka.Graph'
    assert var_0.num_vertices == 0
    assert var_0.num_edges == 0
    assert var_0.adjacency == {}
    var_1 = graph_0.get_edges()
    bytes_0 = b'9\x17C\xc4K\xb6\x15Z\x8e\xd5\xdf>\xa8\xa5\xbc'
    graph_1 = graph_0.add_edge(bytes_0, var_0, var_0)
    assert graph_0.num_vertices == 2
    assert len(graph_0.adjacency) == 2
    var_2 = var_0.boruvka_mst(graph_0)
    assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'minimum_spanning_tree_boruvka.Graph'
    assert var_2.num_vertices == 2
    assert var_2.num_edges == 0
    assert f'{type(var_2.adjacency).__module__}.{type(var_2.adjacency).__qualname__}' == 'builtins.dict'
    assert len(var_2.adjacency) == 2
    graph_2 = module_0.Graph()
    assert graph_2.num_edges == 0

@pytest.mark.xfail(strict=True)
def test_case_6():
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_0 = graph_0.boruvka_mst(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'minimum_spanning_tree_boruvka.Graph'
    assert var_0.num_vertices == 0
    assert var_0.num_edges == 0
    assert var_0.adjacency == {}
    var_1 = var_0.boruvka_mst(var_0)
    assert var_1.num_edges == 0
    var_2 = var_0.__str__()
    assert var_2 == ''
    var_3 = var_1.boruvka_mst(graph_0)
    assert var_3.num_edges == 0
    graph_1 = module_0.Graph()
    assert graph_1.num_edges == 0
    var_4 = graph_0.get_edges()
    var_3.build(var_0, var_4)

@pytest.mark.xfail(strict=True)
def test_case_9():
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_3 = graph_0.__str__()
    assert var_3 == ''
    var_4 = graph_0.add_edge(graph_0, var_3, var_3)
    assert graph_0.num_vertices == 2
    assert len(graph_0.adjacency) == 2
    var_6 = graph_0.distinct_weight()
    var_2.get_edges()

@pytest.mark.xfail(strict=True)
def test_case_10():
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_2 = graph_0.__str__()
    assert var_2 == ''

@pytest.mark.xfail(strict=True)
def test_case_11():
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_0 = graph_0.boruvka_mst(graph_0)
    assert f'{type(var_0).__module__}.{type(var_0).__qualname__}' == 'minimum_spanning_tree_boruvka.Graph'
    assert var_0.num_vertices == 0
    assert var_0.num_edges == 0
    assert var_0.adjacency == {}
    var_1 = graph_0.add_edge(var_0, graph_0, graph_0)
    assert graph_0.num_vertices == 2
    assert len(graph_0.adjacency) == 2
    var_2 = graph_0.add_edge(graph_0, var_1, var_1)
    assert graph_0.num_vertices == 3
    graph_1 = module_0.Graph()
    assert graph_1.num_edges == 0

@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = ',W-E(^jHq0i\\9CNN*]'
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    graph_0.build(str_0, str_0)

@pytest.mark.xfail(strict=True)
def test_case_13():
    graph_0 = module_0.Graph()
    assert graph_0.num_edges == 0
    var_1 = graph_0.boruvka_mst(graph_0)
    assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'minimum_spanning_tree_boruvka.Graph'
    assert var_1.num_vertices == 0
    assert var_1.num_edges == 0
    assert var_1.adjacency == {}
    var_2 = graph_0.add_vertex(graph_0)
    assert graph_0.num_vertices == 1
    assert len(graph_0.adjacency) == 1
    var_4 = graph_0.add_edge(var_2, var_1, graph_0)
    assert graph_0.num_vertices == 3
    assert len(graph_0.adjacency) == 3
    var_5 = graph_0.add_edge(var_1, graph_0, var_4)
    graph_0.boruvka_mst(graph_0)