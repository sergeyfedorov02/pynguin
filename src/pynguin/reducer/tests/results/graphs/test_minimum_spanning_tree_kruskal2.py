# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree_kruskal2 as module_0


def test_case_0():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert (
        f"{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert graph_undirected_weighted_1.connections == {}
    graph_undirected_weighted_2 = graph_undirected_weighted_1.kruskal()
    int_0 = -3411
    disjoint_set_tree_node_0 = module_0.DisjointSetTreeNode(graph_undirected_weighted_2)
    assert (
        f"{type(disjoint_set_tree_node_0).__module__}.{type(disjoint_set_tree_node_0).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert (
        f"{type(disjoint_set_tree_node_0.data).__module__}.{type(disjoint_set_tree_node_0.data).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert (
        f"{type(disjoint_set_tree_node_0.parent).__module__}.{type(disjoint_set_tree_node_0.parent).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert disjoint_set_tree_node_0.rank == 0
    none_type_0 = graph_undirected_weighted_2.add_edge(
        graph_undirected_weighted_2, graph_undirected_weighted_0, int_0
    )
    assert len(graph_undirected_weighted_2.connections) == 2
    graph_undirected_weighted_3 = graph_undirected_weighted_2.kruskal()
    assert (
        f"{type(graph_undirected_weighted_3).__module__}.{type(graph_undirected_weighted_3).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert (
        f"{type(graph_undirected_weighted_3.connections).__module__}.{type(graph_undirected_weighted_3.connections).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_undirected_weighted_3.connections) == 2


def test_case_1():
    bool_0 = True
    disjoint_set_tree_node_0 = module_0.DisjointSetTreeNode(bool_0)
    assert (
        f"{type(disjoint_set_tree_node_0).__module__}.{type(disjoint_set_tree_node_0).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert disjoint_set_tree_node_0.data is True
    assert (
        f"{type(disjoint_set_tree_node_0.parent).__module__}.{type(disjoint_set_tree_node_0.parent).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert disjoint_set_tree_node_0.rank == 0
    disjoint_set_tree_0 = module_0.DisjointSetTree()
    assert disjoint_set_tree_0.map == {}
    none_type_0 = disjoint_set_tree_0.link(
        disjoint_set_tree_node_0, disjoint_set_tree_node_0
    )
    assert disjoint_set_tree_node_0.rank == 1


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b"#\xfe3W"
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    none_type_0 = graph_undirected_weighted_0.add_node(bytes_0)
    assert graph_undirected_weighted_0.connections == {b"#\xfe3W": {}}
    disjoint_set_tree_0 = module_0.DisjointSetTree()
    assert disjoint_set_tree_0.map == {}
    disjoint_set_tree_0.find_set(graph_undirected_weighted_0)


def test_case_3():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert (
        f"{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert graph_undirected_weighted_1.connections == {}
    graph_undirected_weighted_2 = graph_undirected_weighted_1.kruskal()
    int_0 = -950
    disjoint_set_tree_node_0 = module_0.DisjointSetTreeNode(graph_undirected_weighted_2)
    assert (
        f"{type(disjoint_set_tree_node_0).__module__}.{type(disjoint_set_tree_node_0).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert (
        f"{type(disjoint_set_tree_node_0.data).__module__}.{type(disjoint_set_tree_node_0.data).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert (
        f"{type(disjoint_set_tree_node_0.parent).__module__}.{type(disjoint_set_tree_node_0.parent).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert disjoint_set_tree_node_0.rank == 0
    none_type_0 = graph_undirected_weighted_2.add_edge(
        graph_undirected_weighted_2, graph_undirected_weighted_0, int_0
    )
    assert len(graph_undirected_weighted_2.connections) == 2
    bool_0 = False
    none_type_1 = graph_undirected_weighted_2.add_edge(
        graph_undirected_weighted_2, disjoint_set_tree_node_0, bool_0
    )
    graph_undirected_weighted_3 = graph_undirected_weighted_2.kruskal()
    assert (
        f"{type(graph_undirected_weighted_3).__module__}.{type(graph_undirected_weighted_3).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert (
        f"{type(graph_undirected_weighted_3.connections).__module__}.{type(graph_undirected_weighted_3.connections).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_undirected_weighted_3.connections) == 3


def test_case_4():
    none_type_0 = None
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert (
        f"{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert graph_undirected_weighted_1.connections == {}
    none_type_1 = graph_undirected_weighted_1.add_node(none_type_0)
    assert graph_undirected_weighted_1.connections == {None: {}}
    graph_undirected_weighted_2 = graph_undirected_weighted_1.kruskal()
    assert (
        f"{type(graph_undirected_weighted_2).__module__}.{type(graph_undirected_weighted_2).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert graph_undirected_weighted_2.connections == {}


def test_case_5():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert (
        f"{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert graph_undirected_weighted_1.connections == {}
    graph_undirected_weighted_2 = module_0.GraphUndirectedWeighted()


def test_case_6():
    none_type_0 = None
    disjoint_set_tree_0 = module_0.DisjointSetTree()
    assert disjoint_set_tree_0.map == {}
    none_type_1 = disjoint_set_tree_0.make_set(none_type_0)
    assert (
        f"{type(disjoint_set_tree_0.map).__module__}.{type(disjoint_set_tree_0.map).__qualname__}"
        == "builtins.dict"
    )
    assert len(disjoint_set_tree_0.map) == 1


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    disjoint_set_tree_0 = module_0.DisjointSetTree()
    assert disjoint_set_tree_0.map == {}
    disjoint_set_tree_0.union(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    disjoint_set_tree_0 = module_0.DisjointSetTree()
    assert disjoint_set_tree_0.map == {}
    disjoint_set_tree_0.find_set(graph_undirected_weighted_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    graph_undirected_weighted_1 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_1.connections == {}
    disjoint_set_tree_node_0 = module_0.DisjointSetTreeNode(graph_undirected_weighted_1)
    assert (
        f"{type(disjoint_set_tree_node_0).__module__}.{type(disjoint_set_tree_node_0).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert (
        f"{type(disjoint_set_tree_node_0.data).__module__}.{type(disjoint_set_tree_node_0.data).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert (
        f"{type(disjoint_set_tree_node_0.parent).__module__}.{type(disjoint_set_tree_node_0.parent).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert disjoint_set_tree_node_0.rank == 0
    none_type_0 = graph_undirected_weighted_1.add_node(graph_undirected_weighted_0)
    assert (
        f"{type(graph_undirected_weighted_1.connections).__module__}.{type(graph_undirected_weighted_1.connections).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_undirected_weighted_1.connections) == 1
    bool_0 = False
    none_type_1 = graph_undirected_weighted_1.add_edge(
        graph_undirected_weighted_1, disjoint_set_tree_node_0, bool_0
    )
    assert len(graph_undirected_weighted_1.connections) == 3
    graph_undirected_weighted_1.kruskal()


@pytest.mark.xfail(strict=True)
def test_case_10():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    none_type_0 = None
    none_type_1 = graph_undirected_weighted_0.add_edge(
        graph_undirected_weighted_0, graph_undirected_weighted_0, none_type_0
    )
    assert (
        f"{type(graph_undirected_weighted_0.connections).__module__}.{type(graph_undirected_weighted_0.connections).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_undirected_weighted_0.connections) == 1
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert (
        f"{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert graph_undirected_weighted_1.connections == {}
    none_type_2 = graph_undirected_weighted_1.add_edge(
        graph_undirected_weighted_0, none_type_1, graph_undirected_weighted_1
    )
    none_type_3 = graph_undirected_weighted_0.add_node(graph_undirected_weighted_1)
    graph_undirected_weighted_2 = graph_undirected_weighted_1.kruskal()
    assert (
        f"{type(graph_undirected_weighted_2).__module__}.{type(graph_undirected_weighted_2).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert (
        f"{type(graph_undirected_weighted_2.connections).__module__}.{type(graph_undirected_weighted_2.connections).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_undirected_weighted_2.connections) == 2
    disjoint_set_tree_node_0 = module_0.DisjointSetTreeNode(none_type_1)
    assert disjoint_set_tree_node_0.rank == 0
    graph_undirected_weighted_0.kruskal()


def test_case_11():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert (
        f"{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert graph_undirected_weighted_1.connections == {}
    graph_undirected_weighted_2 = graph_undirected_weighted_1.kruskal()
    int_0 = -3411
    disjoint_set_tree_node_0 = module_0.DisjointSetTreeNode(graph_undirected_weighted_2)
    assert (
        f"{type(disjoint_set_tree_node_0).__module__}.{type(disjoint_set_tree_node_0).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert (
        f"{type(disjoint_set_tree_node_0.data).__module__}.{type(disjoint_set_tree_node_0.data).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert (
        f"{type(disjoint_set_tree_node_0.parent).__module__}.{type(disjoint_set_tree_node_0.parent).__qualname__}"
        == "minimum_spanning_tree_kruskal2.DisjointSetTreeNode"
    )
    assert disjoint_set_tree_node_0.rank == 0
    none_type_0 = graph_undirected_weighted_2.add_edge(
        graph_undirected_weighted_2, graph_undirected_weighted_0, int_0
    )
    assert len(graph_undirected_weighted_2.connections) == 2
    none_type_1 = None
    disjoint_set_tree_0 = module_0.DisjointSetTree()
    assert disjoint_set_tree_0.map == {}
    none_type_2 = disjoint_set_tree_0.make_set(none_type_1)
    assert (
        f"{type(disjoint_set_tree_0.map).__module__}.{type(disjoint_set_tree_0.map).__qualname__}"
        == "builtins.dict"
    )
    assert len(disjoint_set_tree_0.map) == 1
    disjoint_set_tree_node_1 = module_0.DisjointSetTreeNode(disjoint_set_tree_node_0)
    assert disjoint_set_tree_node_1.rank == 0
    none_type_3 = disjoint_set_tree_0.link(
        disjoint_set_tree_node_0, disjoint_set_tree_node_1
    )
    assert disjoint_set_tree_node_1.rank == 1
    none_type_4 = disjoint_set_tree_0.link(
        disjoint_set_tree_node_0, disjoint_set_tree_node_1
    )
    graph_undirected_weighted_3 = graph_undirected_weighted_2.kruskal()
    assert (
        f"{type(graph_undirected_weighted_3).__module__}.{type(graph_undirected_weighted_3).__qualname__}"
        == "minimum_spanning_tree_kruskal2.GraphUndirectedWeighted"
    )
    assert (
        f"{type(graph_undirected_weighted_3.connections).__module__}.{type(graph_undirected_weighted_3.connections).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_undirected_weighted_3.connections) == 2
