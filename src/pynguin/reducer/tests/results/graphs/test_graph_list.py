# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import graph_list as module_0
import pprint as module_1


def test_case_0():
    bool_0 = False
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    graph_adjacency_list_1 = graph_adjacency_list_0.add_edge(bool_0, bool_0)
    assert graph_adjacency_list_0.adj_list == {False: []}
    assert (
        f"{type(graph_adjacency_list_1).__module__}.{type(graph_adjacency_list_1).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_1.adj_list == {False: []}
    assert graph_adjacency_list_1.directed is True
    str_0 = graph_adjacency_list_1.__repr__()
    assert str_0 == "{False: []}"


@pytest.mark.xfail(strict=True)
def test_case_1():
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    bool_0 = True
    graph_adjacency_list_1 = module_0.GraphAdjacencyList(bool_0)
    assert (
        f"{type(graph_adjacency_list_1).__module__}.{type(graph_adjacency_list_1).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_1.adj_list == {}
    assert graph_adjacency_list_1.directed is True
    graph_adjacency_list_2 = module_0.GraphAdjacencyList()
    graph_adjacency_list_3 = module_0.GraphAdjacencyList()
    graph_adjacency_list_4 = module_0.GraphAdjacencyList()
    bool_1 = False
    graph_adjacency_list_5 = module_0.GraphAdjacencyList(bool_1)
    str_0 = graph_adjacency_list_5.__repr__()
    assert str_0 == "{}"
    str_1 = graph_adjacency_list_5.__repr__()
    assert str_1 == "{}"
    graph_adjacency_list_6 = graph_adjacency_list_2.add_edge(
        str_0, graph_adjacency_list_2
    )
    assert len(graph_adjacency_list_2.adj_list) == 2
    assert (
        f"{type(graph_adjacency_list_6).__module__}.{type(graph_adjacency_list_6).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert (
        f"{type(graph_adjacency_list_6.adj_list).__module__}.{type(graph_adjacency_list_6.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_6.adj_list) == 2
    assert graph_adjacency_list_6.directed is True
    var_0 = module_1.pformat(bool_1)
    graph_adjacency_list_7 = graph_adjacency_list_5.add_edge(
        bool_0, graph_adjacency_list_1
    )
    assert len(graph_adjacency_list_5.adj_list) == 2
    assert (
        f"{type(graph_adjacency_list_7).__module__}.{type(graph_adjacency_list_7).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert (
        f"{type(graph_adjacency_list_7.adj_list).__module__}.{type(graph_adjacency_list_7.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_7.adj_list) == 2
    assert graph_adjacency_list_7.directed is False
    graph_adjacency_list_2.__repr__()


def test_case_2():
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    str_0 = graph_adjacency_list_0.__repr__()
    assert str_0 == "{}"


def test_case_3():
    none_type_0 = None
    none_type_1 = None
    bool_0 = True
    graph_adjacency_list_0 = module_0.GraphAdjacencyList(bool_0)
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    graph_adjacency_list_1 = graph_adjacency_list_0.add_edge(none_type_1, none_type_1)
    assert graph_adjacency_list_0.adj_list == {None: []}
    assert (
        f"{type(graph_adjacency_list_1).__module__}.{type(graph_adjacency_list_1).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_1.adj_list == {None: []}
    assert graph_adjacency_list_1.directed is True
    graph_adjacency_list_2 = graph_adjacency_list_1.add_edge(none_type_0, none_type_0)
    assert graph_adjacency_list_0.adj_list == {None: [None]}
    assert graph_adjacency_list_1.adj_list == {None: [None]}
    assert graph_adjacency_list_2.adj_list == {None: [None]}
    str_0 = graph_adjacency_list_2.__repr__()
    assert str_0 == "{None: [None]}"


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    graph_adjacency_list_1 = module_0.GraphAdjacencyList()
    assert graph_adjacency_list_1.adj_list == {}
    assert graph_adjacency_list_1.directed is True
    graph_adjacency_list_2 = graph_adjacency_list_0.add_edge(none_type_0, none_type_0)
    assert graph_adjacency_list_0.adj_list == {None: []}
    assert (
        f"{type(graph_adjacency_list_2).__module__}.{type(graph_adjacency_list_2).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_2.adj_list == {None: []}
    assert graph_adjacency_list_2.directed is True
    graph_adjacency_list_3 = graph_adjacency_list_2.add_edge(bool_0, bool_0)
    assert graph_adjacency_list_0.adj_list == {None: [], False: []}
    assert graph_adjacency_list_2.adj_list == {None: [], False: []}
    assert graph_adjacency_list_3.adj_list == {None: [], False: []}
    graph_adjacency_list_4 = graph_adjacency_list_2.add_edge(
        bool_0, graph_adjacency_list_3
    )
    assert len(graph_adjacency_list_0.adj_list) == 3
    assert len(graph_adjacency_list_2.adj_list) == 3
    assert len(graph_adjacency_list_3.adj_list) == 3
    assert len(graph_adjacency_list_4.adj_list) == 3
    graph_adjacency_list_0.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 1620.478133
    var_0 = module_1.pformat(float_0, float_0, compact=float_0, sort_dicts=float_0)
    str_0 = var_0.__repr__()
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    str_1 = graph_adjacency_list_0.__repr__()
    assert str_1 == "{}"
    bool_0 = False
    str_2 = graph_adjacency_list_0.__repr__()
    assert str_2 == "{}"
    graph_adjacency_list_1 = graph_adjacency_list_0.add_edge(bool_0, float_0)
    assert len(graph_adjacency_list_0.adj_list) == 2
    assert (
        f"{type(graph_adjacency_list_1).__module__}.{type(graph_adjacency_list_1).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert (
        f"{type(graph_adjacency_list_1.adj_list).__module__}.{type(graph_adjacency_list_1.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_1.adj_list) == 2
    assert graph_adjacency_list_1.directed is True
    graph_adjacency_list_2 = graph_adjacency_list_1.add_edge(
        graph_adjacency_list_0, float_0
    )
    assert len(graph_adjacency_list_0.adj_list) == 3
    assert len(graph_adjacency_list_1.adj_list) == 3
    assert (
        f"{type(graph_adjacency_list_2).__module__}.{type(graph_adjacency_list_2).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert (
        f"{type(graph_adjacency_list_2.adj_list).__module__}.{type(graph_adjacency_list_2.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_2.adj_list) == 3
    assert graph_adjacency_list_2.directed is True
    bool_1 = True
    graph_adjacency_list_3 = module_0.GraphAdjacencyList(bool_1)
    dict_0 = {float_0: float_0, float_0: float_0, float_0: graph_adjacency_list_3}
    graph_adjacency_list_4 = module_0.GraphAdjacencyList()
    graph_adjacency_list_1.add_edge(str_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    graph_adjacency_list_0 = module_0.GraphAdjacencyList(bool_0)
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is False
    str_0 = 'eud\n_"\tc.X\r@*R5'
    none_type_0 = None
    graph_adjacency_list_1 = module_0.GraphAdjacencyList()
    graph_adjacency_list_2 = graph_adjacency_list_1.add_edge(none_type_0, str_0)
    assert graph_adjacency_list_1.adj_list == {
        None: ['eud\n_"\tc.X\r@*R5'],
        'eud\n_"\tc.X\r@*R5': [],
    }
    assert (
        f"{type(graph_adjacency_list_2).__module__}.{type(graph_adjacency_list_2).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_2.adj_list == {
        None: ['eud\n_"\tc.X\r@*R5'],
        'eud\n_"\tc.X\r@*R5': [],
    }
    assert graph_adjacency_list_2.directed is True
    str_1 = graph_adjacency_list_2.__repr__()
    assert str_1 == "{None: ['eud\\n_\"\\tc.X\\r@*R5'], 'eud\\n_\"\\tc.X\\r@*R5': []}"
    graph_adjacency_list_3 = graph_adjacency_list_0.add_edge(none_type_0, str_1)
    assert graph_adjacency_list_0.adj_list == {
        None: ["{None: ['eud\\n_\"\\tc.X\\r@*R5'], 'eud\\n_\"\\tc.X\\r@*R5': []}"],
        "{None: ['eud\\n_\"\\tc.X\\r@*R5'], 'eud\\n_\"\\tc.X\\r@*R5': []}": [None],
    }
    assert (
        f"{type(graph_adjacency_list_3).__module__}.{type(graph_adjacency_list_3).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_3.adj_list == {
        None: ["{None: ['eud\\n_\"\\tc.X\\r@*R5'], 'eud\\n_\"\\tc.X\\r@*R5': []}"],
        "{None: ['eud\\n_\"\\tc.X\\r@*R5'], 'eud\\n_\"\\tc.X\\r@*R5': []}": [None],
    }
    assert graph_adjacency_list_3.directed is False
    graph_adjacency_list_4 = graph_adjacency_list_3.add_edge(
        graph_adjacency_list_0, bool_0
    )
    graph_adjacency_list_5 = graph_adjacency_list_4.add_edge(str_0, str_0)
    graph_adjacency_list_6 = module_0.GraphAdjacencyList()
    str_2 = graph_adjacency_list_2.__repr__()
    assert str_2 == "{None: ['eud\\n_\"\\tc.X\\r@*R5'], 'eud\\n_\"\\tc.X\\r@*R5': []}"
    bool_1 = False
    graph_adjacency_list_7 = module_0.GraphAdjacencyList(bool_1)
    str_3 = graph_adjacency_list_7.__repr__()
    assert str_3 == "{}"
    str_4 = graph_adjacency_list_7.__repr__()
    assert str_4 == "{}"
    dict_0 = {bool_1: bool_1}
    graph_adjacency_list_8 = graph_adjacency_list_5.add_edge(
        str_0, graph_adjacency_list_5
    )
    var_0 = module_1.pformat(bool_1)
    var_0.add_edge(bool_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    graph_adjacency_list_1 = graph_adjacency_list_0.add_edge(
        graph_adjacency_list_0, graph_adjacency_list_0
    )
    assert (
        f"{type(graph_adjacency_list_0.adj_list).__module__}.{type(graph_adjacency_list_0.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_0.adj_list) == 1
    assert (
        f"{type(graph_adjacency_list_1).__module__}.{type(graph_adjacency_list_1).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert (
        f"{type(graph_adjacency_list_1.adj_list).__module__}.{type(graph_adjacency_list_1.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_1.adj_list) == 1
    assert graph_adjacency_list_1.directed is True
    graph_adjacency_list_2 = graph_adjacency_list_0.add_edge(
        graph_adjacency_list_0, graph_adjacency_list_0
    )
    bool_0 = False
    graph_adjacency_list_3 = module_0.GraphAdjacencyList(bool_0)
    str_0 = "CWE\n91W<+c9'r#xgI8vL"
    none_type_0 = None
    graph_adjacency_list_4 = module_0.GraphAdjacencyList()
    graph_adjacency_list_5 = graph_adjacency_list_4.add_edge(none_type_0, str_0)
    assert graph_adjacency_list_4.adj_list == {
        None: ["CWE\n91W<+c9'r#xgI8vL"],
        "CWE\n91W<+c9'r#xgI8vL": [],
    }
    assert graph_adjacency_list_5.adj_list == {
        None: ["CWE\n91W<+c9'r#xgI8vL"],
        "CWE\n91W<+c9'r#xgI8vL": [],
    }
    str_1 = graph_adjacency_list_5.__repr__()
    assert str_1 == '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'
    graph_adjacency_list_6 = graph_adjacency_list_3.add_edge(none_type_0, str_1)
    assert graph_adjacency_list_3.adj_list == {
        None: ['{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'],
        '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}': [None],
    }
    assert (
        f"{type(graph_adjacency_list_6).__module__}.{type(graph_adjacency_list_6).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_6.adj_list == {
        None: ['{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'],
        '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}': [None],
    }
    assert graph_adjacency_list_6.directed is False
    graph_adjacency_list_7 = graph_adjacency_list_6.add_edge(
        graph_adjacency_list_3, bool_0
    )
    graph_adjacency_list_8 = graph_adjacency_list_7.add_edge(str_0, str_0)
    str_2 = graph_adjacency_list_4.__repr__()
    assert str_2 == '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'
    graph_adjacency_list_9 = graph_adjacency_list_8.add_edge(
        graph_adjacency_list_8, str_0
    )
    bool_1 = False
    graph_adjacency_list_10 = module_0.GraphAdjacencyList(bool_1)
    str_3 = graph_adjacency_list_10.__repr__()
    assert str_3 == "{}"
    str_4 = graph_adjacency_list_10.__repr__()
    assert str_4 == "{}"
    graph_adjacency_list_11 = graph_adjacency_list_8.add_edge(
        none_type_0, graph_adjacency_list_2
    )
    assert len(graph_adjacency_list_3.adj_list) == 6
    assert len(graph_adjacency_list_6.adj_list) == 6
    assert len(graph_adjacency_list_7.adj_list) == 6
    assert len(graph_adjacency_list_8.adj_list) == 6
    assert len(graph_adjacency_list_9.adj_list) == 6
    assert (
        f"{type(graph_adjacency_list_11).__module__}.{type(graph_adjacency_list_11).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert (
        f"{type(graph_adjacency_list_11.adj_list).__module__}.{type(graph_adjacency_list_11.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_11.adj_list) == 6
    assert graph_adjacency_list_11.directed is False
    graph_adjacency_list_12 = module_0.GraphAdjacencyList()
    graph_adjacency_list_13 = graph_adjacency_list_12.add_edge(
        graph_adjacency_list_9, graph_adjacency_list_11
    )
    var_0 = module_1.pformat(
        none_type_0, depth=none_type_0, sort_dicts=graph_adjacency_list_8
    )
    module_1.pformat(
        graph_adjacency_list_6,
        width=graph_adjacency_list_3,
        underscore_numbers=graph_adjacency_list_3,
    )


@pytest.mark.xfail(strict=True)
def test_case_8():
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert (
        f"{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    graph_adjacency_list_1 = graph_adjacency_list_0.add_edge(
        graph_adjacency_list_0, graph_adjacency_list_0
    )
    assert (
        f"{type(graph_adjacency_list_0.adj_list).__module__}.{type(graph_adjacency_list_0.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_0.adj_list) == 1
    assert (
        f"{type(graph_adjacency_list_1).__module__}.{type(graph_adjacency_list_1).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert (
        f"{type(graph_adjacency_list_1.adj_list).__module__}.{type(graph_adjacency_list_1.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_1.adj_list) == 1
    assert graph_adjacency_list_1.directed is True
    graph_adjacency_list_2 = graph_adjacency_list_0.add_edge(
        graph_adjacency_list_0, graph_adjacency_list_0
    )
    bool_0 = False
    graph_adjacency_list_3 = module_0.GraphAdjacencyList(bool_0)
    str_0 = "CWE\n91W<+c9'r#xgI8vL"
    none_type_0 = None
    graph_adjacency_list_4 = module_0.GraphAdjacencyList()
    graph_adjacency_list_5 = graph_adjacency_list_4.add_edge(none_type_0, str_0)
    assert graph_adjacency_list_4.adj_list == {
        None: ["CWE\n91W<+c9'r#xgI8vL"],
        "CWE\n91W<+c9'r#xgI8vL": [],
    }
    assert graph_adjacency_list_5.adj_list == {
        None: ["CWE\n91W<+c9'r#xgI8vL"],
        "CWE\n91W<+c9'r#xgI8vL": [],
    }
    str_1 = graph_adjacency_list_5.__repr__()
    assert str_1 == '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'
    graph_adjacency_list_6 = graph_adjacency_list_3.add_edge(none_type_0, str_1)
    assert graph_adjacency_list_3.adj_list == {
        None: ['{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'],
        '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}': [None],
    }
    assert (
        f"{type(graph_adjacency_list_6).__module__}.{type(graph_adjacency_list_6).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert graph_adjacency_list_6.adj_list == {
        None: ['{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'],
        '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}': [None],
    }
    assert graph_adjacency_list_6.directed is False
    graph_adjacency_list_7 = graph_adjacency_list_3.add_edge(
        graph_adjacency_list_3, str_1
    )
    assert len(graph_adjacency_list_3.adj_list) == 3
    assert len(graph_adjacency_list_6.adj_list) == 3
    assert (
        f"{type(graph_adjacency_list_7).__module__}.{type(graph_adjacency_list_7).__qualname__}"
        == "graph_list.GraphAdjacencyList"
    )
    assert (
        f"{type(graph_adjacency_list_7.adj_list).__module__}.{type(graph_adjacency_list_7.adj_list).__qualname__}"
        == "builtins.dict"
    )
    assert len(graph_adjacency_list_7.adj_list) == 3
    assert graph_adjacency_list_7.directed is False
    graph_adjacency_list_8 = graph_adjacency_list_6.add_edge(
        graph_adjacency_list_4, graph_adjacency_list_0
    )
    graph_adjacency_list_9 = module_0.GraphAdjacencyList()
    graph_adjacency_list_1.__repr__()
