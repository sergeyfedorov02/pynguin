# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search_zero_one_shortest_path as module_0


def test_case_0():
    bool_0 = False
    int_0 = 2418
    adjacency_list_0 = module_0.AdjacencyList(int_0)
    assert (
        f"{type(module_0.AdjacencyList.size).__module__}.{type(module_0.AdjacencyList.size).__qualname__}"
        == "builtins.property"
    )
    var_0 = adjacency_list_0.get_shortest_path(bool_0, bool_0)
    assert var_0 == 0


def test_case_1():
    bool_0 = False
    int_0 = 236
    adjacency_list_0 = module_0.AdjacencyList(int_0)
    assert (
        f"{type(module_0.AdjacencyList.size).__module__}.{type(module_0.AdjacencyList.size).__qualname__}"
        == "builtins.property"
    )
    var_0 = adjacency_list_0.add_edge(bool_0, bool_0, bool_0)
    var_1 = adjacency_list_0.get_shortest_path(bool_0, bool_0)
    assert var_1 == 0
    with pytest.raises(ValueError):
        adjacency_list_0.add_edge(bool_0, int_0, adjacency_list_0)


def test_case_2():
    bool_0 = False
    int_0 = 2404
    adjacency_list_0 = module_0.AdjacencyList(int_0)
    assert (
        f"{type(module_0.AdjacencyList.size).__module__}.{type(module_0.AdjacencyList.size).__qualname__}"
        == "builtins.property"
    )
    var_0 = adjacency_list_0.add_edge(bool_0, bool_0, bool_0)
    var_1 = adjacency_list_0.get_shortest_path(bool_0, bool_0)
    assert var_1 == 0


def test_case_3():
    none_type_0 = None
    bool_0 = True
    edge_0 = module_0.Edge(none_type_0, bool_0)


def test_case_4():
    bool_0 = True
    adjacency_list_0 = module_0.AdjacencyList(bool_0)
    assert (
        f"{type(module_0.AdjacencyList.size).__module__}.{type(module_0.AdjacencyList.size).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        adjacency_list_0.add_edge(bool_0, bool_0, bool_0)


def test_case_5():
    bool_0 = True
    bool_1 = False
    adjacency_list_0 = module_0.AdjacencyList(bool_1)
    assert (
        f"{type(module_0.AdjacencyList.size).__module__}.{type(module_0.AdjacencyList.size).__qualname__}"
        == "builtins.property"
    )
    int_0 = -154
    with pytest.raises(ValueError):
        adjacency_list_0.add_edge(bool_0, int_0, bool_1)


def test_case_6():
    int_0 = 3589
    adjacency_list_0 = module_0.AdjacencyList(int_0)
    assert (
        f"{type(module_0.AdjacencyList.size).__module__}.{type(module_0.AdjacencyList.size).__qualname__}"
        == "builtins.property"
    )
    bool_0 = False
    bool_1 = True
    with pytest.raises(ValueError):
        adjacency_list_0.get_shortest_path(bool_0, bool_1)


def test_case_7():
    bool_0 = False
    int_0 = 2418
    int_1 = 286
    adjacency_list_0 = module_0.AdjacencyList(int_0)
    assert (
        f"{type(module_0.AdjacencyList.size).__module__}.{type(module_0.AdjacencyList.size).__qualname__}"
        == "builtins.property"
    )
    var_0 = adjacency_list_0.add_edge(int_1, bool_0, bool_0)
    int_2 = -910
    with pytest.raises(ValueError):
        adjacency_list_0.get_shortest_path(int_1, int_2)


def test_case_8():
    bool_0 = False
    int_0 = 2418
    adjacency_list_0 = module_0.AdjacencyList(int_0)
    assert (
        f"{type(module_0.AdjacencyList.size).__module__}.{type(module_0.AdjacencyList.size).__qualname__}"
        == "builtins.property"
    )
    bool_1 = False
    bool_2 = True
    bool_3 = True
    var_0 = adjacency_list_0.add_edge(bool_0, bool_2, bool_3)
    var_1 = adjacency_list_0.get_shortest_path(bool_1, bool_3)
    assert var_1 == 1
