# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_path_sum as module_0

def test_case_0():
    str_0 = "8#kR('PbIsr[GGKB"
    list_0 = [str_0, str_0, str_0, str_0]
    with pytest.raises(TypeError):
        module_0.min_path_sum(list_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b')^Z5\xabD\xb3\xef\xae\xa5\x12'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = module_0.fill_row(list_0, list_0)
    module_0.fill_row(none_type_0, list_3)

def test_case_3():
    bytes_0 = b''
    list_0 = [bytes_0, bytes_0, bytes_0]
    with pytest.raises(TypeError):
        module_0.min_path_sum(list_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b')^Z5\xabD\xb3\xef\xae\xa5\x12'
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    int_0 = module_0.min_path_sum(list_1)
    assert int_0 == b')^Z5\xabD\xb3\xef\xae\xa5\x12)^Z5\xabD\xb3\xef\xae\xa5\x12)^Z5\xabD\xb3\xef\xae\xa5\x12'
    module_0.fill_row(none_type_0, list_2)

def test_case_5():
    int_0 = 4175
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0]
    with pytest.raises(TypeError):
        module_0.min_path_sum(list_0)