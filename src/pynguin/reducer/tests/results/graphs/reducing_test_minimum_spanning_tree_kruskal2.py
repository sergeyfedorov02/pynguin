# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree_kruskal2 as module_0

def test_case_3():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert f'{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}' == 'minimum_spanning_tree_kruskal2.GraphUndirectedWeighted'
    assert graph_undirected_weighted_1.connections == {}
    graph_undirected_weighted_2 = graph_undirected_weighted_1.kruskal()
    int_0 = -950
    disjoint_set_tree_node_0 = module_0.DisjointSetTreeNode(graph_undirected_weighted_2)
    assert f'{type(disjoint_set_tree_node_0).__module__}.{type(disjoint_set_tree_node_0).__qualname__}' == 'minimum_spanning_tree_kruskal2.DisjointSetTreeNode'
    assert f'{type(disjoint_set_tree_node_0.data).__module__}.{type(disjoint_set_tree_node_0.data).__qualname__}' == 'minimum_spanning_tree_kruskal2.GraphUndirectedWeighted'
    assert f'{type(disjoint_set_tree_node_0.parent).__module__}.{type(disjoint_set_tree_node_0.parent).__qualname__}' == 'minimum_spanning_tree_kruskal2.DisjointSetTreeNode'
    assert disjoint_set_tree_node_0.rank == 0
    none_type_0 = graph_undirected_weighted_2.add_edge(graph_undirected_weighted_2, graph_undirected_weighted_0, int_0)
    assert len(graph_undirected_weighted_2.connections) == 2
    bool_0 = False
    none_type_1 = graph_undirected_weighted_2.add_edge(graph_undirected_weighted_2, disjoint_set_tree_node_0, bool_0)
    graph_undirected_weighted_3 = graph_undirected_weighted_2.kruskal()
    assert f'{type(graph_undirected_weighted_3).__module__}.{type(graph_undirected_weighted_3).__qualname__}' == 'minimum_spanning_tree_kruskal2.GraphUndirectedWeighted'
    assert f'{type(graph_undirected_weighted_3.connections).__module__}.{type(graph_undirected_weighted_3.connections).__qualname__}' == 'builtins.dict'
    assert len(graph_undirected_weighted_3.connections) == 3

@pytest.mark.xfail(strict=True)
def test_case_8():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    disjoint_set_tree_0 = module_0.DisjointSetTree()
    assert disjoint_set_tree_0.map == {}
    disjoint_set_tree_0.find_set(graph_undirected_weighted_0)

@pytest.mark.xfail(strict=True)
def test_case_10():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    none_type_0 = None
    none_type_1 = graph_undirected_weighted_0.add_edge(graph_undirected_weighted_0, graph_undirected_weighted_0, none_type_0)
    assert f'{type(graph_undirected_weighted_0.connections).__module__}.{type(graph_undirected_weighted_0.connections).__qualname__}' == 'builtins.dict'
    assert len(graph_undirected_weighted_0.connections) == 1
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert f'{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}' == 'minimum_spanning_tree_kruskal2.GraphUndirectedWeighted'
    assert graph_undirected_weighted_1.connections == {}
    none_type_3 = graph_undirected_weighted_0.add_node(graph_undirected_weighted_1)

def test_case_11():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert graph_undirected_weighted_0.connections == {}
    graph_undirected_weighted_1 = graph_undirected_weighted_0.kruskal()
    assert f'{type(graph_undirected_weighted_1).__module__}.{type(graph_undirected_weighted_1).__qualname__}' == 'minimum_spanning_tree_kruskal2.GraphUndirectedWeighted'
    assert graph_undirected_weighted_1.connections == {}
    graph_undirected_weighted_2 = graph_undirected_weighted_1.kruskal()
    disjoint_set_tree_node_0 = module_0.DisjointSetTreeNode(graph_undirected_weighted_2)
    assert f'{type(disjoint_set_tree_node_0).__module__}.{type(disjoint_set_tree_node_0).__qualname__}' == 'minimum_spanning_tree_kruskal2.DisjointSetTreeNode'
    assert f'{type(disjoint_set_tree_node_0.data).__module__}.{type(disjoint_set_tree_node_0.data).__qualname__}' == 'minimum_spanning_tree_kruskal2.GraphUndirectedWeighted'
    assert f'{type(disjoint_set_tree_node_0.parent).__module__}.{type(disjoint_set_tree_node_0.parent).__qualname__}' == 'minimum_spanning_tree_kruskal2.DisjointSetTreeNode'
    assert disjoint_set_tree_node_0.rank == 0