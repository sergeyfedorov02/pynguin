# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bidirectional_a_star as module_0

def test_case_6():
    bytes_0 = b'\xa3\xe45R31IF\x88'
    bidirectional_a_star_0 = module_0.BidirectionalAStar(bytes_0, bytes_0)
    assert module_0.HEURISTIC == 0
    assert module_0.grid == [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]]
    assert module_0.delta == [[-1, 0], [0, -1], [1, 0], [0, 1]]
    list_1 = bidirectional_a_star_0.search()

@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -2646
    tuple_0 = (int_0, int_0)
    bool_0 = True
    tuple_1 = (bool_0, bool_0)
    a_star_0 = module_0.AStar(tuple_0, tuple_1)
    assert f'{type(a_star_0).__module__}.{type(a_star_0).__qualname__}' == 'bidirectional_a_star.AStar'
    assert f'{type(a_star_0.start).__module__}.{type(a_star_0.start).__qualname__}' == 'bidirectional_a_star.Node'
    assert f'{type(a_star_0.target).__module__}.{type(a_star_0.target).__qualname__}' == 'bidirectional_a_star.Node'
    assert f'{type(a_star_0.open_nodes).__module__}.{type(a_star_0.open_nodes).__qualname__}' == 'builtins.list'
    assert len(a_star_0.open_nodes) == 1
    assert a_star_0.closed_nodes == []
    assert a_star_0.reached is False
    assert module_0.HEURISTIC == 0
    assert module_0.grid == [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]]
    assert module_0.delta == [[-1, 0], [0, -1], [1, 0], [0, 1]]
    list_0 = a_star_0.search()
    assert a_star_0.open_nodes == []
    assert len(a_star_0.closed_nodes) == 1
    module_0.AStar(none_type_0, none_type_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b'\xa3\xe45R31\xcdF\x88'
    bool_0 = False
    int_0 = 1
    tuple_0 = (bool_0, int_0)
    bidirectional_a_star_0 = module_0.BidirectionalAStar(tuple_0, bytes_0)
    assert f'{type(bidirectional_a_star_0).__module__}.{type(bidirectional_a_star_0).__qualname__}' == 'bidirectional_a_star.BidirectionalAStar'
    assert f'{type(bidirectional_a_star_0.fwd_astar).__module__}.{type(bidirectional_a_star_0.fwd_astar).__qualname__}' == 'bidirectional_a_star.AStar'
    assert f'{type(bidirectional_a_star_0.bwd_astar).__module__}.{type(bidirectional_a_star_0.bwd_astar).__qualname__}' == 'bidirectional_a_star.AStar'
    assert bidirectional_a_star_0.reached is False
    bidirectional_a_star_0.search()

@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'\xa3\xe45R31IF\x88'
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    bidirectional_a_star_0 = module_0.BidirectionalAStar(bytes_0, tuple_0)
    assert f'{type(bidirectional_a_star_0).__module__}.{type(bidirectional_a_star_0).__qualname__}' == 'bidirectional_a_star.BidirectionalAStar'
    assert f'{type(bidirectional_a_star_0.fwd_astar).__module__}.{type(bidirectional_a_star_0.fwd_astar).__qualname__}' == 'bidirectional_a_star.AStar'
    assert f'{type(bidirectional_a_star_0.bwd_astar).__module__}.{type(bidirectional_a_star_0.bwd_astar).__qualname__}' == 'bidirectional_a_star.AStar'
    assert bidirectional_a_star_0.reached is False
    assert module_0.HEURISTIC == 0
    assert module_0.grid == [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]]
    assert module_0.delta == [[-1, 0], [0, -1], [1, 0], [0, 1]]
    bidirectional_a_star_0.search()

@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    bool_1 = True
    int_0 = -583
    node_0 = module_0.Node(bool_0, bool_0, bool_1, int_0, bool_1, bool_1)
    assert f'{type(node_0).__module__}.{type(node_0).__qualname__}' == 'bidirectional_a_star.Node'
    assert node_0.pos_x is True
    assert node_0.pos_y is True
    assert node_0.pos == (True, True)
    assert node_0.goal_x is True
    assert node_0.goal_y == -583
    assert node_0.g_cost is True
    assert node_0.parent is True
    assert node_0.h_cost == pytest.approx(584.0, abs=0.01, rel=0.01)
    assert node_0.f_cost == pytest.approx(585.0, abs=0.01, rel=0.01)
    assert module_0.HEURISTIC == 0
    assert module_0.grid == [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]]
    assert module_0.delta == [[-1, 0], [0, -1], [1, 0], [0, 1]]
    tuple_0 = (bool_0, bool_0)
    bidirectional_a_star_0 = module_0.BidirectionalAStar(tuple_0, tuple_0)
    assert f'{type(bidirectional_a_star_0).__module__}.{type(bidirectional_a_star_0).__qualname__}' == 'bidirectional_a_star.BidirectionalAStar'
    assert f'{type(bidirectional_a_star_0.fwd_astar).__module__}.{type(bidirectional_a_star_0.fwd_astar).__qualname__}' == 'bidirectional_a_star.AStar'
    assert f'{type(bidirectional_a_star_0.bwd_astar).__module__}.{type(bidirectional_a_star_0.bwd_astar).__qualname__}' == 'bidirectional_a_star.AStar'
    assert bidirectional_a_star_0.reached is False
    bidirectional_a_star_0.retrace_bidirectional_path(node_0, node_0)

@pytest.mark.xfail(strict=True)
def test_case_12():
    bytes_0 = b'\xa3\xe45R31IF\x88'
    int_0 = 3603
    int_1 = 1971
    tuple_0 = (int_1, int_0)
    a_star_0 = module_0.AStar(tuple_0, tuple_0)
    assert f'{type(a_star_0).__module__}.{type(a_star_0).__qualname__}' == 'bidirectional_a_star.AStar'
    assert f'{type(a_star_0.start).__module__}.{type(a_star_0.start).__qualname__}' == 'bidirectional_a_star.Node'
    assert f'{type(a_star_0.target).__module__}.{type(a_star_0.target).__qualname__}' == 'bidirectional_a_star.Node'
    assert f'{type(a_star_0.open_nodes).__module__}.{type(a_star_0.open_nodes).__qualname__}' == 'builtins.list'
    assert len(a_star_0.open_nodes) == 1
    assert a_star_0.closed_nodes == []
    assert a_star_0.reached is False
    assert module_0.HEURISTIC == 0
    assert module_0.grid == [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]]
    assert module_0.delta == [[-1, 0], [0, -1], [1, 0], [0, 1]]
    list_0 = a_star_0.search()
    assert a_star_0.open_nodes == []
    bool_0 = True
    none_type_0 = None
    tuple_1 = (int_0, bool_0)
    bidirectional_a_star_0 = module_0.BidirectionalAStar(bytes_0, tuple_1)
    list_2 = bidirectional_a_star_0.search()