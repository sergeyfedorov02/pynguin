# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import breadth_first_search_shortest_path as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"o\x12x\xd4\xb3\x89\x96*\xe6T\xcdr\x1fL\xf5\x08\xd8"
    graph_0 = module_0.Graph(bytes_0, bytes_0)
    assert module_0.graph == {
        "A": ["B", "C", "E"],
        "B": ["A", "D", "E"],
        "C": ["A", "F", "G"],
        "D": ["B"],
        "E": ["A", "B", "D"],
        "F": ["C"],
        "G": ["C"],
    }
    graph_0.breath_first_search()


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = ""
    none_type_0 = None
    graph_0 = module_0.Graph(dict_0, none_type_0)
    assert module_0.graph == {
        "A": ["B", "C", "E"],
        "B": ["A", "D", "E"],
        "C": ["A", "F", "G"],
        "D": ["B"],
        "E": ["A", "B", "D"],
        "F": ["C"],
        "G": ["C"],
    }
    graph_1 = module_0.Graph(dict_0, str_0)
    str_1 = graph_1.shortest_path(str_0)
    assert str_1 == ""
    graph_2 = module_0.Graph(none_type_0, str_1)
    graph_2.breath_first_search()


def test_case_2():
    str_0 = "<$W\\\r)n2"
    bool_0 = True
    graph_0 = module_0.Graph(bool_0, bool_0)
    assert module_0.graph == {
        "A": ["B", "C", "E"],
        "B": ["A", "D", "E"],
        "C": ["A", "F", "G"],
        "D": ["B"],
        "E": ["A", "B", "D"],
        "F": ["C"],
        "G": ["C"],
    }
    with pytest.raises(ValueError):
        graph_0.shortest_path(str_0)


def test_case_3():
    str_0 = "[xDR]u0R"
    list_0 = [str_0, str_0]
    dict_0 = {str_0: list_0, str_0: list_0, str_0: list_0}
    graph_0 = module_0.Graph(dict_0, str_0)
    assert module_0.graph == {
        "A": ["B", "C", "E"],
        "B": ["A", "D", "E"],
        "C": ["A", "F", "G"],
        "D": ["B"],
        "E": ["A", "B", "D"],
        "F": ["C"],
        "G": ["C"],
    }
    none_type_0 = graph_0.breath_first_search()
    str_1 = "`<cbdb@2;"
    dict_1 = {}
    str_2 = "WQQJJ(S%\rGemWSLm)/k("
    graph_1 = module_0.Graph(dict_1, str_2)
    graph_2 = module_0.Graph(graph_1, str_2)
    with pytest.raises(ValueError):
        graph_2.shortest_path(str_1)


def test_case_4():
    str_0 = ")MepYfIXQ?{ O0"
    str_1 = "[xDR]u0R"
    list_0 = [str_1, str_0]
    dict_0 = {str_0: list_0, str_1: list_0, str_1: list_0}
    graph_0 = module_0.Graph(dict_0, str_1)
    assert module_0.graph == {
        "A": ["B", "C", "E"],
        "B": ["A", "D", "E"],
        "C": ["A", "F", "G"],
        "D": ["B"],
        "E": ["A", "B", "D"],
        "F": ["C"],
        "G": ["C"],
    }
    none_type_0 = graph_0.breath_first_search()
    assert graph_0.parent == {"[xDR]u0R": None, ")MepYfIXQ?{ O0": "[xDR]u0R"}
    str_2 = "`<cbdb@2;"
    dict_1 = {}
    str_3 = "WQQJJ(S%\rGemWSLm)/k("
    graph_1 = module_0.Graph(dict_1, str_3)
    graph_2 = module_0.Graph(graph_1, str_3)
    with pytest.raises(ValueError):
        graph_2.shortest_path(str_2)


def test_case_5():
    str_0 = ")MepYfIXQ?{ O0"
    graph_0 = module_0.Graph(str_0, str_0)
    assert module_0.graph == {
        "A": ["B", "C", "E"],
        "B": ["A", "D", "E"],
        "C": ["A", "F", "G"],
        "D": ["B"],
        "E": ["A", "B", "D"],
        "F": ["C"],
        "G": ["C"],
    }
    str_1 = graph_0.shortest_path(str_0)
    assert str_1 == ")MepYfIXQ?{ O0"
    str_2 = "[xDR]u0R"
    list_0 = [str_2, str_0]
    dict_0 = {str_0: list_0, str_2: list_0, str_2: list_0}
    graph_1 = module_0.Graph(dict_0, str_2)
    none_type_0 = graph_1.breath_first_search()
    assert graph_1.parent == {"[xDR]u0R": None, ")MepYfIXQ?{ O0": "[xDR]u0R"}
    str_3 = "UXVg,TP"
    graph_2 = module_0.Graph(dict_0, str_3)
    dict_1 = {}
    graph_3 = module_0.Graph(dict_1, str_2)
    graph_4 = module_0.Graph(graph_3, str_2)
    str_4 = graph_1.shortest_path(str_1)
    assert str_4 == "[xDR]u0R->)MepYfIXQ?{ O0"
    str_5 = "mN9\\\x0c93?pENE;yn\t"
    graph_5 = module_0.Graph(str_1, str_5)
    none_type_1 = graph_1.breath_first_search()
    none_type_2 = graph_1.breath_first_search()
    bool_0 = False
    graph_6 = module_0.Graph(bool_0, none_type_1)
    none_type_3 = graph_1.breath_first_search()
