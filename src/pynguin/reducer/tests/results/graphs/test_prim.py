# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import prim as module_0
import heapq as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "*n1353E"
    module_0.prim(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    module_0.prim(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 2279
    module_0.connect(int_0, int_0, int_0, int_0)


def test_case_3():
    str_0 = "UPmw|"
    vertex_0 = module_0.Vertex(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "pzs"
    list_0 = []
    vertex_0 = module_0.Vertex(str_0)
    list_1 = module_0.prim(list_0, vertex_0)
    assert vertex_0.key == 0
    var_0 = module_1.merge(key=list_0)
    vertex_0.__lt__(list_0)


def test_case_5():
    list_0 = []
    vertex_0 = module_0.Vertex(list_0)
    var_0 = vertex_0.__repr__()
    list_1 = module_0.prim(list_0, vertex_0)
    assert vertex_0.key == 0


def test_case_6():
    str_0 = "XN"
    vertex_0 = module_0.Vertex(str_0)
    var_0 = vertex_0.add_neighbor(str_0)
    list_0 = [vertex_0]
    list_1 = module_0.prim(list_0, vertex_0)
    assert vertex_0.key == 0


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    vertex_0 = module_0.Vertex(list_0)
    vertex_0.add_edge(list_0, list_0)


def test_case_8():
    list_0 = []
    vertex_0 = module_0.Vertex(list_0)
    list_1 = module_0.prim(list_0, vertex_0)
    assert vertex_0.key == 0


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "pzs"
    vertex_0 = module_0.Vertex(str_0)
    var_0 = vertex_0.add_neighbor(str_0)
    list_0 = [vertex_0]
    iterator_0 = module_0.prim_heap(list_0, vertex_0)
    module_0.prim(iterator_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "pzs"
    vertex_0 = module_0.Vertex(str_0)
    var_0 = vertex_0.add_neighbor(str_0)
    list_0 = [vertex_0, vertex_0, vertex_0, vertex_0]
    module_0.prim(list_0, vertex_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "pzs"
    vertex_0 = module_0.Vertex(str_0)
    var_0 = vertex_0.add_neighbor(str_0)
    list_0 = [vertex_0]
    list_1 = module_0.prim(list_0, vertex_0)
    assert vertex_0.key == 0
    iterator_0 = module_0.prim_heap(list_1, vertex_0)
    var_1 = iterator_0.__repr__()
    module_0.prim(iterator_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "pzs"
    vertex_0 = module_0.Vertex(str_0)
    var_0 = vertex_0.add_neighbor(str_0)
    list_0 = [vertex_0, vertex_0, vertex_0, vertex_0]
    var_1 = vertex_0.add_neighbor(vertex_0)
    module_0.prim(list_0, vertex_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "pzs"
    vertex_0 = module_0.Vertex(str_0)
    list_0 = [vertex_0, vertex_0]
    vertex_1 = module_0.Vertex(list_0)
    none_type_0 = None
    var_0 = vertex_0.add_neighbor(none_type_0)
    iterator_0 = module_0.prim_heap(list_0, vertex_0)
    list_1 = module_1.merge(key=str_0)
    module_0.prim(iterator_0, vertex_1)
