# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import depth_first_search_2 as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    graph_0 = module_0.Graph()
    int_0 = 993
    none_type_0 = graph_0.add_edge(graph_0, int_0)
    assert len(graph_0.vertex) == 1
    none_type_1 = graph_0.print_graph()
    none_type_2 = graph_0.print_graph()
    graph_0.dfs()


def test_case_1():
    graph_0 = module_0.Graph()
    none_type_0 = graph_0.print_graph()


def test_case_2():
    bool_0 = True
    graph_0 = module_0.Graph()
    none_type_0 = graph_0.add_edge(bool_0, bool_0)
    assert graph_0.vertex == {True: [True]}


@pytest.mark.xfail(strict=True)
def test_case_3():
    graph_0 = module_0.Graph()
    none_type_0 = graph_0.dfs()
    graph_1 = module_0.Graph()
    none_type_1 = graph_1.dfs()
    list_0 = []
    graph_2 = module_0.Graph()
    none_type_2 = graph_2.print_graph()
    graph_2.dfs_recursive(list_0, list_0)


def test_case_4():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    graph_0 = module_0.Graph()
    none_type_0 = graph_0.dfs_recursive(bool_0, list_0)
    graph_1 = module_0.Graph()
    none_type_1 = graph_1.print_graph()
    int_0 = 3505
    none_type_2 = graph_1.add_edge(bool_0, int_0)
    assert graph_1.vertex == {False: [3505]}
    none_type_3 = graph_1.print_graph()
    none_type_4 = graph_0.print_graph()
    none_type_5 = graph_1.dfs()


def test_case_5():
    graph_0 = module_0.Graph()
    graph_1 = module_0.Graph()
    none_type_0 = graph_1.add_edge(graph_0, graph_0)
    assert len(graph_1.vertex) == 1
    none_type_1 = None
    bool_0 = False
    graph_2 = module_0.Graph()
    none_type_2 = graph_2.print_graph()
    none_type_3 = graph_1.add_edge(graph_0, graph_1)
    none_type_4 = graph_2.add_edge(none_type_1, bool_0)
    none_type_5 = graph_1.add_edge(none_type_4, graph_0)
    none_type_6 = graph_0.print_graph()


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    graph_0 = module_0.Graph()
    none_type_0 = graph_0.dfs_recursive(bool_0, list_0)
    bool_1 = True
    graph_1 = module_0.Graph()
    none_type_1 = graph_1.add_edge(bool_1, bool_1)
    assert graph_1.vertex == {True: [True]}
    none_type_2 = graph_1.print_graph()
    int_0 = 3480
    none_type_3 = graph_1.add_edge(bool_0, int_0)
    graph_2 = module_0.Graph()
    none_type_4 = graph_1.dfs()
    none_type_5 = graph_2.dfs()
    none_type_6 = graph_1.print_graph()
    none_type_7 = graph_2.print_graph()
    graph_3 = module_0.Graph()
    int_1 = -921
    bool_2 = False
    none_type_8 = graph_1.add_edge(int_1, bool_2)
    graph_0.dfs_recursive(bool_2, none_type_1)
