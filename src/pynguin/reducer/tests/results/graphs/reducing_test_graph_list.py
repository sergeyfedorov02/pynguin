# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import graph_list as module_0
import pprint as module_1

@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert f'{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    graph_adjacency_list_2 = graph_adjacency_list_0.add_edge(none_type_0, none_type_0)
    assert graph_adjacency_list_0.adj_list == {None: []}
    assert f'{type(graph_adjacency_list_2).__module__}.{type(graph_adjacency_list_2).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert graph_adjacency_list_2.adj_list == {None: []}
    assert graph_adjacency_list_2.directed is True
    graph_adjacency_list_3 = graph_adjacency_list_2.add_edge(bool_0, bool_0)
    assert graph_adjacency_list_0.adj_list == {None: [], False: []}
    assert graph_adjacency_list_2.adj_list == {None: [], False: []}
    assert graph_adjacency_list_3.adj_list == {None: [], False: []}
    graph_adjacency_list_4 = graph_adjacency_list_2.add_edge(bool_0, graph_adjacency_list_3)
    assert len(graph_adjacency_list_0.adj_list) == 3
    assert len(graph_adjacency_list_2.adj_list) == 3
    assert len(graph_adjacency_list_3.adj_list) == 3
    assert len(graph_adjacency_list_4.adj_list) == 3
    graph_adjacency_list_0.__repr__()

@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 1620.478133
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert f'{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True

@pytest.mark.xfail(strict=True)
def test_case_7():
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert f'{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    graph_adjacency_list_2 = graph_adjacency_list_0.add_edge(graph_adjacency_list_0, graph_adjacency_list_0)
    bool_0 = False
    graph_adjacency_list_3 = module_0.GraphAdjacencyList(bool_0)
    str_0 = "CWE\n91W<+c9'r#xgI8vL"
    none_type_0 = None
    graph_adjacency_list_4 = module_0.GraphAdjacencyList()
    graph_adjacency_list_5 = graph_adjacency_list_4.add_edge(none_type_0, str_0)
    assert graph_adjacency_list_4.adj_list == {None: ["CWE\n91W<+c9'r#xgI8vL"], "CWE\n91W<+c9'r#xgI8vL": []}
    assert graph_adjacency_list_5.adj_list == {None: ["CWE\n91W<+c9'r#xgI8vL"], "CWE\n91W<+c9'r#xgI8vL": []}
    str_1 = graph_adjacency_list_5.__repr__()
    assert str_1 == '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'
    graph_adjacency_list_6 = graph_adjacency_list_3.add_edge(none_type_0, str_1)
    assert graph_adjacency_list_3.adj_list == {None: ['{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'], '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}': [None]}
    assert f'{type(graph_adjacency_list_6).__module__}.{type(graph_adjacency_list_6).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert graph_adjacency_list_6.adj_list == {None: ['{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'], '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}': [None]}
    assert graph_adjacency_list_6.directed is False
    graph_adjacency_list_7 = graph_adjacency_list_6.add_edge(graph_adjacency_list_3, bool_0)
    graph_adjacency_list_8 = graph_adjacency_list_7.add_edge(str_0, str_0)
    graph_adjacency_list_9 = graph_adjacency_list_8.add_edge(graph_adjacency_list_8, str_0)

@pytest.mark.xfail(strict=True)
def test_case_8():
    graph_adjacency_list_0 = module_0.GraphAdjacencyList()
    assert f'{type(graph_adjacency_list_0).__module__}.{type(graph_adjacency_list_0).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert graph_adjacency_list_0.adj_list == {}
    assert graph_adjacency_list_0.directed is True
    graph_adjacency_list_1 = graph_adjacency_list_0.add_edge(graph_adjacency_list_0, graph_adjacency_list_0)
    assert f'{type(graph_adjacency_list_0.adj_list).__module__}.{type(graph_adjacency_list_0.adj_list).__qualname__}' == 'builtins.dict'
    assert len(graph_adjacency_list_0.adj_list) == 1
    assert f'{type(graph_adjacency_list_1).__module__}.{type(graph_adjacency_list_1).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert f'{type(graph_adjacency_list_1.adj_list).__module__}.{type(graph_adjacency_list_1.adj_list).__qualname__}' == 'builtins.dict'
    assert len(graph_adjacency_list_1.adj_list) == 1
    assert graph_adjacency_list_1.directed is True
    graph_adjacency_list_2 = graph_adjacency_list_0.add_edge(graph_adjacency_list_0, graph_adjacency_list_0)
    bool_0 = False
    graph_adjacency_list_3 = module_0.GraphAdjacencyList(bool_0)
    str_0 = "CWE\n91W<+c9'r#xgI8vL"
    none_type_0 = None
    graph_adjacency_list_4 = module_0.GraphAdjacencyList()
    graph_adjacency_list_5 = graph_adjacency_list_4.add_edge(none_type_0, str_0)
    assert graph_adjacency_list_4.adj_list == {None: ["CWE\n91W<+c9'r#xgI8vL"], "CWE\n91W<+c9'r#xgI8vL": []}
    assert graph_adjacency_list_5.adj_list == {None: ["CWE\n91W<+c9'r#xgI8vL"], "CWE\n91W<+c9'r#xgI8vL": []}
    str_1 = graph_adjacency_list_5.__repr__()
    assert str_1 == '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'
    graph_adjacency_list_6 = graph_adjacency_list_3.add_edge(none_type_0, str_1)
    assert graph_adjacency_list_3.adj_list == {None: ['{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'], '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}': [None]}
    assert f'{type(graph_adjacency_list_6).__module__}.{type(graph_adjacency_list_6).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert graph_adjacency_list_6.adj_list == {None: ['{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}'], '{None: ["CWE\\n91W<+c9\'r#xgI8vL"], "CWE\\n91W<+c9\'r#xgI8vL": []}': [None]}
    assert graph_adjacency_list_6.directed is False
    graph_adjacency_list_7 = graph_adjacency_list_3.add_edge(graph_adjacency_list_3, str_1)
    assert len(graph_adjacency_list_3.adj_list) == 3
    assert len(graph_adjacency_list_6.adj_list) == 3
    assert f'{type(graph_adjacency_list_7).__module__}.{type(graph_adjacency_list_7).__qualname__}' == 'graph_list.GraphAdjacencyList'
    assert f'{type(graph_adjacency_list_7.adj_list).__module__}.{type(graph_adjacency_list_7.adj_list).__qualname__}' == 'builtins.dict'
    assert len(graph_adjacency_list_7.adj_list) == 3
    assert graph_adjacency_list_7.directed is False
    graph_adjacency_list_1.__repr__()