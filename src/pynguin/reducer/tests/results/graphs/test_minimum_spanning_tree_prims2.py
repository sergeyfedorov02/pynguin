# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import minimum_spanning_tree_prims2 as module_0


def test_case_0():
    min_priority_queue_0 = module_0.MinPriorityQueue()
    assert len(min_priority_queue_0) == 0
    bool_0 = True
    none_type_0 = min_priority_queue_0.push(min_priority_queue_0, bool_0)
    assert len(min_priority_queue_0) == 1
    var_0 = min_priority_queue_0.extract_min()
    assert len(min_priority_queue_0) == 0
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "minimum_spanning_tree_prims2.MinPriorityQueue"
    )
    assert len(var_0) == 0
    str_0 = var_0.__repr__()
    assert str_0 == "[]"
    int_0 = min_priority_queue_0.__len__()
    assert int_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    min_priority_queue_0 = module_0.MinPriorityQueue()
    assert len(min_priority_queue_0) == 0
    min_priority_queue_0.extract_min()


def test_case_2():
    none_type_0 = None
    bool_0 = False
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    int_0 = graph_undirected_weighted_0.__len__()
    assert int_0 == 0
    graph_undirected_weighted_1 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_1) == 0
    none_type_1 = graph_undirected_weighted_1.add_edge(none_type_0, none_type_0, bool_0)
    assert len(graph_undirected_weighted_1) == 1


def test_case_3():
    bool_0 = False
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    str_0 = graph_undirected_weighted_0.__repr__()
    assert str_0 == "{}"
    none_type_0 = graph_undirected_weighted_0.add_edge(str_0, bool_0, bool_0)
    assert len(graph_undirected_weighted_0) == 2
    none_type_1 = graph_undirected_weighted_0.add_edge(
        graph_undirected_weighted_0, none_type_0, bool_0
    )
    assert len(graph_undirected_weighted_0) == 4
    tuple_0 = module_0.prims_algo(graph_undirected_weighted_0)


def test_case_4():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    tuple_0 = module_0.prims_algo(graph_undirected_weighted_0)
    min_priority_queue_0 = module_0.MinPriorityQueue()


@pytest.mark.xfail(strict=True)
def test_case_5():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    set_0 = {graph_undirected_weighted_0}
    module_0.get_child_right_position(set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    none_type_0 = None
    int_0 = 876
    none_type_1 = graph_undirected_weighted_0.add_edge(
        graph_undirected_weighted_0, none_type_0, int_0
    )
    assert len(graph_undirected_weighted_0) == 2
    tuple_0 = module_0.prims_algo(graph_undirected_weighted_0)
    none_type_2 = None
    graph_undirected_weighted_0.add_edge(tuple_0, none_type_2, none_type_1)


def test_case_7():
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    none_type_0 = None
    none_type_1 = graph_undirected_weighted_0.add_node(none_type_0)
    assert len(graph_undirected_weighted_0) == 1
    tuple_0 = module_0.prims_algo(graph_undirected_weighted_0)
    int_0 = graph_undirected_weighted_0.__len__()
    assert int_0 == 1
    min_priority_queue_0 = module_0.MinPriorityQueue()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    str_0 = graph_undirected_weighted_0.__repr__()
    assert str_0 == "{}"
    int_0 = module_0.get_child_left_position(bool_0)
    assert int_0 == 1
    none_type_0 = graph_undirected_weighted_0.add_edge(
        int_0, graph_undirected_weighted_0, bool_0
    )
    assert len(graph_undirected_weighted_0) == 2
    none_type_1 = graph_undirected_weighted_0.add_edge(str_0, int_0, bool_0)
    assert len(graph_undirected_weighted_0) == 3
    none_type_2 = graph_undirected_weighted_0.add_edge(
        graph_undirected_weighted_0, none_type_1, int_0
    )
    assert len(graph_undirected_weighted_0) == 4
    int_1 = graph_undirected_weighted_0.__len__()
    assert int_1 == 4
    none_type_3 = graph_undirected_weighted_0.add_node(int_0)
    tuple_0 = module_0.prims_algo(graph_undirected_weighted_0)
    str_1 = graph_undirected_weighted_0.__repr__()
    assert (
        str_1
        == "{1: {{...}: False, '{}': False}, {...}: {1: False, None: 1}, '{}': {1: False}, None: {{...}: 1}}"
    )
    graph_undirected_weighted_1 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_1) == 0
    none_type_4 = graph_undirected_weighted_1.add_edge(none_type_1, none_type_0, bool_0)
    assert len(graph_undirected_weighted_1) == 1
    min_priority_queue_0 = module_0.MinPriorityQueue()
    min_priority_queue_0.extract_min()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    str_0 = graph_undirected_weighted_0.__repr__()
    assert str_0 == "{}"
    int_0 = module_0.get_child_left_position(bool_0)
    assert int_0 == 1
    none_type_0 = graph_undirected_weighted_0.add_edge(
        int_0, graph_undirected_weighted_0, bool_0
    )
    assert len(graph_undirected_weighted_0) == 2
    none_type_1 = graph_undirected_weighted_0.add_edge(str_0, int_0, bool_0)
    assert len(graph_undirected_weighted_0) == 3
    none_type_2 = graph_undirected_weighted_0.add_edge(
        graph_undirected_weighted_0, none_type_1, int_0
    )
    assert len(graph_undirected_weighted_0) == 4
    int_1 = -538
    tuple_0 = (int_1, bool_0)
    none_type_3 = graph_undirected_weighted_0.add_edge(tuple_0, bool_0, bool_0)
    assert len(graph_undirected_weighted_0) == 6
    tuple_1 = module_0.prims_algo(graph_undirected_weighted_0)
    str_1 = graph_undirected_weighted_0.__repr__()
    assert (
        str_1
        == "{1: {{...}: False, '{}': False}, {...}: {1: False, None: 1}, '{}': {1: False}, None: {{...}: 1}, (-538, False): {False: False}, False: {(-538, False): False}}"
    )
    module_0.prims_algo(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    graph_undirected_weighted_0 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_0) == 0
    str_0 = graph_undirected_weighted_0.__repr__()
    assert str_0 == "{}"
    none_type_0 = graph_undirected_weighted_0.add_edge(
        graph_undirected_weighted_0, graph_undirected_weighted_0, bool_0
    )
    assert len(graph_undirected_weighted_0) == 1
    none_type_1 = graph_undirected_weighted_0.add_edge(str_0, bool_0, bool_0)
    assert len(graph_undirected_weighted_0) == 3
    none_type_2 = graph_undirected_weighted_0.add_edge(
        graph_undirected_weighted_0, none_type_1, bool_0
    )
    assert len(graph_undirected_weighted_0) == 4
    int_0 = graph_undirected_weighted_0.__len__()
    assert int_0 == 4
    none_type_3 = graph_undirected_weighted_0.add_node(bool_0)
    tuple_0 = module_0.prims_algo(graph_undirected_weighted_0)
    str_1 = graph_undirected_weighted_0.__repr__()
    assert (
        str_1
        == "{{...}: {{...}: False, None: False}, '{}': {False: False}, False: {'{}': False}, None: {{...}: False}}"
    )
    graph_undirected_weighted_1 = module_0.GraphUndirectedWeighted()
    assert len(graph_undirected_weighted_1) == 0
    none_type_4 = graph_undirected_weighted_1.add_edge(none_type_1, none_type_0, bool_0)
    assert len(graph_undirected_weighted_1) == 1
    min_priority_queue_0 = module_0.MinPriorityQueue()
    min_priority_queue_0.extract_min()
