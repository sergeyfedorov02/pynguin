# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import heap_sort as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\x00\xf4\xb8\xe0\xb8C\xf8\x80\xc3-\x81\xe9\x1b\xde"
    module_0.heap_sort(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    var_0 = module_0.heapify(bool_0, bool_0, bool_0)
    module_0.heap_sort(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -1035.9847
    module_0.heapify(float_0, float_0, float_0)


def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0,)
    var_0 = module_0.heap_sort(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.heap_sort(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"N\xb5:l\xee(E\xf9\x17\x85`\xfa\xf3 \xbe6"
    module_0.heap_sort(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    int_0 = 1202
    list_0 = [bool_0, int_0]
    var_0 = module_0.heap_sort(list_0)
    bool_1 = True
    set_0 = {bool_1}
    var_1 = module_0.heap_sort(set_0)
    bool_2 = True
    var_2 = module_0.heap_sort(var_1)
    none_type_0 = None
    var_3 = module_0.heapify(none_type_0, bool_2, bool_2)
    module_0.heapify(var_1, none_type_0, none_type_0)
