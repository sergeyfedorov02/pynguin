# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tag as module_0

@pytest.mark.xfail(strict=True)
def test_case_4():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert f'{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}' == 'tag.TaggedJSONSerializer'
    assert f'{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}' == 'builtins.list'
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert f'{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}' == 'builtins.member_descriptor'
    tag_tuple_0 = module_0.TagTuple(tagged_j_s_o_n_serializer_0)
    assert module_0.TagTuple.key == ' t'
    str_0 = '.nS'
    var_0 = tag_tuple_0.to_json(str_0)

@pytest.mark.xfail(strict=True)
def test_case_9():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert f'{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}' == 'tag.TaggedJSONSerializer'
    assert f'{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}' == 'builtins.list'
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert f'{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}' == 'builtins.member_descriptor'
    type_0 = module_0.PassList
    tagged_j_s_o_n_serializer_0.register(type_0, index=tagged_j_s_o_n_serializer_0)

def test_case_13():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert f'{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}' == 'tag.TaggedJSONSerializer'
    assert f'{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}' == 'builtins.list'
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert f'{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}' == 'builtins.member_descriptor'
    type_0 = module_0.TagBytes
    with pytest.raises(KeyError):
        tagged_j_s_o_n_serializer_0.register(type_0)

@pytest.mark.xfail(strict=True)
def test_case_21():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert f'{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}' == 'tag.TaggedJSONSerializer'
    assert f'{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}' == 'builtins.list'
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert f'{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    assert str_0 == 'null'
    str_1 = 'Js'
    str_2 = 'i'
    dict_0 = {str_1: none_type_0, str_1: none_type_0, str_0: none_type_0, str_2: none_type_0}
    var_0 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    var_2.loads(str_0)

@pytest.mark.xfail(strict=True)
def test_case_24():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert f'{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}' == 'tag.TaggedJSONSerializer'
    assert f'{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}' == 'builtins.list'
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert f'{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}' == 'builtins.member_descriptor'
    list_0 = [tagged_j_s_o_n_serializer_0, tagged_j_s_o_n_serializer_0, tagged_j_s_o_n_serializer_0, tagged_j_s_o_n_serializer_0]
    var_0 = tagged_j_s_o_n_serializer_0.tag(list_0)
    var_3.to_json(var_1)

@pytest.mark.xfail(strict=True)
def test_case_25():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert f'{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}' == 'tag.TaggedJSONSerializer'
    assert f'{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}' == 'builtins.list'
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert f'{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}' == 'builtins.member_descriptor'
    assert f'{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}' == 'builtins.member_descriptor'
    none_type_0 = None
    var_0 = tagged_j_s_o_n_serializer_0.tag(none_type_0)
    str_0 = '5s'
    dict_0 = {str_0: var_0, str_0: tagged_j_s_o_n_serializer_0, str_0: var_0}
    str_1 = tagged_j_s_o_n_serializer_0.dumps(dict_0)
    assert str_1 == '{"5s":null}'
    var_2 = tagged_j_s_o_n_serializer_0.loads(str_1)
    var_3.to_json(var_1)