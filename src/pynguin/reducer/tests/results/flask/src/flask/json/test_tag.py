# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tag as module_0


def test_case_0():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    assert str_0 == "null"
    var_0 = tagged_j_s_o_n_serializer_0.loads(str_0)


def test_case_1():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )


def test_case_2():
    bytes_0 = b"\xde\xa8\xf7\xbe\x9a\xb9|M\x9e\xd0\xf9\x9d"
    j_s_o_n_tag_0 = module_0.JSONTag(bytes_0)
    assert (
        f"{type(j_s_o_n_tag_0).__module__}.{type(j_s_o_n_tag_0).__qualname__}"
        == "tag.JSONTag"
    )
    assert module_0.JSONTag.key == ""
    assert (
        f"{type(module_0.JSONTag.serializer).__module__}.{type(module_0.JSONTag.serializer).__qualname__}"
        == "builtins.member_descriptor"
    )
    with pytest.raises(NotImplementedError):
        j_s_o_n_tag_0.to_python(j_s_o_n_tag_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    tag_markup_0 = module_0.TagMarkup(none_type_0)
    assert (
        f"{type(tag_markup_0).__module__}.{type(tag_markup_0).__qualname__}"
        == "tag.TagMarkup"
    )
    assert module_0.TagMarkup.key == " m"
    tag_markup_0.tag(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    tag_tuple_0 = module_0.TagTuple(tagged_j_s_o_n_serializer_0)
    assert module_0.TagTuple.key == " t"
    str_0 = ".nS"
    tag_dict_0 = module_0.TagDict(tagged_j_s_o_n_serializer_0)
    assert module_0.TagDict.key == " di"
    var_0 = tag_tuple_0.to_json(str_0)
    tag_tuple_1 = module_0.TagTuple(var_0)
    tag_dict_0.to_json(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    tag_date_time_0 = module_0.TagDateTime(none_type_0)
    assert (
        f"{type(tag_date_time_0).__module__}.{type(tag_date_time_0).__qualname__}"
        == "tag.TagDateTime"
    )
    assert module_0.TagDateTime.key == " d"
    tag_tuple_0 = module_0.TagTuple(none_type_0)
    assert module_0.TagTuple.key == " t"
    tag_tuple_0.to_python(tag_tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    tag_bytes_0 = module_0.TagBytes(none_type_0)
    assert (
        f"{type(tag_bytes_0).__module__}.{type(tag_bytes_0).__qualname__}"
        == "tag.TagBytes"
    )
    assert module_0.TagBytes.key == " b"
    tag_bytes_0.to_json(tag_bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    tag_markup_0 = module_0.TagMarkup(bool_0)
    assert (
        f"{type(tag_markup_0).__module__}.{type(tag_markup_0).__qualname__}"
        == "tag.TagMarkup"
    )
    assert module_0.TagMarkup.key == " m"
    none_type_0 = None
    tag_date_time_0 = module_0.TagDateTime(bool_0)
    assert module_0.TagDateTime.key == " d"
    tag_markup_1 = module_0.TagMarkup(bool_0)
    var_0 = tag_markup_1.to_python(none_type_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "markupsafe.Markup"
    assert len(var_0) == 4
    tag_markup_1.to_json(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    pass_dict_0 = module_0.PassDict(none_type_0)
    assert (
        f"{type(pass_dict_0).__module__}.{type(pass_dict_0).__qualname__}"
        == "tag.PassDict"
    )
    tag_date_time_0 = module_0.TagDateTime(none_type_0)
    assert (
        f"{type(tag_date_time_0).__module__}.{type(tag_date_time_0).__qualname__}"
        == "tag.TagDateTime"
    )
    assert module_0.TagDateTime.key == " d"
    tag_date_time_0.tag(tag_date_time_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    type_0 = module_0.PassList
    tagged_j_s_o_n_serializer_0.register(type_0, index=tagged_j_s_o_n_serializer_0)


def test_case_10():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    tag_tuple_0 = module_0.TagTuple(tagged_j_s_o_n_serializer_0)
    assert module_0.TagTuple.key == " t"
    j_s_o_n_tag_0 = module_0.JSONTag(tag_tuple_0)
    with pytest.raises(NotImplementedError):
        j_s_o_n_tag_0.to_json(j_s_o_n_tag_0)


def test_case_11():
    str_0 = "uRDE'\\<Ey<~\tSYeP2&<2"
    str_1 = "3_+6ko\n0V\x0b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = tagged_j_s_o_n_serializer_0.tag(dict_0)
    tag_bytes_0 = module_0.TagBytes(var_0)
    assert module_0.TagBytes.key == " b"


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    tag_date_time_0 = module_0.TagDateTime(none_type_0)
    assert (
        f"{type(tag_date_time_0).__module__}.{type(tag_date_time_0).__qualname__}"
        == "tag.TagDateTime"
    )
    assert module_0.TagDateTime.key == " d"
    var_0 = module_0.TagUUID(tag_date_time_0)
    assert module_0.TagUUID.key == " u"
    var_0.tag(tag_date_time_0)


def test_case_13():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    assert str_0 == "null"
    str_1 = "Js"
    dict_0 = {str_1: str_0, str_1: tagged_j_s_o_n_serializer_0, str_1: str_0}
    var_0 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    type_0 = module_0.TagBytes
    with pytest.raises(KeyError):
        tagged_j_s_o_n_serializer_0.register(type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    assert str_0 == "null"
    str_1 = "TJs"
    dict_0 = {str_0: str_0, str_1: str_0}
    var_0 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    none_type_1 = None
    var_1 = tagged_j_s_o_n_serializer_0.loads(str_0)
    var_1.to_python(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    tag_tuple_0 = module_0.TagTuple(tagged_j_s_o_n_serializer_0)
    assert module_0.TagTuple.key == " t"
    tag_dict_0 = module_0.TagDict(tag_tuple_0)
    assert module_0.TagDict.key == " di"
    none_type_0 = None
    bool_0 = tag_tuple_0.check(none_type_0)
    assert bool_0 is False
    var_0 = tagged_j_s_o_n_serializer_0.tag(tag_dict_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "tag.TagDict"
    tag_dict_1 = module_0.TagDict(tagged_j_s_o_n_serializer_0)
    var_0.to_python(tag_tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    str_0 = "TJs"
    dict_0 = {str_0: str_0, str_0: str_0}
    var_0 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    var_1 = tagged_j_s_o_n_serializer_0.untag(var_0)
    tagged_j_s_o_n_serializer_0.loads(var_1)


def test_case_17():
    set_0 = set()
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    j_s_o_n_tag_0 = module_0.JSONTag(set_0)
    tagged_j_s_o_n_serializer_1 = module_0.TaggedJSONSerializer()
    tag_date_time_0 = module_0.TagDateTime(tagged_j_s_o_n_serializer_1)
    assert module_0.TagDateTime.key == " d"
    with pytest.raises(NotImplementedError):
        j_s_o_n_tag_0.check(j_s_o_n_tag_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    tagged_j_s_o_n_serializer_1 = module_0.TaggedJSONSerializer()
    tag_bytes_0 = module_0.TagBytes(tagged_j_s_o_n_serializer_0)
    assert module_0.TagBytes.key == " b"
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    assert str_0 == "null"
    dict_0 = {str_0: str_0}
    var_0 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    var_1 = tagged_j_s_o_n_serializer_0.loads(str_0)
    tag_bytes_0.to_python(tagged_j_s_o_n_serializer_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "Pkc@$<Ac"
    none_type_0 = None
    tag_tuple_0 = module_0.TagTuple(str_0)
    assert (
        f"{type(tag_tuple_0).__module__}.{type(tag_tuple_0).__qualname__}"
        == "tag.TagTuple"
    )
    assert module_0.TagTuple.key == " t"
    tag_date_time_0 = module_0.TagDateTime(none_type_0)
    assert (
        f"{type(tag_date_time_0).__module__}.{type(tag_date_time_0).__qualname__}"
        == "tag.TagDateTime"
    )
    assert module_0.TagDateTime.key == " d"
    tag_date_time_1 = module_0.TagDateTime(none_type_0)
    tag_date_time_1.to_python(tag_date_time_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    assert str_0 == "null"
    str_1 = "Js"
    dict_0 = {str_1: str_0, str_1: tagged_j_s_o_n_serializer_0, str_1: str_0}
    var_0 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    var_1 = tagged_j_s_o_n_serializer_0.loads(str_0)
    var_2 = tagged_j_s_o_n_serializer_0.tag(var_0)
    var_1.loads(var_1)


@pytest.mark.xfail(strict=True)
def test_case_21():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    assert str_0 == "null"
    str_1 = "Js"
    type_0 = module_0.TagUUID
    none_type_1 = tagged_j_s_o_n_serializer_0.register(type_0, type_0)
    str_2 = "i"
    dict_0 = {
        str_1: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_2: none_type_0,
    }
    var_0 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    var_1 = var_0.__eq__(none_type_0)
    dict_1 = {str_1: str_0, str_1: tagged_j_s_o_n_serializer_0, str_1: str_0}
    var_2 = tagged_j_s_o_n_serializer_0.untag(dict_1)
    var_2.loads(str_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    assert str_0 == "null"
    tag_u_u_i_d_0 = module_0.TagUUID(none_type_0)
    assert module_0.TagUUID.key == " u"
    tag_u_u_i_d_0.to_python(tagged_j_s_o_n_serializer_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '\nAq"}o@#lN3<rztqUE.'
    pass_list_0 = module_0.PassList(str_0)
    assert (
        f"{type(pass_list_0).__module__}.{type(pass_list_0).__qualname__}"
        == "tag.PassList"
    )
    pass_list_0.to_json(pass_list_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    list_0 = [
        tagged_j_s_o_n_serializer_0,
        tagged_j_s_o_n_serializer_0,
        tagged_j_s_o_n_serializer_0,
        tagged_j_s_o_n_serializer_0,
    ]
    var_0 = tagged_j_s_o_n_serializer_0.tag(list_0)
    none_type_0 = None
    str_0 = tagged_j_s_o_n_serializer_0.dumps(none_type_0)
    str_1 = "5s"
    dict_0 = {str_1: str_0, str_1: tagged_j_s_o_n_serializer_0, str_1: str_0}
    var_1 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    var_2 = tagged_j_s_o_n_serializer_0.loads(str_0)
    var_3 = tagged_j_s_o_n_serializer_0.tag(var_1)
    var_3.to_json(var_1)


@pytest.mark.xfail(strict=True)
def test_case_25():
    tagged_j_s_o_n_serializer_0 = module_0.TaggedJSONSerializer()
    assert (
        f"{type(tagged_j_s_o_n_serializer_0).__module__}.{type(tagged_j_s_o_n_serializer_0).__qualname__}"
        == "tag.TaggedJSONSerializer"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.default_tags).__module__}.{type(module_0.TaggedJSONSerializer.default_tags).__qualname__}"
        == "builtins.list"
    )
    assert len(module_0.TaggedJSONSerializer.default_tags) == 8
    assert (
        f"{type(module_0.TaggedJSONSerializer.order).__module__}.{type(module_0.TaggedJSONSerializer.order).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.TaggedJSONSerializer.tags).__module__}.{type(module_0.TaggedJSONSerializer.tags).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_0 = None
    var_0 = tagged_j_s_o_n_serializer_0.tag(none_type_0)
    str_0 = "5s"
    dict_0 = {str_0: var_0, str_0: tagged_j_s_o_n_serializer_0, str_0: var_0}
    var_1 = tagged_j_s_o_n_serializer_0.untag(dict_0)
    str_1 = tagged_j_s_o_n_serializer_0.dumps(dict_0)
    assert str_1 == '{"5s":null}'
    var_2 = tagged_j_s_o_n_serializer_0.loads(str_1)
    var_3 = tagged_j_s_o_n_serializer_0.tag(var_1)
    var_3.to_json(var_1)
